// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;
import "./VerifierFuncAbst.sol";

contract VerifierFunc5 is VerifierFuncAbst {
    function verifyPartial(
        uint256[] memory pubInputs,
        bytes memory proof,
        bool success,
        bytes32[6992] memory transcript
    ) public view override returns (bool, bytes32[6992] memory) {
        // bytes32[6992] memory transcript;
        // require(_transcript.length == 6992, "transcript length is not 6992");
        // if(_transcript.length != 0) {
        //     transcript = abi.decode(_transcript, (bytes32[6992]));
        // }
        // for(uint i=0; i<_transcript.length; i++) {
        //     transcript[i] = _transcript[i];
        // }
        
        assembly {{
            
            let f_p
            := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let
                f_q
            := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid {
                {
                    let x_lt_p := lt(
                        x,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let y_lt_p := lt(
                        y,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let x_is_zero := eq(x, 0)
                    let y_is_zero := eq(y, 0)
                    let x_or_y_is_zero := or(x_is_zero, y_is_zero)
                    let x_and_y_is_not_zero := not(x_or_y_is_zero)
                    valid := and(x_and_y_is_not_zero, valid)
                }
                {
                    let y_square := mulmod(
                        y,
                        y,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let x_square := mulmod(
                        x,
                        x,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let x_cube := mulmod(
                        x_square,
                        x,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let x_cube_plus_3 := addmod(
                        x_cube,
                        3,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let y_square_eq_x_cube_plus_3 := eq(x_cube_plus_3, y_square)
                    valid := and(y_square_eq_x_cube_plus_3, valid)
                }
            }
    mstore(add(transcript, 0x212e0), mulmod(mload(add(transcript, 0x1af00)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21300), mulmod(mload(add(transcript, 0x1afa0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21320), mulmod(mload(add(transcript, 0x1b040)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21340), mulmod(mload(add(transcript, 0x1b0e0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21360), mulmod(mload(add(transcript, 0x1b180)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21380), mulmod(mload(add(transcript, 0x1b220)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x213a0), mulmod(mload(add(transcript, 0x1b2c0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x213c0), mulmod(mload(add(transcript, 0x1b360)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x213e0), mulmod(mload(add(transcript, 0x1b400)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21400), mulmod(mload(add(transcript, 0x1b4a0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21420), mulmod(mload(add(transcript, 0x1b540)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21440), mulmod(mload(add(transcript, 0x1b5e0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21460), mulmod(mload(add(transcript, 0x1b680)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21480), mulmod(mload(add(transcript, 0x1b720)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x214a0), mulmod(mload(add(transcript, 0x1b8a0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x214c0), mulmod(mload(add(transcript, 0x1b920)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x214e0), mulmod(mload(add(transcript, 0x1b9c0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21500), mulmod(mload(add(transcript, 0x1ba60)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21520), mulmod(mload(add(transcript, 0x1bb00)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21540), mulmod(mload(add(transcript, 0x1bba0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21560), mulmod(mload(add(transcript, 0x1bc40)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21580), mulmod(mload(add(transcript, 0x1bce0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x215a0), mulmod(mload(add(transcript, 0x1bd80)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x215c0), mulmod(mload(add(transcript, 0x1be20)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x215e0), mulmod(mload(add(transcript, 0x1c360)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21600), mulmod(mload(add(transcript, 0x1bf60)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21620), mulmod(mload(add(transcript, 0x1c000)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21640), mulmod(mload(add(transcript, 0x1c0a0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21660), mulmod(mload(add(transcript, 0x1c140)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21680), mulmod(mload(add(transcript, 0x1c1e0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x216a0), mulmod(mload(add(transcript, 0x1c280)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x216c0), mulmod(mload(add(transcript, 0x1c3e0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x216e0), mulmod(mload(add(transcript, 0x1c480)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21700), mulmod(mload(add(transcript, 0x1c520)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21720), mulmod(mload(add(transcript, 0x1c5c0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21740), mulmod(mload(add(transcript, 0x1c660)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21760), mulmod(mload(add(transcript, 0x1c700)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21780), mulmod(mload(add(transcript, 0x1c7a0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x217a0), mulmod(mload(add(transcript, 0x1c840)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x217c0), mulmod(mload(add(transcript, 0x1c8e0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x217e0), mulmod(mload(add(transcript, 0x1c980)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21800), mulmod(mload(add(transcript, 0x1ca20)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21820), mulmod(mload(add(transcript, 0x1cac0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21840), mulmod(mload(add(transcript, 0x1cb60)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21860), mulmod(mload(add(transcript, 0x1cc00)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21880), mulmod(mload(add(transcript, 0x1cca0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x218a0), mulmod(mload(add(transcript, 0x1cd40)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x218c0), mulmod(mload(add(transcript, 0x1cde0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x218e0), mulmod(mload(add(transcript, 0x1ce80)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21900), mulmod(mload(add(transcript, 0x1cf20)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21920), mulmod(mload(add(transcript, 0x1cfc0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21940), mulmod(mload(add(transcript, 0x1d060)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21960), mulmod(mload(add(transcript, 0x1d100)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21980), mulmod(mload(add(transcript, 0x1d1a0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x219a0), mulmod(mload(add(transcript, 0x1d240)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x219c0), mulmod(mload(add(transcript, 0x1d2e0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x219e0), mulmod(mload(add(transcript, 0x1d500)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21a00), mulmod(mload(add(transcript, 0x1d420)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21a20), mulmod(mload(add(transcript, 0x1d580)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21a40), mulmod(mload(add(transcript, 0x1d620)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21a60), mulmod(mload(add(transcript, 0x1d6c0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21a80), mulmod(mload(add(transcript, 0x1d760)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21aa0), mulmod(mload(add(transcript, 0x1d800)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21ac0), mulmod(mload(add(transcript, 0x1d8a0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21ae0), mulmod(mload(add(transcript, 0x1d940)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21b00), mulmod(mload(add(transcript, 0x1d9e0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21b20), mulmod(mload(add(transcript, 0x1da80)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21b40), mulmod(mload(add(transcript, 0x1db20)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21b60), mulmod(mload(add(transcript, 0x1dbc0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21b80), mulmod(mload(add(transcript, 0x1dc60)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21ba0), mulmod(mload(add(transcript, 0x1dd00)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21bc0), mulmod(mload(add(transcript, 0x1dda0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21be0), mulmod(mload(add(transcript, 0x1de40)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21c00), mulmod(mload(add(transcript, 0x1dee0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21c20), mulmod(mload(add(transcript, 0x1df80)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21c40), mulmod(mload(add(transcript, 0x1e020)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21c60), mulmod(mload(add(transcript, 0x1e0c0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21c80), mulmod(mload(add(transcript, 0x1e160)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21ca0), mulmod(mload(add(transcript, 0x1e200)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21cc0), mulmod(mload(add(transcript, 0x1e2a0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21ce0), mulmod(mload(add(transcript, 0x1e340)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21d00), mulmod(mload(add(transcript, 0x1e3e0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21d20), mulmod(mload(add(transcript, 0x1e480)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21d40), mulmod(mload(add(transcript, 0x1e520)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21d60), mulmod(mload(add(transcript, 0x1e5c0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21d80), mulmod(mload(add(transcript, 0x1e660)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21da0), mulmod(mload(add(transcript, 0x1e700)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21dc0), mulmod(mload(add(transcript, 0x1e7a0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21de0), mulmod(mload(add(transcript, 0x1e840)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21e00), mulmod(mload(add(transcript, 0x1e8e0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21e20), mulmod(mload(add(transcript, 0x1e980)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21e40), mulmod(mload(add(transcript, 0x1ea20)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21e60), mulmod(mload(add(transcript, 0x1eac0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21e80), mulmod(mload(add(transcript, 0x1eb60)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21ea0), mulmod(mload(add(transcript, 0x1ec00)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21ec0), mulmod(mload(add(transcript, 0x1eca0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21ee0), mulmod(mload(add(transcript, 0x1ed40)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21f00), mulmod(mload(add(transcript, 0x1ede0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21f20), mulmod(mload(add(transcript, 0x1ee80)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21f40), mulmod(mload(add(transcript, 0x1ef20)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21f60), mulmod(mload(add(transcript, 0x1efc0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21f80), mulmod(mload(add(transcript, 0x1f060)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21fa0), mulmod(mload(add(transcript, 0x1f100)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21fc0), mulmod(mload(add(transcript, 0x1f1a0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x21fe0), mulmod(mload(add(transcript, 0x1f240)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22000), mulmod(mload(add(transcript, 0x1f2e0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22020), mulmod(mload(add(transcript, 0x1f380)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22040), mulmod(mload(add(transcript, 0x1f420)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22060), mulmod(mload(add(transcript, 0x1f4c0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22080), mulmod(mload(add(transcript, 0x1f560)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x220a0), mulmod(mload(add(transcript, 0x1f600)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x220c0), mulmod(mload(add(transcript, 0x1f6a0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x220e0), mulmod(mload(add(transcript, 0x1f740)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22100), mulmod(mload(add(transcript, 0x1f7e0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22120), mulmod(mload(add(transcript, 0x1f880)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22140), mulmod(mload(add(transcript, 0x1f920)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22160), mulmod(mload(add(transcript, 0x1f9c0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22180), mulmod(mload(add(transcript, 0x1fa60)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x221a0), mulmod(mload(add(transcript, 0x1fb00)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x221c0), mulmod(mload(add(transcript, 0x1fba0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x221e0), mulmod(mload(add(transcript, 0x1fc40)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22200), mulmod(mload(add(transcript, 0x1fce0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22220), mulmod(mload(add(transcript, 0x1fd80)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22240), mulmod(mload(add(transcript, 0x1fe20)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22260), mulmod(mload(add(transcript, 0x1fec0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22280), mulmod(mload(add(transcript, 0x1ff60)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x222a0), mulmod(mload(add(transcript, 0x20000)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x222c0), mulmod(mload(add(transcript, 0x200a0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x222e0), mulmod(mload(add(transcript, 0x20140)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22300), mulmod(mload(add(transcript, 0x201e0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22320), mulmod(mload(add(transcript, 0x20280)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22340), mulmod(mload(add(transcript, 0x20320)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22360), mulmod(mload(add(transcript, 0x203c0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22380), mulmod(mload(add(transcript, 0x20460)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x223a0), mulmod(mload(add(transcript, 0x20500)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x223c0), mulmod(mload(add(transcript, 0x205a0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x223e0), mulmod(mload(add(transcript, 0x20640)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22400), mulmod(mload(add(transcript, 0x206e0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22420), mulmod(mload(add(transcript, 0x20780)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22440), mulmod(mload(add(transcript, 0x20820)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22460), mulmod(mload(add(transcript, 0x208c0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22480), mulmod(mload(add(transcript, 0x20960)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x224a0), mulmod(mload(add(transcript, 0x20a80)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x224c0), mulmod(mload(add(transcript, 0x20aa0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x224e0), mulmod(mload(add(transcript, 0x20ac0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22500), mulmod(mload(add(transcript, 0x20ae0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22520), mulmod(mload(add(transcript, 0x20b00)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22540), mulmod(mload(add(transcript, 0x20ba0)), mload(add(transcript, 0x6120)), f_q))
mstore(add(transcript, 0x22560), addmod(mload(add(transcript, 0x18a00)), mload(add(transcript, 0x20be0)), f_q))
mstore(add(transcript, 0x22580), mulmod(1, mload(add(transcript, 0x16220)), f_q))
{            let result := mulmod(mload(add(transcript, 0x31c0)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x3420)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x225a0), result)        }
mstore(add(transcript, 0x225c0), mulmod(mload(add(transcript, 0x225a0)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x225e0), mulmod(sub(f_q, mload(add(transcript, 0x225c0))), 1, f_q))
mstore(add(transcript, 0x22600), mulmod(mload(add(transcript, 0x22580)), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0x31e0)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x3460)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x22620), result)        }
mstore(add(transcript, 0x22640), mulmod(mload(add(transcript, 0x22620)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x22660), mulmod(sub(f_q, mload(add(transcript, 0x22640))), mload(add(transcript, 0x60c0)), f_q))
mstore(add(transcript, 0x22680), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x60c0)), f_q))
mstore(add(transcript, 0x226a0), addmod(mload(add(transcript, 0x225e0)), mload(add(transcript, 0x22660)), f_q))
{            let result := mulmod(mload(add(transcript, 0x3200)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x34a0)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x226c0), result)        }
mstore(add(transcript, 0x226e0), mulmod(mload(add(transcript, 0x226c0)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x22700), mulmod(sub(f_q, mload(add(transcript, 0x226e0))), mload(add(transcript, 0x16540)), f_q))
mstore(add(transcript, 0x22720), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16540)), f_q))
mstore(add(transcript, 0x22740), addmod(mload(add(transcript, 0x226a0)), mload(add(transcript, 0x22700)), f_q))
{            let result := mulmod(mload(add(transcript, 0x3220)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x34e0)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x22760), result)        }
mstore(add(transcript, 0x22780), mulmod(mload(add(transcript, 0x22760)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x227a0), mulmod(sub(f_q, mload(add(transcript, 0x22780))), mload(add(transcript, 0x16560)), f_q))
mstore(add(transcript, 0x227c0), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16560)), f_q))
mstore(add(transcript, 0x227e0), addmod(mload(add(transcript, 0x22740)), mload(add(transcript, 0x227a0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x3340)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x3440)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x22800), result)        }
mstore(add(transcript, 0x22820), mulmod(mload(add(transcript, 0x22800)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x22840), mulmod(sub(f_q, mload(add(transcript, 0x22820))), mload(add(transcript, 0x16580)), f_q))
mstore(add(transcript, 0x22860), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16580)), f_q))
mstore(add(transcript, 0x22880), addmod(mload(add(transcript, 0x227e0)), mload(add(transcript, 0x22840)), f_q))
{            let result := mulmod(mload(add(transcript, 0x3360)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x3480)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x228a0), result)        }
mstore(add(transcript, 0x228c0), mulmod(mload(add(transcript, 0x228a0)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x228e0), mulmod(sub(f_q, mload(add(transcript, 0x228c0))), mload(add(transcript, 0x165a0)), f_q))
mstore(add(transcript, 0x22900), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x165a0)), f_q))
mstore(add(transcript, 0x22920), addmod(mload(add(transcript, 0x22880)), mload(add(transcript, 0x228e0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x3380)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x34c0)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x22940), result)        }
mstore(add(transcript, 0x22960), mulmod(mload(add(transcript, 0x22940)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x22980), mulmod(sub(f_q, mload(add(transcript, 0x22960))), mload(add(transcript, 0x165c0)), f_q))
mstore(add(transcript, 0x229a0), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x165c0)), f_q))
mstore(add(transcript, 0x229c0), addmod(mload(add(transcript, 0x22920)), mload(add(transcript, 0x22980)), f_q))
{            let result := mulmod(mload(add(transcript, 0x33a0)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x3500)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x229e0), result)        }
mstore(add(transcript, 0x22a00), mulmod(mload(add(transcript, 0x229e0)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x22a20), mulmod(sub(f_q, mload(add(transcript, 0x22a00))), mload(add(transcript, 0x165e0)), f_q))
mstore(add(transcript, 0x22a40), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x165e0)), f_q))
mstore(add(transcript, 0x22a60), addmod(mload(add(transcript, 0x229c0)), mload(add(transcript, 0x22a20)), f_q))
{            let result := mulmod(mload(add(transcript, 0x3520)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x3600)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x22a80), result)        }
mstore(add(transcript, 0x22aa0), mulmod(mload(add(transcript, 0x22a80)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x22ac0), mulmod(sub(f_q, mload(add(transcript, 0x22aa0))), mload(add(transcript, 0x16600)), f_q))
mstore(add(transcript, 0x22ae0), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16600)), f_q))
mstore(add(transcript, 0x22b00), addmod(mload(add(transcript, 0x22a60)), mload(add(transcript, 0x22ac0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x3580)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x3620)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x22b20), result)        }
mstore(add(transcript, 0x22b40), mulmod(mload(add(transcript, 0x22b20)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x22b60), mulmod(sub(f_q, mload(add(transcript, 0x22b40))), mload(add(transcript, 0x16620)), f_q))
mstore(add(transcript, 0x22b80), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16620)), f_q))
mstore(add(transcript, 0x22ba0), addmod(mload(add(transcript, 0x22b00)), mload(add(transcript, 0x22b60)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5180)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x22bc0), result)        }
mstore(add(transcript, 0x22be0), mulmod(mload(add(transcript, 0x22bc0)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x22c00), mulmod(sub(f_q, mload(add(transcript, 0x22be0))), mload(add(transcript, 0x16640)), f_q))
mstore(add(transcript, 0x22c20), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16640)), f_q))
mstore(add(transcript, 0x22c40), addmod(mload(add(transcript, 0x22ba0)), mload(add(transcript, 0x22c00)), f_q))
{            let result := mulmod(mload(add(transcript, 0x51a0)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x51c0)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x22c60), result)        }
mstore(add(transcript, 0x22c80), mulmod(mload(add(transcript, 0x22c60)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x22ca0), mulmod(sub(f_q, mload(add(transcript, 0x22c80))), mload(add(transcript, 0x16660)), f_q))
mstore(add(transcript, 0x22cc0), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16660)), f_q))
mstore(add(transcript, 0x22ce0), addmod(mload(add(transcript, 0x22c40)), mload(add(transcript, 0x22ca0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5240)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5260)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x22d00), result)        }
mstore(add(transcript, 0x22d20), mulmod(mload(add(transcript, 0x22d00)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x22d40), mulmod(sub(f_q, mload(add(transcript, 0x22d20))), mload(add(transcript, 0x16680)), f_q))
mstore(add(transcript, 0x22d60), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16680)), f_q))
mstore(add(transcript, 0x22d80), addmod(mload(add(transcript, 0x22ce0)), mload(add(transcript, 0x22d40)), f_q))
{            let result := mulmod(mload(add(transcript, 0x52e0)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5300)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x22da0), result)        }
mstore(add(transcript, 0x22dc0), mulmod(mload(add(transcript, 0x22da0)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x22de0), mulmod(sub(f_q, mload(add(transcript, 0x22dc0))), mload(add(transcript, 0x166a0)), f_q))
mstore(add(transcript, 0x22e00), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x166a0)), f_q))
mstore(add(transcript, 0x22e20), addmod(mload(add(transcript, 0x22d80)), mload(add(transcript, 0x22de0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5380)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x53a0)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x22e40), result)        }
mstore(add(transcript, 0x22e60), mulmod(mload(add(transcript, 0x22e40)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x22e80), mulmod(sub(f_q, mload(add(transcript, 0x22e60))), mload(add(transcript, 0x166c0)), f_q))
mstore(add(transcript, 0x22ea0), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x166c0)), f_q))
mstore(add(transcript, 0x22ec0), addmod(mload(add(transcript, 0x22e20)), mload(add(transcript, 0x22e80)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5420)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5440)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x22ee0), result)        }
mstore(add(transcript, 0x22f00), mulmod(mload(add(transcript, 0x22ee0)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x22f20), mulmod(sub(f_q, mload(add(transcript, 0x22f00))), mload(add(transcript, 0x166e0)), f_q))
mstore(add(transcript, 0x22f40), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x166e0)), f_q))
mstore(add(transcript, 0x22f60), addmod(mload(add(transcript, 0x22ec0)), mload(add(transcript, 0x22f20)), f_q))
{            let result := mulmod(mload(add(transcript, 0x54c0)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x54e0)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x22f80), result)        }
mstore(add(transcript, 0x22fa0), mulmod(mload(add(transcript, 0x22f80)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x22fc0), mulmod(sub(f_q, mload(add(transcript, 0x22fa0))), mload(add(transcript, 0x16700)), f_q))
mstore(add(transcript, 0x22fe0), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16700)), f_q))
mstore(add(transcript, 0x23000), addmod(mload(add(transcript, 0x22f60)), mload(add(transcript, 0x22fc0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5560)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5580)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x23020), result)        }
mstore(add(transcript, 0x23040), mulmod(mload(add(transcript, 0x23020)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x23060), mulmod(sub(f_q, mload(add(transcript, 0x23040))), mload(add(transcript, 0x16720)), f_q))
mstore(add(transcript, 0x23080), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16720)), f_q))
mstore(add(transcript, 0x230a0), addmod(mload(add(transcript, 0x23000)), mload(add(transcript, 0x23060)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5600)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5620)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x230c0), result)        }
mstore(add(transcript, 0x230e0), mulmod(mload(add(transcript, 0x230c0)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x23100), mulmod(sub(f_q, mload(add(transcript, 0x230e0))), mload(add(transcript, 0x16740)), f_q))
mstore(add(transcript, 0x23120), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16740)), f_q))
mstore(add(transcript, 0x23140), addmod(mload(add(transcript, 0x230a0)), mload(add(transcript, 0x23100)), f_q))
{            let result := mulmod(mload(add(transcript, 0x56a0)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x56c0)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x23160), result)        }
mstore(add(transcript, 0x23180), mulmod(mload(add(transcript, 0x23160)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x231a0), mulmod(sub(f_q, mload(add(transcript, 0x23180))), mload(add(transcript, 0x16760)), f_q))
mstore(add(transcript, 0x231c0), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16760)), f_q))
mstore(add(transcript, 0x231e0), addmod(mload(add(transcript, 0x23140)), mload(add(transcript, 0x231a0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5740)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5760)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x23200), result)        }
mstore(add(transcript, 0x23220), mulmod(mload(add(transcript, 0x23200)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x23240), mulmod(sub(f_q, mload(add(transcript, 0x23220))), mload(add(transcript, 0x16780)), f_q))
mstore(add(transcript, 0x23260), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16780)), f_q))
mstore(add(transcript, 0x23280), addmod(mload(add(transcript, 0x231e0)), mload(add(transcript, 0x23240)), f_q))
{            let result := mulmod(mload(add(transcript, 0x57e0)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5800)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x232a0), result)        }
mstore(add(transcript, 0x232c0), mulmod(mload(add(transcript, 0x232a0)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x232e0), mulmod(sub(f_q, mload(add(transcript, 0x232c0))), mload(add(transcript, 0x167a0)), f_q))
mstore(add(transcript, 0x23300), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x167a0)), f_q))
mstore(add(transcript, 0x23320), addmod(mload(add(transcript, 0x23280)), mload(add(transcript, 0x232e0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5880)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x58a0)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x23340), result)        }
mstore(add(transcript, 0x23360), mulmod(mload(add(transcript, 0x23340)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x23380), mulmod(sub(f_q, mload(add(transcript, 0x23360))), mload(add(transcript, 0x167c0)), f_q))
mstore(add(transcript, 0x233a0), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x167c0)), f_q))
mstore(add(transcript, 0x233c0), addmod(mload(add(transcript, 0x23320)), mload(add(transcript, 0x23380)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5920)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5940)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x233e0), result)        }
mstore(add(transcript, 0x23400), mulmod(mload(add(transcript, 0x233e0)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x23420), mulmod(sub(f_q, mload(add(transcript, 0x23400))), mload(add(transcript, 0x167e0)), f_q))
mstore(add(transcript, 0x23440), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x167e0)), f_q))
mstore(add(transcript, 0x23460), addmod(mload(add(transcript, 0x233c0)), mload(add(transcript, 0x23420)), f_q))
{            let result := mulmod(mload(add(transcript, 0x59c0)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x59e0)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x23480), result)        }
mstore(add(transcript, 0x234a0), mulmod(mload(add(transcript, 0x23480)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x234c0), mulmod(sub(f_q, mload(add(transcript, 0x234a0))), mload(add(transcript, 0x16800)), f_q))
mstore(add(transcript, 0x234e0), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16800)), f_q))
mstore(add(transcript, 0x23500), addmod(mload(add(transcript, 0x23460)), mload(add(transcript, 0x234c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5a60)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5a80)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x23520), result)        }
mstore(add(transcript, 0x23540), mulmod(mload(add(transcript, 0x23520)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x23560), mulmod(sub(f_q, mload(add(transcript, 0x23540))), mload(add(transcript, 0x16820)), f_q))
mstore(add(transcript, 0x23580), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16820)), f_q))
mstore(add(transcript, 0x235a0), addmod(mload(add(transcript, 0x23500)), mload(add(transcript, 0x23560)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5b00)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5b20)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x235c0), result)        }
mstore(add(transcript, 0x235e0), mulmod(mload(add(transcript, 0x235c0)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x23600), mulmod(sub(f_q, mload(add(transcript, 0x235e0))), mload(add(transcript, 0x16840)), f_q))
mstore(add(transcript, 0x23620), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16840)), f_q))
mstore(add(transcript, 0x23640), addmod(mload(add(transcript, 0x235a0)), mload(add(transcript, 0x23600)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5ba0)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5bc0)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x23660), result)        }
mstore(add(transcript, 0x23680), mulmod(mload(add(transcript, 0x23660)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x236a0), mulmod(sub(f_q, mload(add(transcript, 0x23680))), mload(add(transcript, 0x16860)), f_q))
mstore(add(transcript, 0x236c0), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16860)), f_q))
mstore(add(transcript, 0x236e0), addmod(mload(add(transcript, 0x23640)), mload(add(transcript, 0x236a0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5c40)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5c60)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x23700), result)        }
mstore(add(transcript, 0x23720), mulmod(mload(add(transcript, 0x23700)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x23740), mulmod(sub(f_q, mload(add(transcript, 0x23720))), mload(add(transcript, 0x16880)), f_q))
mstore(add(transcript, 0x23760), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16880)), f_q))
mstore(add(transcript, 0x23780), addmod(mload(add(transcript, 0x236e0)), mload(add(transcript, 0x23740)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5ce0)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5d00)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x237a0), result)        }
mstore(add(transcript, 0x237c0), mulmod(mload(add(transcript, 0x237a0)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x237e0), mulmod(sub(f_q, mload(add(transcript, 0x237c0))), mload(add(transcript, 0x168a0)), f_q))
mstore(add(transcript, 0x23800), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x168a0)), f_q))
mstore(add(transcript, 0x23820), addmod(mload(add(transcript, 0x23780)), mload(add(transcript, 0x237e0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5d80)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5da0)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x23840), result)        }
mstore(add(transcript, 0x23860), mulmod(mload(add(transcript, 0x23840)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x23880), mulmod(sub(f_q, mload(add(transcript, 0x23860))), mload(add(transcript, 0x168c0)), f_q))
mstore(add(transcript, 0x238a0), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x168c0)), f_q))
mstore(add(transcript, 0x238c0), addmod(mload(add(transcript, 0x23820)), mload(add(transcript, 0x23880)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5e20)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5e40)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x238e0), result)        }
mstore(add(transcript, 0x23900), mulmod(mload(add(transcript, 0x238e0)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x23920), mulmod(sub(f_q, mload(add(transcript, 0x23900))), mload(add(transcript, 0x168e0)), f_q))
mstore(add(transcript, 0x23940), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x168e0)), f_q))
mstore(add(transcript, 0x23960), addmod(mload(add(transcript, 0x238c0)), mload(add(transcript, 0x23920)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5ec0)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5ee0)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x23980), result)        }
mstore(add(transcript, 0x239a0), mulmod(mload(add(transcript, 0x23980)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x239c0), mulmod(sub(f_q, mload(add(transcript, 0x239a0))), mload(add(transcript, 0x16900)), f_q))
mstore(add(transcript, 0x239e0), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16900)), f_q))
mstore(add(transcript, 0x23a00), addmod(mload(add(transcript, 0x23960)), mload(add(transcript, 0x239c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5f60)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5f80)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x23a20), result)        }
mstore(add(transcript, 0x23a40), mulmod(mload(add(transcript, 0x23a20)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x23a60), mulmod(sub(f_q, mload(add(transcript, 0x23a40))), mload(add(transcript, 0x16920)), f_q))
mstore(add(transcript, 0x23a80), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16920)), f_q))
mstore(add(transcript, 0x23aa0), addmod(mload(add(transcript, 0x23a00)), mload(add(transcript, 0x23a60)), f_q))
{            let result := mulmod(mload(add(transcript, 0x6000)), mload(add(transcript, 0x15d00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x6020)), mload(add(transcript, 0x15d20)), f_q), result, f_q)mstore(add(transcript, 0x23ac0), result)        }
mstore(add(transcript, 0x23ae0), mulmod(mload(add(transcript, 0x23ac0)), mload(add(transcript, 0x164c0)), f_q))
mstore(add(transcript, 0x23b00), mulmod(sub(f_q, mload(add(transcript, 0x23ae0))), mload(add(transcript, 0x16940)), f_q))
mstore(add(transcript, 0x23b20), mulmod(mload(add(transcript, 0x22580)), mload(add(transcript, 0x16940)), f_q))
mstore(add(transcript, 0x23b40), addmod(mload(add(transcript, 0x23aa0)), mload(add(transcript, 0x23b00)), f_q))
mstore(add(transcript, 0x23b60), mulmod(mload(add(transcript, 0x23b40)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23b80), mulmod(mload(add(transcript, 0x22600)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23ba0), mulmod(mload(add(transcript, 0x22680)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23bc0), mulmod(mload(add(transcript, 0x22720)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23be0), mulmod(mload(add(transcript, 0x227c0)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23c00), mulmod(mload(add(transcript, 0x22860)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23c20), mulmod(mload(add(transcript, 0x22900)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23c40), mulmod(mload(add(transcript, 0x229a0)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23c60), mulmod(mload(add(transcript, 0x22a40)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23c80), mulmod(mload(add(transcript, 0x22ae0)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23ca0), mulmod(mload(add(transcript, 0x22b80)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23cc0), mulmod(mload(add(transcript, 0x22c20)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23ce0), mulmod(mload(add(transcript, 0x22cc0)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23d00), mulmod(mload(add(transcript, 0x22d60)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23d20), mulmod(mload(add(transcript, 0x22e00)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23d40), mulmod(mload(add(transcript, 0x22ea0)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23d60), mulmod(mload(add(transcript, 0x22f40)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23d80), mulmod(mload(add(transcript, 0x22fe0)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23da0), mulmod(mload(add(transcript, 0x23080)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23dc0), mulmod(mload(add(transcript, 0x23120)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23de0), mulmod(mload(add(transcript, 0x231c0)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23e00), mulmod(mload(add(transcript, 0x23260)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23e20), mulmod(mload(add(transcript, 0x23300)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23e40), mulmod(mload(add(transcript, 0x233a0)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23e60), mulmod(mload(add(transcript, 0x23440)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23e80), mulmod(mload(add(transcript, 0x234e0)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23ea0), mulmod(mload(add(transcript, 0x23580)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23ec0), mulmod(mload(add(transcript, 0x23620)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23ee0), mulmod(mload(add(transcript, 0x236c0)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23f00), mulmod(mload(add(transcript, 0x23760)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23f20), mulmod(mload(add(transcript, 0x23800)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23f40), mulmod(mload(add(transcript, 0x238a0)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23f60), mulmod(mload(add(transcript, 0x23940)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23f80), mulmod(mload(add(transcript, 0x239e0)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23fa0), mulmod(mload(add(transcript, 0x23a80)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23fc0), mulmod(mload(add(transcript, 0x23b20)), mload(add(transcript, 0x17e60)), f_q))
mstore(add(transcript, 0x23fe0), addmod(mload(add(transcript, 0x22560)), mload(add(transcript, 0x23b60)), f_q))
mstore(add(transcript, 0x24000), mulmod(1, mload(add(transcript, 0x16260)), f_q))
{            let result := mulmod(mload(add(transcript, 0x33e0)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x3400)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24020), result)        }
mstore(add(transcript, 0x24040), mulmod(mload(add(transcript, 0x24020)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24060), mulmod(sub(f_q, mload(add(transcript, 0x24040))), 1, f_q))
mstore(add(transcript, 0x24080), mulmod(mload(add(transcript, 0x24000)), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0x35c0)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x35e0)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x240a0), result)        }
mstore(add(transcript, 0x240c0), mulmod(mload(add(transcript, 0x240a0)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x240e0), mulmod(sub(f_q, mload(add(transcript, 0x240c0))), mload(add(transcript, 0x60c0)), f_q))
mstore(add(transcript, 0x24100), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x60c0)), f_q))
mstore(add(transcript, 0x24120), addmod(mload(add(transcript, 0x24060)), mload(add(transcript, 0x240e0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x51e0)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5200)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24140), result)        }
mstore(add(transcript, 0x24160), mulmod(mload(add(transcript, 0x24140)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24180), mulmod(sub(f_q, mload(add(transcript, 0x24160))), mload(add(transcript, 0x16540)), f_q))
mstore(add(transcript, 0x241a0), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x16540)), f_q))
mstore(add(transcript, 0x241c0), addmod(mload(add(transcript, 0x24120)), mload(add(transcript, 0x24180)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5280)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x52a0)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x241e0), result)        }
mstore(add(transcript, 0x24200), mulmod(mload(add(transcript, 0x241e0)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24220), mulmod(sub(f_q, mload(add(transcript, 0x24200))), mload(add(transcript, 0x16560)), f_q))
mstore(add(transcript, 0x24240), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x16560)), f_q))
mstore(add(transcript, 0x24260), addmod(mload(add(transcript, 0x241c0)), mload(add(transcript, 0x24220)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5320)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5340)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24280), result)        }
mstore(add(transcript, 0x242a0), mulmod(mload(add(transcript, 0x24280)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x242c0), mulmod(sub(f_q, mload(add(transcript, 0x242a0))), mload(add(transcript, 0x16580)), f_q))
mstore(add(transcript, 0x242e0), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x16580)), f_q))
mstore(add(transcript, 0x24300), addmod(mload(add(transcript, 0x24260)), mload(add(transcript, 0x242c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x53c0)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x53e0)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24320), result)        }
mstore(add(transcript, 0x24340), mulmod(mload(add(transcript, 0x24320)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24360), mulmod(sub(f_q, mload(add(transcript, 0x24340))), mload(add(transcript, 0x165a0)), f_q))
mstore(add(transcript, 0x24380), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x165a0)), f_q))
mstore(add(transcript, 0x243a0), addmod(mload(add(transcript, 0x24300)), mload(add(transcript, 0x24360)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5460)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5480)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x243c0), result)        }
mstore(add(transcript, 0x243e0), mulmod(mload(add(transcript, 0x243c0)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24400), mulmod(sub(f_q, mload(add(transcript, 0x243e0))), mload(add(transcript, 0x165c0)), f_q))
mstore(add(transcript, 0x24420), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x165c0)), f_q))
mstore(add(transcript, 0x24440), addmod(mload(add(transcript, 0x243a0)), mload(add(transcript, 0x24400)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5500)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5520)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24460), result)        }
mstore(add(transcript, 0x24480), mulmod(mload(add(transcript, 0x24460)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x244a0), mulmod(sub(f_q, mload(add(transcript, 0x24480))), mload(add(transcript, 0x165e0)), f_q))
mstore(add(transcript, 0x244c0), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x165e0)), f_q))
mstore(add(transcript, 0x244e0), addmod(mload(add(transcript, 0x24440)), mload(add(transcript, 0x244a0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x55a0)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x55c0)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24500), result)        }
mstore(add(transcript, 0x24520), mulmod(mload(add(transcript, 0x24500)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24540), mulmod(sub(f_q, mload(add(transcript, 0x24520))), mload(add(transcript, 0x16600)), f_q))
mstore(add(transcript, 0x24560), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x16600)), f_q))
mstore(add(transcript, 0x24580), addmod(mload(add(transcript, 0x244e0)), mload(add(transcript, 0x24540)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5640)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5660)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x245a0), result)        }
mstore(add(transcript, 0x245c0), mulmod(mload(add(transcript, 0x245a0)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x245e0), mulmod(sub(f_q, mload(add(transcript, 0x245c0))), mload(add(transcript, 0x16620)), f_q))
mstore(add(transcript, 0x24600), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x16620)), f_q))
mstore(add(transcript, 0x24620), addmod(mload(add(transcript, 0x24580)), mload(add(transcript, 0x245e0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x56e0)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5700)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24640), result)        }
mstore(add(transcript, 0x24660), mulmod(mload(add(transcript, 0x24640)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24680), mulmod(sub(f_q, mload(add(transcript, 0x24660))), mload(add(transcript, 0x16640)), f_q))
mstore(add(transcript, 0x246a0), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x16640)), f_q))
mstore(add(transcript, 0x246c0), addmod(mload(add(transcript, 0x24620)), mload(add(transcript, 0x24680)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5780)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x246e0), result)        }
mstore(add(transcript, 0x24700), mulmod(mload(add(transcript, 0x246e0)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24720), mulmod(sub(f_q, mload(add(transcript, 0x24700))), mload(add(transcript, 0x16660)), f_q))
mstore(add(transcript, 0x24740), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x16660)), f_q))
mstore(add(transcript, 0x24760), addmod(mload(add(transcript, 0x246c0)), mload(add(transcript, 0x24720)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5820)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5840)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24780), result)        }
mstore(add(transcript, 0x247a0), mulmod(mload(add(transcript, 0x24780)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x247c0), mulmod(sub(f_q, mload(add(transcript, 0x247a0))), mload(add(transcript, 0x16680)), f_q))
mstore(add(transcript, 0x247e0), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x16680)), f_q))
mstore(add(transcript, 0x24800), addmod(mload(add(transcript, 0x24760)), mload(add(transcript, 0x247c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x58c0)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x58e0)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24820), result)        }
mstore(add(transcript, 0x24840), mulmod(mload(add(transcript, 0x24820)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24860), mulmod(sub(f_q, mload(add(transcript, 0x24840))), mload(add(transcript, 0x166a0)), f_q))
mstore(add(transcript, 0x24880), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x166a0)), f_q))
mstore(add(transcript, 0x248a0), addmod(mload(add(transcript, 0x24800)), mload(add(transcript, 0x24860)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5960)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5980)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x248c0), result)        }
mstore(add(transcript, 0x248e0), mulmod(mload(add(transcript, 0x248c0)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24900), mulmod(sub(f_q, mload(add(transcript, 0x248e0))), mload(add(transcript, 0x166c0)), f_q))
mstore(add(transcript, 0x24920), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x166c0)), f_q))
mstore(add(transcript, 0x24940), addmod(mload(add(transcript, 0x248a0)), mload(add(transcript, 0x24900)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5a00)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5a20)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24960), result)        }
mstore(add(transcript, 0x24980), mulmod(mload(add(transcript, 0x24960)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x249a0), mulmod(sub(f_q, mload(add(transcript, 0x24980))), mload(add(transcript, 0x166e0)), f_q))
mstore(add(transcript, 0x249c0), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x166e0)), f_q))
mstore(add(transcript, 0x249e0), addmod(mload(add(transcript, 0x24940)), mload(add(transcript, 0x249a0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5aa0)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5ac0)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24a00), result)        }
mstore(add(transcript, 0x24a20), mulmod(mload(add(transcript, 0x24a00)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24a40), mulmod(sub(f_q, mload(add(transcript, 0x24a20))), mload(add(transcript, 0x16700)), f_q))
mstore(add(transcript, 0x24a60), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x16700)), f_q))
mstore(add(transcript, 0x24a80), addmod(mload(add(transcript, 0x249e0)), mload(add(transcript, 0x24a40)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5b40)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5b60)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24aa0), result)        }
mstore(add(transcript, 0x24ac0), mulmod(mload(add(transcript, 0x24aa0)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24ae0), mulmod(sub(f_q, mload(add(transcript, 0x24ac0))), mload(add(transcript, 0x16720)), f_q))
mstore(add(transcript, 0x24b00), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x16720)), f_q))
mstore(add(transcript, 0x24b20), addmod(mload(add(transcript, 0x24a80)), mload(add(transcript, 0x24ae0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5be0)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5c00)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24b40), result)        }
mstore(add(transcript, 0x24b60), mulmod(mload(add(transcript, 0x24b40)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24b80), mulmod(sub(f_q, mload(add(transcript, 0x24b60))), mload(add(transcript, 0x16740)), f_q))
mstore(add(transcript, 0x24ba0), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x16740)), f_q))
mstore(add(transcript, 0x24bc0), addmod(mload(add(transcript, 0x24b20)), mload(add(transcript, 0x24b80)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5c80)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5ca0)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24be0), result)        }
mstore(add(transcript, 0x24c00), mulmod(mload(add(transcript, 0x24be0)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24c20), mulmod(sub(f_q, mload(add(transcript, 0x24c00))), mload(add(transcript, 0x16760)), f_q))
mstore(add(transcript, 0x24c40), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x16760)), f_q))
mstore(add(transcript, 0x24c60), addmod(mload(add(transcript, 0x24bc0)), mload(add(transcript, 0x24c20)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5d20)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5d40)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24c80), result)        }
mstore(add(transcript, 0x24ca0), mulmod(mload(add(transcript, 0x24c80)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24cc0), mulmod(sub(f_q, mload(add(transcript, 0x24ca0))), mload(add(transcript, 0x16780)), f_q))
mstore(add(transcript, 0x24ce0), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x16780)), f_q))
mstore(add(transcript, 0x24d00), addmod(mload(add(transcript, 0x24c60)), mload(add(transcript, 0x24cc0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5dc0)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5de0)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24d20), result)        }
mstore(add(transcript, 0x24d40), mulmod(mload(add(transcript, 0x24d20)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24d60), mulmod(sub(f_q, mload(add(transcript, 0x24d40))), mload(add(transcript, 0x167a0)), f_q))
mstore(add(transcript, 0x24d80), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x167a0)), f_q))
mstore(add(transcript, 0x24da0), addmod(mload(add(transcript, 0x24d00)), mload(add(transcript, 0x24d60)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5e60)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5e80)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24dc0), result)        }
mstore(add(transcript, 0x24de0), mulmod(mload(add(transcript, 0x24dc0)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24e00), mulmod(sub(f_q, mload(add(transcript, 0x24de0))), mload(add(transcript, 0x167c0)), f_q))
mstore(add(transcript, 0x24e20), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x167c0)), f_q))
mstore(add(transcript, 0x24e40), addmod(mload(add(transcript, 0x24da0)), mload(add(transcript, 0x24e00)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5f00)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5f20)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24e60), result)        }
mstore(add(transcript, 0x24e80), mulmod(mload(add(transcript, 0x24e60)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24ea0), mulmod(sub(f_q, mload(add(transcript, 0x24e80))), mload(add(transcript, 0x167e0)), f_q))
mstore(add(transcript, 0x24ec0), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x167e0)), f_q))
mstore(add(transcript, 0x24ee0), addmod(mload(add(transcript, 0x24e40)), mload(add(transcript, 0x24ea0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5fa0)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5fc0)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24f00), result)        }
mstore(add(transcript, 0x24f20), mulmod(mload(add(transcript, 0x24f00)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24f40), mulmod(sub(f_q, mload(add(transcript, 0x24f20))), mload(add(transcript, 0x16800)), f_q))
mstore(add(transcript, 0x24f60), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x16800)), f_q))
mstore(add(transcript, 0x24f80), addmod(mload(add(transcript, 0x24ee0)), mload(add(transcript, 0x24f40)), f_q))
{            let result := mulmod(mload(add(transcript, 0x6040)), mload(add(transcript, 0x15d40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x6060)), mload(add(transcript, 0x15d60)), f_q), result, f_q)mstore(add(transcript, 0x24fa0), result)        }
mstore(add(transcript, 0x24fc0), mulmod(mload(add(transcript, 0x24fa0)), mload(add(transcript, 0x164e0)), f_q))
mstore(add(transcript, 0x24fe0), mulmod(sub(f_q, mload(add(transcript, 0x24fc0))), mload(add(transcript, 0x16820)), f_q))
mstore(add(transcript, 0x25000), mulmod(mload(add(transcript, 0x24000)), mload(add(transcript, 0x16820)), f_q))
mstore(add(transcript, 0x25020), addmod(mload(add(transcript, 0x24f80)), mload(add(transcript, 0x24fe0)), f_q))
mstore(add(transcript, 0x25040), mulmod(mload(add(transcript, 0x25020)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25060), mulmod(mload(add(transcript, 0x24080)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25080), mulmod(mload(add(transcript, 0x24100)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x250a0), mulmod(mload(add(transcript, 0x241a0)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x250c0), mulmod(mload(add(transcript, 0x24240)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x250e0), mulmod(mload(add(transcript, 0x242e0)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25100), mulmod(mload(add(transcript, 0x24380)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25120), mulmod(mload(add(transcript, 0x24420)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25140), mulmod(mload(add(transcript, 0x244c0)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25160), mulmod(mload(add(transcript, 0x24560)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25180), mulmod(mload(add(transcript, 0x24600)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x251a0), mulmod(mload(add(transcript, 0x246a0)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x251c0), mulmod(mload(add(transcript, 0x24740)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x251e0), mulmod(mload(add(transcript, 0x247e0)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25200), mulmod(mload(add(transcript, 0x24880)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25220), mulmod(mload(add(transcript, 0x24920)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25240), mulmod(mload(add(transcript, 0x249c0)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25260), mulmod(mload(add(transcript, 0x24a60)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25280), mulmod(mload(add(transcript, 0x24b00)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x252a0), mulmod(mload(add(transcript, 0x24ba0)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x252c0), mulmod(mload(add(transcript, 0x24c40)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x252e0), mulmod(mload(add(transcript, 0x24ce0)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25300), mulmod(mload(add(transcript, 0x24d80)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25320), mulmod(mload(add(transcript, 0x24e20)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25340), mulmod(mload(add(transcript, 0x24ec0)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25360), mulmod(mload(add(transcript, 0x24f60)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x25380), mulmod(mload(add(transcript, 0x25000)), mload(add(transcript, 0x17e80)), f_q))
mstore(add(transcript, 0x253a0), addmod(mload(add(transcript, 0x23fe0)), mload(add(transcript, 0x25040)), f_q))
mstore(add(transcript, 0x253c0), mulmod(1, mload(add(transcript, 0x162a0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x3660)), mload(add(transcript, 0x15da0)), f_q)result := addmod(mulmod(mload(add(transcript, 0x3880)), mload(add(transcript, 0x15dc0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x38a0)), mload(add(transcript, 0x15de0)), f_q), result, f_q)mstore(add(transcript, 0x253e0), result)        }
mstore(add(transcript, 0x25400), mulmod(mload(add(transcript, 0x253e0)), mload(add(transcript, 0x16500)), f_q))
mstore(add(transcript, 0x25420), mulmod(sub(f_q, mload(add(transcript, 0x25400))), 1, f_q))
mstore(add(transcript, 0x25440), mulmod(mload(add(transcript, 0x253c0)), 1, f_q))
mstore(add(transcript, 0x25460), mulmod(mload(add(transcript, 0x25420)), mload(add(transcript, 0x17ea0)), f_q))
mstore(add(transcript, 0x25480), mulmod(mload(add(transcript, 0x25440)), mload(add(transcript, 0x17ea0)), f_q))
mstore(add(transcript, 0x254a0), addmod(mload(add(transcript, 0x253a0)), mload(add(transcript, 0x25460)), f_q))
mstore(add(transcript, 0x254c0), mulmod(1, mload(add(transcript, 0x162e0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x4b60)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x4b80)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4ba0)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x254e0), result)        }
mstore(add(transcript, 0x25500), mulmod(mload(add(transcript, 0x254e0)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x25520), mulmod(sub(f_q, mload(add(transcript, 0x25500))), 1, f_q))
mstore(add(transcript, 0x25540), mulmod(mload(add(transcript, 0x254c0)), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0x4bc0)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x4be0)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4c00)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x25560), result)        }
mstore(add(transcript, 0x25580), mulmod(mload(add(transcript, 0x25560)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x255a0), mulmod(sub(f_q, mload(add(transcript, 0x25580))), mload(add(transcript, 0x60c0)), f_q))
mstore(add(transcript, 0x255c0), mulmod(mload(add(transcript, 0x254c0)), mload(add(transcript, 0x60c0)), f_q))
mstore(add(transcript, 0x255e0), addmod(mload(add(transcript, 0x25520)), mload(add(transcript, 0x255a0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x4c20)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x4c40)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4c60)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x25600), result)        }
mstore(add(transcript, 0x25620), mulmod(mload(add(transcript, 0x25600)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x25640), mulmod(sub(f_q, mload(add(transcript, 0x25620))), mload(add(transcript, 0x16540)), f_q))
mstore(add(transcript, 0x25660), mulmod(mload(add(transcript, 0x254c0)), mload(add(transcript, 0x16540)), f_q))
mstore(add(transcript, 0x25680), addmod(mload(add(transcript, 0x255e0)), mload(add(transcript, 0x25640)), f_q))
{            let result := mulmod(mload(add(transcript, 0x4c80)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x4ca0)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4cc0)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x256a0), result)        }
mstore(add(transcript, 0x256c0), mulmod(mload(add(transcript, 0x256a0)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x256e0), mulmod(sub(f_q, mload(add(transcript, 0x256c0))), mload(add(transcript, 0x16560)), f_q))
mstore(add(transcript, 0x25700), mulmod(mload(add(transcript, 0x254c0)), mload(add(transcript, 0x16560)), f_q))
mstore(add(transcript, 0x25720), addmod(mload(add(transcript, 0x25680)), mload(add(transcript, 0x256e0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x4ce0)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x4d00)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4d20)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x25740), result)        }
mstore(add(transcript, 0x25760), mulmod(mload(add(transcript, 0x25740)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x25780), mulmod(sub(f_q, mload(add(transcript, 0x25760))), mload(add(transcript, 0x16580)), f_q))
mstore(add(transcript, 0x257a0), mulmod(mload(add(transcript, 0x254c0)), mload(add(transcript, 0x16580)), f_q))
mstore(add(transcript, 0x257c0), addmod(mload(add(transcript, 0x25720)), mload(add(transcript, 0x25780)), f_q))
{            let result := mulmod(mload(add(transcript, 0x4d40)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4d80)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x257e0), result)        }
mstore(add(transcript, 0x25800), mulmod(mload(add(transcript, 0x257e0)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x25820), mulmod(sub(f_q, mload(add(transcript, 0x25800))), mload(add(transcript, 0x165a0)), f_q))
mstore(add(transcript, 0x25840), mulmod(mload(add(transcript, 0x254c0)), mload(add(transcript, 0x165a0)), f_q))
mstore(add(transcript, 0x25860), addmod(mload(add(transcript, 0x257c0)), mload(add(transcript, 0x25820)), f_q))
{            let result := mulmod(mload(add(transcript, 0x4da0)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x4dc0)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4de0)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x25880), result)        }
mstore(add(transcript, 0x258a0), mulmod(mload(add(transcript, 0x25880)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x258c0), mulmod(sub(f_q, mload(add(transcript, 0x258a0))), mload(add(transcript, 0x165c0)), f_q))
mstore(add(transcript, 0x258e0), mulmod(mload(add(transcript, 0x254c0)), mload(add(transcript, 0x165c0)), f_q))
mstore(add(transcript, 0x25900), addmod(mload(add(transcript, 0x25860)), mload(add(transcript, 0x258c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x4e00)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x4e20)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4e40)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x25920), result)        }
mstore(add(transcript, 0x25940), mulmod(mload(add(transcript, 0x25920)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x25960), mulmod(sub(f_q, mload(add(transcript, 0x25940))), mload(add(transcript, 0x165e0)), f_q))
mstore(add(transcript, 0x25980), mulmod(mload(add(transcript, 0x254c0)), mload(add(transcript, 0x165e0)), f_q))
mstore(add(transcript, 0x259a0), addmod(mload(add(transcript, 0x25900)), mload(add(transcript, 0x25960)), f_q))
{            let result := mulmod(mload(add(transcript, 0x4e60)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x4e80)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4ea0)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x259c0), result)        }
mstore(add(transcript, 0x259e0), mulmod(mload(add(transcript, 0x259c0)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x25a00), mulmod(sub(f_q, mload(add(transcript, 0x259e0))), mload(add(transcript, 0x16600)), f_q))
mstore(add(transcript, 0x25a20), mulmod(mload(add(transcript, 0x254c0)), mload(add(transcript, 0x16600)), f_q))
mstore(add(transcript, 0x25a40), addmod(mload(add(transcript, 0x259a0)), mload(add(transcript, 0x25a00)), f_q))
{            let result := mulmod(mload(add(transcript, 0x4ec0)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x4ee0)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4f00)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x25a60), result)        }
mstore(add(transcript, 0x25a80), mulmod(mload(add(transcript, 0x25a60)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x25aa0), mulmod(sub(f_q, mload(add(transcript, 0x25a80))), mload(add(transcript, 0x16620)), f_q))
mstore(add(transcript, 0x25ac0), mulmod(mload(add(transcript, 0x254c0)), mload(add(transcript, 0x16620)), f_q))
mstore(add(transcript, 0x25ae0), addmod(mload(add(transcript, 0x25a40)), mload(add(transcript, 0x25aa0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x4f20)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x4f40)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4f60)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x25b00), result)        }
mstore(add(transcript, 0x25b20), mulmod(mload(add(transcript, 0x25b00)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x25b40), mulmod(sub(f_q, mload(add(transcript, 0x25b20))), mload(add(transcript, 0x16640)), f_q))
mstore(add(transcript, 0x25b60), mulmod(mload(add(transcript, 0x254c0)), mload(add(transcript, 0x16640)), f_q))
mstore(add(transcript, 0x25b80), addmod(mload(add(transcript, 0x25ae0)), mload(add(transcript, 0x25b40)), f_q))
{            let result := mulmod(mload(add(transcript, 0x4f80)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x4fa0)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4fc0)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x25ba0), result)        }
mstore(add(transcript, 0x25bc0), mulmod(mload(add(transcript, 0x25ba0)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x25be0), mulmod(sub(f_q, mload(add(transcript, 0x25bc0))), mload(add(transcript, 0x16660)), f_q))
mstore(add(transcript, 0x25c00), mulmod(mload(add(transcript, 0x254c0)), mload(add(transcript, 0x16660)), f_q))
mstore(add(transcript, 0x25c20), addmod(mload(add(transcript, 0x25b80)), mload(add(transcript, 0x25be0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x4fe0)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5000)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x5020)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x25c40), result)        }
mstore(add(transcript, 0x25c60), mulmod(mload(add(transcript, 0x25c40)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x25c80), mulmod(sub(f_q, mload(add(transcript, 0x25c60))), mload(add(transcript, 0x16680)), f_q))
mstore(add(transcript, 0x25ca0), mulmod(mload(add(transcript, 0x254c0)), mload(add(transcript, 0x16680)), f_q))
mstore(add(transcript, 0x25cc0), addmod(mload(add(transcript, 0x25c20)), mload(add(transcript, 0x25c80)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5040)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5060)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x5080)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x25ce0), result)        }
mstore(add(transcript, 0x25d00), mulmod(mload(add(transcript, 0x25ce0)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x25d20), mulmod(sub(f_q, mload(add(transcript, 0x25d00))), mload(add(transcript, 0x166a0)), f_q))
mstore(add(transcript, 0x25d40), mulmod(mload(add(transcript, 0x254c0)), mload(add(transcript, 0x166a0)), f_q))
mstore(add(transcript, 0x25d60), addmod(mload(add(transcript, 0x25cc0)), mload(add(transcript, 0x25d20)), f_q))
{            let result := mulmod(mload(add(transcript, 0x50a0)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x50c0)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x50e0)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x25d80), result)        }
mstore(add(transcript, 0x25da0), mulmod(mload(add(transcript, 0x25d80)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x25dc0), mulmod(sub(f_q, mload(add(transcript, 0x25da0))), mload(add(transcript, 0x166c0)), f_q))
mstore(add(transcript, 0x25de0), mulmod(mload(add(transcript, 0x254c0)), mload(add(transcript, 0x166c0)), f_q))
mstore(add(transcript, 0x25e00), addmod(mload(add(transcript, 0x25d60)), mload(add(transcript, 0x25dc0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x5100)), mload(add(transcript, 0x15e00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x5120)), mload(add(transcript, 0x15e20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x5140)), mload(add(transcript, 0x15e40)), f_q), result, f_q)mstore(add(transcript, 0x25e20), result)        }
mstore(add(transcript, 0x25e40), mulmod(mload(add(transcript, 0x25e20)), mload(add(transcript, 0x16520)), f_q))
mstore(add(transcript, 0x25e60), mulmod(sub(f_q, mload(add(transcript, 0x25e40))), mload(add(transcript, 0x166e0)), f_q))
mstore(add(transcript, 0x25e80), mulmod(mload(add(transcript, 0x254c0)), mload(add(transcript, 0x166e0)), f_q))
mstore(add(transcript, 0x25ea0), addmod(mload(add(transcript, 0x25e00)), mload(add(transcript, 0x25e60)), f_q))
mstore(add(transcript, 0x25ec0), mulmod(mload(add(transcript, 0x25ea0)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x25ee0), mulmod(mload(add(transcript, 0x25540)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x25f00), mulmod(mload(add(transcript, 0x255c0)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x25f20), mulmod(mload(add(transcript, 0x25660)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x25f40), mulmod(mload(add(transcript, 0x25700)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x25f60), mulmod(mload(add(transcript, 0x257a0)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x25f80), mulmod(mload(add(transcript, 0x25840)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x25fa0), mulmod(mload(add(transcript, 0x258e0)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x25fc0), mulmod(mload(add(transcript, 0x25980)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x25fe0), mulmod(mload(add(transcript, 0x25a20)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x26000), mulmod(mload(add(transcript, 0x25ac0)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x26020), mulmod(mload(add(transcript, 0x25b60)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x26040), mulmod(mload(add(transcript, 0x25c00)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x26060), mulmod(mload(add(transcript, 0x25ca0)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x26080), mulmod(mload(add(transcript, 0x25d40)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x260a0), mulmod(mload(add(transcript, 0x25de0)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x260c0), mulmod(mload(add(transcript, 0x25e80)), mload(add(transcript, 0x17ec0)), f_q))
mstore(add(transcript, 0x260e0), addmod(mload(add(transcript, 0x254a0)), mload(add(transcript, 0x25ec0)), f_q))
mstore(add(transcript, 0x26100), mulmod(1, mload(add(transcript, 0x15cc0)), f_q))
mstore(add(transcript, 0x26120), mulmod(1, mload(add(transcript, 0x61c0)), f_q))
mstore(add(transcript, 0x26140), 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(add(transcript, 0x26160), 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(add(transcript, 0x26180), mload(add(transcript, 0x260e0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x26140), 0x60, add(transcript, 0x26140), 0x40), 1), success)
mstore(add(transcript, 0x261a0), mload(add(transcript, 0x26140)))
                    mstore(add(transcript, 0x261c0), mload(add(transcript, 0x26160)))
mstore(add(transcript, 0x261e0), mload(add(transcript, 0x80)))
                    mstore(add(transcript, 0x26200), mload(add(transcript, 0xa0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x261a0), 0x80, add(transcript, 0x261a0), 0x40), 1), success)
mstore(add(transcript, 0x26220), mload(add(transcript, 0xc0)))
                    mstore(add(transcript, 0x26240), mload(add(transcript, 0xe0)))
mstore(add(transcript, 0x26260), mload(add(transcript, 0x18a20)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x26220), 0x60, add(transcript, 0x26220), 0x40), 1), success)
mstore(add(transcript, 0x26280), mload(add(transcript, 0x261a0)))
                    mstore(add(transcript, 0x262a0), mload(add(transcript, 0x261c0)))
mstore(add(transcript, 0x262c0), mload(add(transcript, 0x26220)))
                    mstore(add(transcript, 0x262e0), mload(add(transcript, 0x26240)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x26280), 0x80, add(transcript, 0x26280), 0x40), 1), success)
mstore(add(transcript, 0x26300), mload(add(transcript, 0x100)))
                    mstore(add(transcript, 0x26320), mload(add(transcript, 0x120)))
mstore(add(transcript, 0x26340), mload(add(transcript, 0x18a40)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x26300), 0x60, add(transcript, 0x26300), 0x40), 1), success)
mstore(add(transcript, 0x26360), mload(add(transcript, 0x26280)))
                    mstore(add(transcript, 0x26380), mload(add(transcript, 0x262a0)))
mstore(add(transcript, 0x263a0), mload(add(transcript, 0x26300)))
                    mstore(add(transcript, 0x263c0), mload(add(transcript, 0x26320)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x26360), 0x80, add(transcript, 0x26360), 0x40), 1), success)
mstore(add(transcript, 0x263e0), mload(add(transcript, 0x140)))
                    mstore(add(transcript, 0x26400), mload(add(transcript, 0x160)))
mstore(add(transcript, 0x26420), mload(add(transcript, 0x18a60)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x263e0), 0x60, add(transcript, 0x263e0), 0x40), 1), success)
mstore(add(transcript, 0x26440), mload(add(transcript, 0x26360)))
                    mstore(add(transcript, 0x26460), mload(add(transcript, 0x26380)))
mstore(add(transcript, 0x26480), mload(add(transcript, 0x263e0)))
                    mstore(add(transcript, 0x264a0), mload(add(transcript, 0x26400)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x26440), 0x80, add(transcript, 0x26440), 0x40), 1), success)
mstore(add(transcript, 0x264c0), mload(add(transcript, 0x180)))
                    mstore(add(transcript, 0x264e0), mload(add(transcript, 0x1a0)))
mstore(add(transcript, 0x26500), mload(add(transcript, 0x18a80)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x264c0), 0x60, add(transcript, 0x264c0), 0x40), 1), success)
mstore(add(transcript, 0x26520), mload(add(transcript, 0x26440)))
                    mstore(add(transcript, 0x26540), mload(add(transcript, 0x26460)))
mstore(add(transcript, 0x26560), mload(add(transcript, 0x264c0)))
                    mstore(add(transcript, 0x26580), mload(add(transcript, 0x264e0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x26520), 0x80, add(transcript, 0x26520), 0x40), 1), success)
mstore(add(transcript, 0x265a0), mload(add(transcript, 0x1c0)))
                    mstore(add(transcript, 0x265c0), mload(add(transcript, 0x1e0)))
mstore(add(transcript, 0x265e0), mload(add(transcript, 0x18aa0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x265a0), 0x60, add(transcript, 0x265a0), 0x40), 1), success)
mstore(add(transcript, 0x26600), mload(add(transcript, 0x26520)))
                    mstore(add(transcript, 0x26620), mload(add(transcript, 0x26540)))
mstore(add(transcript, 0x26640), mload(add(transcript, 0x265a0)))
                    mstore(add(transcript, 0x26660), mload(add(transcript, 0x265c0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x26600), 0x80, add(transcript, 0x26600), 0x40), 1), success)
mstore(add(transcript, 0x26680), mload(add(transcript, 0x200)))
                    mstore(add(transcript, 0x266a0), mload(add(transcript, 0x220)))
mstore(add(transcript, 0x266c0), mload(add(transcript, 0x18ac0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x26680), 0x60, add(transcript, 0x26680), 0x40), 1), success)
mstore(add(transcript, 0x266e0), mload(add(transcript, 0x26600)))
                    mstore(add(transcript, 0x26700), mload(add(transcript, 0x26620)))
mstore(add(transcript, 0x26720), mload(add(transcript, 0x26680)))
                    mstore(add(transcript, 0x26740), mload(add(transcript, 0x266a0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x266e0), 0x80, add(transcript, 0x266e0), 0x40), 1), success)
mstore(add(transcript, 0x26760), mload(add(transcript, 0x240)))
                    mstore(add(transcript, 0x26780), mload(add(transcript, 0x260)))
mstore(add(transcript, 0x267a0), mload(add(transcript, 0x18ae0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x26760), 0x60, add(transcript, 0x26760), 0x40), 1), success)
mstore(add(transcript, 0x267c0), mload(add(transcript, 0x266e0)))
                    mstore(add(transcript, 0x267e0), mload(add(transcript, 0x26700)))
mstore(add(transcript, 0x26800), mload(add(transcript, 0x26760)))
                    mstore(add(transcript, 0x26820), mload(add(transcript, 0x26780)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x267c0), 0x80, add(transcript, 0x267c0), 0x40), 1), success)
mstore(add(transcript, 0x26840), mload(add(transcript, 0x280)))
                    mstore(add(transcript, 0x26860), mload(add(transcript, 0x2a0)))
mstore(add(transcript, 0x26880), mload(add(transcript, 0x18b00)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x26840), 0x60, add(transcript, 0x26840), 0x40), 1), success)
mstore(add(transcript, 0x268a0), mload(add(transcript, 0x267c0)))
                    mstore(add(transcript, 0x268c0), mload(add(transcript, 0x267e0)))
mstore(add(transcript, 0x268e0), mload(add(transcript, 0x26840)))
                    mstore(add(transcript, 0x26900), mload(add(transcript, 0x26860)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x268a0), 0x80, add(transcript, 0x268a0), 0x40), 1), success)
mstore(add(transcript, 0x26920), mload(add(transcript, 0x2c0)))
                    mstore(add(transcript, 0x26940), mload(add(transcript, 0x2e0)))
mstore(add(transcript, 0x26960), mload(add(transcript, 0x18b20)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x26920), 0x60, add(transcript, 0x26920), 0x40), 1), success)
mstore(add(transcript, 0x26980), mload(add(transcript, 0x268a0)))
                    mstore(add(transcript, 0x269a0), mload(add(transcript, 0x268c0)))
mstore(add(transcript, 0x269c0), mload(add(transcript, 0x26920)))
                    mstore(add(transcript, 0x269e0), mload(add(transcript, 0x26940)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x26980), 0x80, add(transcript, 0x26980), 0x40), 1), success)
mstore(add(transcript, 0x26a00), mload(add(transcript, 0x300)))
                    mstore(add(transcript, 0x26a20), mload(add(transcript, 0x320)))
mstore(add(transcript, 0x26a40), mload(add(transcript, 0x18b40)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x26a00), 0x60, add(transcript, 0x26a00), 0x40), 1), success)
mstore(add(transcript, 0x26a60), mload(add(transcript, 0x26980)))
                    mstore(add(transcript, 0x26a80), mload(add(transcript, 0x269a0)))
mstore(add(transcript, 0x26aa0), mload(add(transcript, 0x26a00)))
                    mstore(add(transcript, 0x26ac0), mload(add(transcript, 0x26a20)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x26a60), 0x80, add(transcript, 0x26a60), 0x40), 1), success)
mstore(add(transcript, 0x26ae0), mload(add(transcript, 0x340)))
                    mstore(add(transcript, 0x26b00), mload(add(transcript, 0x360)))
mstore(add(transcript, 0x26b20), mload(add(transcript, 0x18b60)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x26ae0), 0x60, add(transcript, 0x26ae0), 0x40), 1), success)
mstore(add(transcript, 0x26b40), mload(add(transcript, 0x26a60)))
                    mstore(add(transcript, 0x26b60), mload(add(transcript, 0x26a80)))
mstore(add(transcript, 0x26b80), mload(add(transcript, 0x26ae0)))
                    mstore(add(transcript, 0x26ba0), mload(add(transcript, 0x26b00)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x26b40), 0x80, add(transcript, 0x26b40), 0x40), 1), success)
mstore(add(transcript, 0x26bc0), mload(add(transcript, 0x380)))
                    mstore(add(transcript, 0x26be0), mload(add(transcript, 0x3a0)))
mstore(add(transcript, 0x26c00), mload(add(transcript, 0x18b80)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x26bc0), 0x60, add(transcript, 0x26bc0), 0x40), 1), success)
mstore(add(transcript, 0x26c20), mload(add(transcript, 0x26b40)))
                    mstore(add(transcript, 0x26c40), mload(add(transcript, 0x26b60)))
mstore(add(transcript, 0x26c60), mload(add(transcript, 0x26bc0)))
                    mstore(add(transcript, 0x26c80), mload(add(transcript, 0x26be0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x26c20), 0x80, add(transcript, 0x26c20), 0x40), 1), success)
mstore(add(transcript, 0x26ca0), mload(add(transcript, 0x3c0)))
                    mstore(add(transcript, 0x26cc0), mload(add(transcript, 0x3e0)))
mstore(add(transcript, 0x26ce0), mload(add(transcript, 0x18ba0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x26ca0), 0x60, add(transcript, 0x26ca0), 0x40), 1), success)
mstore(add(transcript, 0x26d00), mload(add(transcript, 0x26c20)))
                    mstore(add(transcript, 0x26d20), mload(add(transcript, 0x26c40)))
mstore(add(transcript, 0x26d40), mload(add(transcript, 0x26ca0)))
                    mstore(add(transcript, 0x26d60), mload(add(transcript, 0x26cc0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x26d00), 0x80, add(transcript, 0x26d00), 0x40), 1), success)
mstore(add(transcript, 0x26d80), mload(add(transcript, 0x400)))
                    mstore(add(transcript, 0x26da0), mload(add(transcript, 0x420)))
mstore(add(transcript, 0x26dc0), mload(add(transcript, 0x18bc0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x26d80), 0x60, add(transcript, 0x26d80), 0x40), 1), success)
mstore(add(transcript, 0x26de0), mload(add(transcript, 0x26d00)))
                    mstore(add(transcript, 0x26e00), mload(add(transcript, 0x26d20)))
mstore(add(transcript, 0x26e20), mload(add(transcript, 0x26d80)))
                    mstore(add(transcript, 0x26e40), mload(add(transcript, 0x26da0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x26de0), 0x80, add(transcript, 0x26de0), 0x40), 1), success)
mstore(add(transcript, 0x26e60), mload(add(transcript, 0x440)))
                    mstore(add(transcript, 0x26e80), mload(add(transcript, 0x460)))
mstore(add(transcript, 0x26ea0), mload(add(transcript, 0x18be0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x26e60), 0x60, add(transcript, 0x26e60), 0x40), 1), success)
mstore(add(transcript, 0x26ec0), mload(add(transcript, 0x26de0)))
                    mstore(add(transcript, 0x26ee0), mload(add(transcript, 0x26e00)))
mstore(add(transcript, 0x26f00), mload(add(transcript, 0x26e60)))
                    mstore(add(transcript, 0x26f20), mload(add(transcript, 0x26e80)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x26ec0), 0x80, add(transcript, 0x26ec0), 0x40), 1), success)
mstore(add(transcript, 0x26f40), mload(add(transcript, 0x480)))
                    mstore(add(transcript, 0x26f60), mload(add(transcript, 0x4a0)))
mstore(add(transcript, 0x26f80), mload(add(transcript, 0x18c00)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x26f40), 0x60, add(transcript, 0x26f40), 0x40), 1), success)
mstore(add(transcript, 0x26fa0), mload(add(transcript, 0x26ec0)))
                    mstore(add(transcript, 0x26fc0), mload(add(transcript, 0x26ee0)))
mstore(add(transcript, 0x26fe0), mload(add(transcript, 0x26f40)))
                    mstore(add(transcript, 0x27000), mload(add(transcript, 0x26f60)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x26fa0), 0x80, add(transcript, 0x26fa0), 0x40), 1), success)
mstore(add(transcript, 0x27020), mload(add(transcript, 0xe80)))
                    mstore(add(transcript, 0x27040), mload(add(transcript, 0xea0)))
mstore(add(transcript, 0x27060), mload(add(transcript, 0x18c20)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x27020), 0x60, add(transcript, 0x27020), 0x40), 1), success)
mstore(add(transcript, 0x27080), mload(add(transcript, 0x26fa0)))
                    mstore(add(transcript, 0x270a0), mload(add(transcript, 0x26fc0)))
mstore(add(transcript, 0x270c0), mload(add(transcript, 0x27020)))
                    mstore(add(transcript, 0x270e0), mload(add(transcript, 0x27040)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x27080), 0x80, add(transcript, 0x27080), 0x40), 1), success)
mstore(add(transcript, 0x27100), mload(add(transcript, 0x4c0)))
                    mstore(add(transcript, 0x27120), mload(add(transcript, 0x4e0)))
mstore(add(transcript, 0x27140), mload(add(transcript, 0x20c00)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x27100), 0x60, add(transcript, 0x27100), 0x40), 1), success)
mstore(add(transcript, 0x27160), mload(add(transcript, 0x27080)))

        }}
        // bytes memory transcriptBytes = abi.encode(transcript);
        // bytes32[] memory newTranscript = new bytes32[](6992);
        // for(uint i=0; i<_transcript.length; i++) {
        //     newTranscript[i] = transcript[i];
        // }
        // require(newTranscript.length == 6992, "newTranscript length is not 6992");
        return (success, transcript);
    } 
}
