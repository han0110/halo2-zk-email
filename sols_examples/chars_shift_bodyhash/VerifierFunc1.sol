// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;
import "../VerifierFuncAbst.sol";

contract VerifierFunc1 is VerifierFuncAbst {
    function verifyPartial(
        uint256[] memory pubInputs,
        bytes memory proof,
        bool success,
        bytes32[] memory _transcript
    ) public view override returns (bool, bytes32[] memory) {
        bytes32[1054] memory transcript;
        for(uint i=0; i<_transcript.length; i++) {
            transcript[i] = _transcript[i];
        }
        assembly {{
            
            let f_p
            := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let
                f_q
            := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid {
                {
                    let x_lt_p := lt(
                        x,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let y_lt_p := lt(
                        y,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let x_is_zero := eq(x, 0)
                    let y_is_zero := eq(y, 0)
                    let x_or_y_is_zero := or(x_is_zero, y_is_zero)
                    let x_and_y_is_not_zero := not(x_or_y_is_zero)
                    valid := and(x_and_y_is_not_zero, valid)
                }
                {
                    let y_square := mulmod(
                        y,
                        y,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let x_square := mulmod(
                        x,
                        x,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let x_cube := mulmod(
                        x_square,
                        x,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let x_cube_plus_3 := addmod(
                        x_cube,
                        3,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let y_square_eq_x_cube_plus_3 := eq(x_cube_plus_3, y_square)
                    valid := and(y_square_eq_x_cube_plus_3, valid)
                }
            }
    mstore(add(transcript, 0x4620), mulmod(sub(f_q, mload(add(transcript, 0x4600))), mload(add(transcript, 0x4100)), f_q))
mstore(add(transcript, 0x4640), mulmod(1, mload(add(transcript, 0x4100)), f_q))
mstore(add(transcript, 0x4660), addmod(mload(add(transcript, 0x45c0)), mload(add(transcript, 0x4620)), f_q))
{            let result := mulmod(mload(add(transcript, 0xa20)), mload(add(transcript, 0x3a00)), f_q)result := addmod(mulmod(mload(add(transcript, 0xa40)), mload(add(transcript, 0x3a20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xa60)), mload(add(transcript, 0x3a40)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xa80)), mload(add(transcript, 0x3a60)), f_q), result, f_q)mstore(add(transcript, 0x4680), result)        }
mstore(add(transcript, 0x46a0), mulmod(mload(add(transcript, 0x4680)), mload(add(transcript, 0x3e40)), f_q))
mstore(add(transcript, 0x46c0), mulmod(sub(f_q, mload(add(transcript, 0x46a0))), mload(add(transcript, 0x4120)), f_q))
mstore(add(transcript, 0x46e0), mulmod(1, mload(add(transcript, 0x4120)), f_q))
mstore(add(transcript, 0x4700), addmod(mload(add(transcript, 0x4660)), mload(add(transcript, 0x46c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xaa0)), mload(add(transcript, 0x3a00)), f_q)result := addmod(mulmod(mload(add(transcript, 0xac0)), mload(add(transcript, 0x3a20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xae0)), mload(add(transcript, 0x3a40)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xb00)), mload(add(transcript, 0x3a60)), f_q), result, f_q)mstore(add(transcript, 0x4720), result)        }
mstore(add(transcript, 0x4740), mulmod(mload(add(transcript, 0x4720)), mload(add(transcript, 0x3e40)), f_q))
mstore(add(transcript, 0x4760), mulmod(sub(f_q, mload(add(transcript, 0x4740))), mload(add(transcript, 0x4140)), f_q))
mstore(add(transcript, 0x4780), mulmod(1, mload(add(transcript, 0x4140)), f_q))
mstore(add(transcript, 0x47a0), addmod(mload(add(transcript, 0x4700)), mload(add(transcript, 0x4760)), f_q))
{            let result := mulmod(mload(add(transcript, 0xb20)), mload(add(transcript, 0x3a00)), f_q)result := addmod(mulmod(mload(add(transcript, 0xb40)), mload(add(transcript, 0x3a20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xb60)), mload(add(transcript, 0x3a40)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xb80)), mload(add(transcript, 0x3a60)), f_q), result, f_q)mstore(add(transcript, 0x47c0), result)        }
mstore(add(transcript, 0x47e0), mulmod(mload(add(transcript, 0x47c0)), mload(add(transcript, 0x3e40)), f_q))
mstore(add(transcript, 0x4800), mulmod(sub(f_q, mload(add(transcript, 0x47e0))), mload(add(transcript, 0x4160)), f_q))
mstore(add(transcript, 0x4820), mulmod(1, mload(add(transcript, 0x4160)), f_q))
mstore(add(transcript, 0x4840), addmod(mload(add(transcript, 0x47a0)), mload(add(transcript, 0x4800)), f_q))
mstore(add(transcript, 0x4860), mulmod(mload(add(transcript, 0x4840)), 1, f_q))
mstore(add(transcript, 0x4880), mulmod(mload(add(transcript, 0x4460)), 1, f_q))
mstore(add(transcript, 0x48a0), mulmod(mload(add(transcript, 0x4500)), 1, f_q))
mstore(add(transcript, 0x48c0), mulmod(mload(add(transcript, 0x45a0)), 1, f_q))
mstore(add(transcript, 0x48e0), mulmod(mload(add(transcript, 0x4640)), 1, f_q))
mstore(add(transcript, 0x4900), mulmod(mload(add(transcript, 0x46e0)), 1, f_q))
mstore(add(transcript, 0x4920), mulmod(mload(add(transcript, 0x4780)), 1, f_q))
mstore(add(transcript, 0x4940), mulmod(mload(add(transcript, 0x4820)), 1, f_q))
mstore(add(transcript, 0x4960), mulmod(1, mload(add(transcript, 0x3e60)), f_q))
{            let result := mulmod(mload(add(transcript, 0xe20)), mload(add(transcript, 0x3b00)), f_q)result := addmod(mulmod(mload(add(transcript, 0xe40)), mload(add(transcript, 0x3b20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xe60)), mload(add(transcript, 0x3b40)), f_q), result, f_q)mstore(add(transcript, 0x4980), result)        }
mstore(add(transcript, 0x49a0), mulmod(mload(add(transcript, 0x4980)), mload(add(transcript, 0x4060)), f_q))
mstore(add(transcript, 0x49c0), mulmod(sub(f_q, mload(add(transcript, 0x49a0))), 1, f_q))
mstore(add(transcript, 0x49e0), mulmod(mload(add(transcript, 0x4960)), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0xe80)), mload(add(transcript, 0x3b00)), f_q)result := addmod(mulmod(mload(add(transcript, 0xea0)), mload(add(transcript, 0x3b20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xec0)), mload(add(transcript, 0x3b40)), f_q), result, f_q)mstore(add(transcript, 0x4a00), result)        }
mstore(add(transcript, 0x4a20), mulmod(mload(add(transcript, 0x4a00)), mload(add(transcript, 0x4060)), f_q))
mstore(add(transcript, 0x4a40), mulmod(sub(f_q, mload(add(transcript, 0x4a20))), mload(add(transcript, 0x11e0)), f_q))
mstore(add(transcript, 0x4a60), mulmod(mload(add(transcript, 0x4960)), mload(add(transcript, 0x11e0)), f_q))
mstore(add(transcript, 0x4a80), addmod(mload(add(transcript, 0x49c0)), mload(add(transcript, 0x4a40)), f_q))
{            let result := mulmod(mload(add(transcript, 0xee0)), mload(add(transcript, 0x3b00)), f_q)result := addmod(mulmod(mload(add(transcript, 0xf00)), mload(add(transcript, 0x3b20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xf20)), mload(add(transcript, 0x3b40)), f_q), result, f_q)mstore(add(transcript, 0x4aa0), result)        }
mstore(add(transcript, 0x4ac0), mulmod(mload(add(transcript, 0x4aa0)), mload(add(transcript, 0x4060)), f_q))
mstore(add(transcript, 0x4ae0), mulmod(sub(f_q, mload(add(transcript, 0x4ac0))), mload(add(transcript, 0x40c0)), f_q))
mstore(add(transcript, 0x4b00), mulmod(mload(add(transcript, 0x4960)), mload(add(transcript, 0x40c0)), f_q))
mstore(add(transcript, 0x4b20), addmod(mload(add(transcript, 0x4a80)), mload(add(transcript, 0x4ae0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xf40)), mload(add(transcript, 0x3b00)), f_q)result := addmod(mulmod(mload(add(transcript, 0xf60)), mload(add(transcript, 0x3b20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xf80)), mload(add(transcript, 0x3b40)), f_q), result, f_q)mstore(add(transcript, 0x4b40), result)        }
mstore(add(transcript, 0x4b60), mulmod(mload(add(transcript, 0x4b40)), mload(add(transcript, 0x4060)), f_q))
mstore(add(transcript, 0x4b80), mulmod(sub(f_q, mload(add(transcript, 0x4b60))), mload(add(transcript, 0x40e0)), f_q))
mstore(add(transcript, 0x4ba0), mulmod(mload(add(transcript, 0x4960)), mload(add(transcript, 0x40e0)), f_q))
mstore(add(transcript, 0x4bc0), addmod(mload(add(transcript, 0x4b20)), mload(add(transcript, 0x4b80)), f_q))
{            let result := mulmod(mload(add(transcript, 0xfa0)), mload(add(transcript, 0x3b00)), f_q)result := addmod(mulmod(mload(add(transcript, 0xfc0)), mload(add(transcript, 0x3b20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xfe0)), mload(add(transcript, 0x3b40)), f_q), result, f_q)mstore(add(transcript, 0x4be0), result)        }
mstore(add(transcript, 0x4c00), mulmod(mload(add(transcript, 0x4be0)), mload(add(transcript, 0x4060)), f_q))
mstore(add(transcript, 0x4c20), mulmod(sub(f_q, mload(add(transcript, 0x4c00))), mload(add(transcript, 0x4100)), f_q))
mstore(add(transcript, 0x4c40), mulmod(mload(add(transcript, 0x4960)), mload(add(transcript, 0x4100)), f_q))
mstore(add(transcript, 0x4c60), addmod(mload(add(transcript, 0x4bc0)), mload(add(transcript, 0x4c20)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1000)), mload(add(transcript, 0x3b00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x1020)), mload(add(transcript, 0x3b20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x1040)), mload(add(transcript, 0x3b40)), f_q), result, f_q)mstore(add(transcript, 0x4c80), result)        }
mstore(add(transcript, 0x4ca0), mulmod(mload(add(transcript, 0x4c80)), mload(add(transcript, 0x4060)), f_q))
mstore(add(transcript, 0x4cc0), mulmod(sub(f_q, mload(add(transcript, 0x4ca0))), mload(add(transcript, 0x4120)), f_q))
mstore(add(transcript, 0x4ce0), mulmod(mload(add(transcript, 0x4960)), mload(add(transcript, 0x4120)), f_q))
mstore(add(transcript, 0x4d00), addmod(mload(add(transcript, 0x4c60)), mload(add(transcript, 0x4cc0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1060)), mload(add(transcript, 0x3b00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x1080)), mload(add(transcript, 0x3b20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x10a0)), mload(add(transcript, 0x3b40)), f_q), result, f_q)mstore(add(transcript, 0x4d20), result)        }
mstore(add(transcript, 0x4d40), mulmod(mload(add(transcript, 0x4d20)), mload(add(transcript, 0x4060)), f_q))
mstore(add(transcript, 0x4d60), mulmod(sub(f_q, mload(add(transcript, 0x4d40))), mload(add(transcript, 0x4140)), f_q))
mstore(add(transcript, 0x4d80), mulmod(mload(add(transcript, 0x4960)), mload(add(transcript, 0x4140)), f_q))
mstore(add(transcript, 0x4da0), addmod(mload(add(transcript, 0x4d00)), mload(add(transcript, 0x4d60)), f_q))
{            let result := mulmod(mload(add(transcript, 0x10c0)), mload(add(transcript, 0x3b00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x10e0)), mload(add(transcript, 0x3b20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x1100)), mload(add(transcript, 0x3b40)), f_q), result, f_q)mstore(add(transcript, 0x4dc0), result)        }
mstore(add(transcript, 0x4de0), mulmod(mload(add(transcript, 0x4dc0)), mload(add(transcript, 0x4060)), f_q))
mstore(add(transcript, 0x4e00), mulmod(sub(f_q, mload(add(transcript, 0x4de0))), mload(add(transcript, 0x4160)), f_q))
mstore(add(transcript, 0x4e20), mulmod(mload(add(transcript, 0x4960)), mload(add(transcript, 0x4160)), f_q))
mstore(add(transcript, 0x4e40), addmod(mload(add(transcript, 0x4da0)), mload(add(transcript, 0x4e00)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1120)), mload(add(transcript, 0x3b00)), f_q)result := addmod(mulmod(mload(add(transcript, 0x1140)), mload(add(transcript, 0x3b20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x1160)), mload(add(transcript, 0x3b40)), f_q), result, f_q)mstore(add(transcript, 0x4e60), result)        }
mstore(add(transcript, 0x4e80), mulmod(mload(add(transcript, 0x4e60)), mload(add(transcript, 0x4060)), f_q))
mstore(add(transcript, 0x4ea0), mulmod(sub(f_q, mload(add(transcript, 0x4e80))), mload(add(transcript, 0x4180)), f_q))
mstore(add(transcript, 0x4ec0), mulmod(mload(add(transcript, 0x4960)), mload(add(transcript, 0x4180)), f_q))
mstore(add(transcript, 0x4ee0), addmod(mload(add(transcript, 0x4e40)), mload(add(transcript, 0x4ea0)), f_q))
mstore(add(transcript, 0x4f00), mulmod(mload(add(transcript, 0x4ee0)), mload(add(transcript, 0x1240)), f_q))
mstore(add(transcript, 0x4f20), mulmod(mload(add(transcript, 0x49e0)), mload(add(transcript, 0x1240)), f_q))
mstore(add(transcript, 0x4f40), mulmod(mload(add(transcript, 0x4a60)), mload(add(transcript, 0x1240)), f_q))
mstore(add(transcript, 0x4f60), mulmod(mload(add(transcript, 0x4b00)), mload(add(transcript, 0x1240)), f_q))
mstore(add(transcript, 0x4f80), mulmod(mload(add(transcript, 0x4ba0)), mload(add(transcript, 0x1240)), f_q))
mstore(add(transcript, 0x4fa0), mulmod(mload(add(transcript, 0x4c40)), mload(add(transcript, 0x1240)), f_q))
mstore(add(transcript, 0x4fc0), mulmod(mload(add(transcript, 0x4ce0)), mload(add(transcript, 0x1240)), f_q))
mstore(add(transcript, 0x4fe0), mulmod(mload(add(transcript, 0x4d80)), mload(add(transcript, 0x1240)), f_q))
mstore(add(transcript, 0x5000), mulmod(mload(add(transcript, 0x4e20)), mload(add(transcript, 0x1240)), f_q))
mstore(add(transcript, 0x5020), mulmod(mload(add(transcript, 0x4ec0)), mload(add(transcript, 0x1240)), f_q))
mstore(add(transcript, 0x5040), addmod(mload(add(transcript, 0x4860)), mload(add(transcript, 0x4f00)), f_q))
mstore(add(transcript, 0x5060), mulmod(1, mload(add(transcript, 0x3ea0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1180)), mload(add(transcript, 0x3b80)), f_q)result := addmod(mulmod(mload(add(transcript, 0x11a0)), mload(add(transcript, 0x3ba0)), f_q), result, f_q)mstore(add(transcript, 0x5080), result)        }
mstore(add(transcript, 0x50a0), mulmod(mload(add(transcript, 0x5080)), mload(add(transcript, 0x4080)), f_q))
mstore(add(transcript, 0x50c0), mulmod(sub(f_q, mload(add(transcript, 0x50a0))), 1, f_q))
mstore(add(transcript, 0x50e0), mulmod(mload(add(transcript, 0x5060)), 1, f_q))
mstore(add(transcript, 0x5100), mulmod(mload(add(transcript, 0x50c0)), mload(add(transcript, 0x4340)), f_q))
mstore(add(transcript, 0x5120), mulmod(mload(add(transcript, 0x50e0)), mload(add(transcript, 0x4340)), f_q))
mstore(add(transcript, 0x5140), addmod(mload(add(transcript, 0x5040)), mload(add(transcript, 0x5100)), f_q))
mstore(add(transcript, 0x5160), mulmod(1, mload(add(transcript, 0x3ee0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xba0)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x5180), result)        }
mstore(add(transcript, 0x51a0), mulmod(mload(add(transcript, 0x5180)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x51c0), mulmod(sub(f_q, mload(add(transcript, 0x51a0))), 1, f_q))
mstore(add(transcript, 0x51e0), mulmod(mload(add(transcript, 0x5160)), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0xbc0)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x5200), result)        }
mstore(add(transcript, 0x5220), mulmod(mload(add(transcript, 0x5200)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x5240), mulmod(sub(f_q, mload(add(transcript, 0x5220))), mload(add(transcript, 0x11e0)), f_q))
mstore(add(transcript, 0x5260), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x11e0)), f_q))
mstore(add(transcript, 0x5280), addmod(mload(add(transcript, 0x51c0)), mload(add(transcript, 0x5240)), f_q))
{            let result := mulmod(mload(add(transcript, 0xbe0)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x52a0), result)        }
mstore(add(transcript, 0x52c0), mulmod(mload(add(transcript, 0x52a0)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x52e0), mulmod(sub(f_q, mload(add(transcript, 0x52c0))), mload(add(transcript, 0x40c0)), f_q))
mstore(add(transcript, 0x5300), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x40c0)), f_q))
mstore(add(transcript, 0x5320), addmod(mload(add(transcript, 0x5280)), mload(add(transcript, 0x52e0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xc00)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x5340), result)        }
mstore(add(transcript, 0x5360), mulmod(mload(add(transcript, 0x5340)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x5380), mulmod(sub(f_q, mload(add(transcript, 0x5360))), mload(add(transcript, 0x40e0)), f_q))
mstore(add(transcript, 0x53a0), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x40e0)), f_q))
mstore(add(transcript, 0x53c0), addmod(mload(add(transcript, 0x5320)), mload(add(transcript, 0x5380)), f_q))
{            let result := mulmod(mload(add(transcript, 0xc20)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x53e0), result)        }
mstore(add(transcript, 0x5400), mulmod(mload(add(transcript, 0x53e0)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x5420), mulmod(sub(f_q, mload(add(transcript, 0x5400))), mload(add(transcript, 0x4100)), f_q))
mstore(add(transcript, 0x5440), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x4100)), f_q))
mstore(add(transcript, 0x5460), addmod(mload(add(transcript, 0x53c0)), mload(add(transcript, 0x5420)), f_q))
mstore(add(transcript, 0x5480), addmod(mload(add(transcript, 0x53a0)), mload(add(transcript, 0x5440)), f_q))
{            let result := mulmod(mload(add(transcript, 0xc40)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x54a0), result)        }
mstore(add(transcript, 0x54c0), mulmod(mload(add(transcript, 0x54a0)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x54e0), mulmod(sub(f_q, mload(add(transcript, 0x54c0))), mload(add(transcript, 0x4120)), f_q))
mstore(add(transcript, 0x5500), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x4120)), f_q))
mstore(add(transcript, 0x5520), addmod(mload(add(transcript, 0x5460)), mload(add(transcript, 0x54e0)), f_q))
mstore(add(transcript, 0x5540), addmod(mload(add(transcript, 0x5480)), mload(add(transcript, 0x5500)), f_q))
{            let result := mulmod(mload(add(transcript, 0xc60)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x5560), result)        }
mstore(add(transcript, 0x5580), mulmod(mload(add(transcript, 0x5560)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x55a0), mulmod(sub(f_q, mload(add(transcript, 0x5580))), mload(add(transcript, 0x4140)), f_q))
mstore(add(transcript, 0x55c0), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x4140)), f_q))
mstore(add(transcript, 0x55e0), addmod(mload(add(transcript, 0x5520)), mload(add(transcript, 0x55a0)), f_q))
mstore(add(transcript, 0x5600), addmod(mload(add(transcript, 0x5540)), mload(add(transcript, 0x55c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xc80)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x5620), result)        }
mstore(add(transcript, 0x5640), mulmod(mload(add(transcript, 0x5620)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x5660), mulmod(sub(f_q, mload(add(transcript, 0x5640))), mload(add(transcript, 0x4160)), f_q))
mstore(add(transcript, 0x5680), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x4160)), f_q))
mstore(add(transcript, 0x56a0), addmod(mload(add(transcript, 0x55e0)), mload(add(transcript, 0x5660)), f_q))
mstore(add(transcript, 0x56c0), addmod(mload(add(transcript, 0x5600)), mload(add(transcript, 0x5680)), f_q))
{            let result := mulmod(mload(add(transcript, 0xca0)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x56e0), result)        }
mstore(add(transcript, 0x5700), mulmod(mload(add(transcript, 0x56e0)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x5720), mulmod(sub(f_q, mload(add(transcript, 0x5700))), mload(add(transcript, 0x4180)), f_q))
mstore(add(transcript, 0x5740), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x4180)), f_q))
mstore(add(transcript, 0x5760), addmod(mload(add(transcript, 0x56a0)), mload(add(transcript, 0x5720)), f_q))
mstore(add(transcript, 0x5780), addmod(mload(add(transcript, 0x56c0)), mload(add(transcript, 0x5740)), f_q))
{            let result := mulmod(mload(add(transcript, 0xce0)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x57a0), result)        }
mstore(add(transcript, 0x57c0), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x57e0), mulmod(sub(f_q, mload(add(transcript, 0x57c0))), mload(add(transcript, 0x41a0)), f_q))
mstore(add(transcript, 0x5800), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x41a0)), f_q))
mstore(add(transcript, 0x5820), addmod(mload(add(transcript, 0x5760)), mload(add(transcript, 0x57e0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xd00)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x5840), result)        }
mstore(add(transcript, 0x5860), mulmod(mload(add(transcript, 0x5840)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x5880), mulmod(sub(f_q, mload(add(transcript, 0x5860))), mload(add(transcript, 0x41c0)), f_q))
mstore(add(transcript, 0x58a0), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x41c0)), f_q))
mstore(add(transcript, 0x58c0), addmod(mload(add(transcript, 0x5820)), mload(add(transcript, 0x5880)), f_q))
{            let result := mulmod(mload(add(transcript, 0xd20)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x58e0), result)        }
mstore(add(transcript, 0x5900), mulmod(mload(add(transcript, 0x58e0)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x5920), mulmod(sub(f_q, mload(add(transcript, 0x5900))), mload(add(transcript, 0x41e0)), f_q))
mstore(add(transcript, 0x5940), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x41e0)), f_q))
mstore(add(transcript, 0x5960), addmod(mload(add(transcript, 0x58c0)), mload(add(transcript, 0x5920)), f_q))
{            let result := mulmod(mload(add(transcript, 0xd40)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x5980), result)        }
mstore(add(transcript, 0x59a0), mulmod(mload(add(transcript, 0x5980)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x59c0), mulmod(sub(f_q, mload(add(transcript, 0x59a0))), mload(add(transcript, 0x4200)), f_q))
mstore(add(transcript, 0x59e0), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x4200)), f_q))
mstore(add(transcript, 0x5a00), addmod(mload(add(transcript, 0x5960)), mload(add(transcript, 0x59c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xd60)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x5a20), result)        }
mstore(add(transcript, 0x5a40), mulmod(mload(add(transcript, 0x5a20)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x5a60), mulmod(sub(f_q, mload(add(transcript, 0x5a40))), mload(add(transcript, 0x4220)), f_q))
mstore(add(transcript, 0x5a80), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x4220)), f_q))
mstore(add(transcript, 0x5aa0), addmod(mload(add(transcript, 0x5a00)), mload(add(transcript, 0x5a60)), f_q))
{            let result := mulmod(mload(add(transcript, 0xd80)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x5ac0), result)        }
mstore(add(transcript, 0x5ae0), mulmod(mload(add(transcript, 0x5ac0)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x5b00), mulmod(sub(f_q, mload(add(transcript, 0x5ae0))), mload(add(transcript, 0x4240)), f_q))
mstore(add(transcript, 0x5b20), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x4240)), f_q))
mstore(add(transcript, 0x5b40), addmod(mload(add(transcript, 0x5aa0)), mload(add(transcript, 0x5b00)), f_q))
{            let result := mulmod(mload(add(transcript, 0xda0)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x5b60), result)        }
mstore(add(transcript, 0x5b80), mulmod(mload(add(transcript, 0x5b60)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x5ba0), mulmod(sub(f_q, mload(add(transcript, 0x5b80))), mload(add(transcript, 0x4260)), f_q))
mstore(add(transcript, 0x5bc0), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x4260)), f_q))
mstore(add(transcript, 0x5be0), addmod(mload(add(transcript, 0x5b40)), mload(add(transcript, 0x5ba0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xdc0)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x5c00), result)        }
mstore(add(transcript, 0x5c20), mulmod(mload(add(transcript, 0x5c00)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x5c40), mulmod(sub(f_q, mload(add(transcript, 0x5c20))), mload(add(transcript, 0x4280)), f_q))
mstore(add(transcript, 0x5c60), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x4280)), f_q))
mstore(add(transcript, 0x5c80), addmod(mload(add(transcript, 0x5be0)), mload(add(transcript, 0x5c40)), f_q))
{            let result := mulmod(mload(add(transcript, 0xde0)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x5ca0), result)        }
mstore(add(transcript, 0x5cc0), mulmod(mload(add(transcript, 0x5ca0)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x5ce0), mulmod(sub(f_q, mload(add(transcript, 0x5cc0))), mload(add(transcript, 0x42a0)), f_q))
mstore(add(transcript, 0x5d00), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x42a0)), f_q))
mstore(add(transcript, 0x5d20), addmod(mload(add(transcript, 0x5c80)), mload(add(transcript, 0x5ce0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xe00)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x5d40), result)        }
mstore(add(transcript, 0x5d60), mulmod(mload(add(transcript, 0x5d40)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x5d80), mulmod(sub(f_q, mload(add(transcript, 0x5d60))), mload(add(transcript, 0x42c0)), f_q))
mstore(add(transcript, 0x5da0), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x42c0)), f_q))
mstore(add(transcript, 0x5dc0), addmod(mload(add(transcript, 0x5d20)), mload(add(transcript, 0x5d80)), f_q))
mstore(add(transcript, 0x5de0), mulmod(mload(add(transcript, 0x3860)), mload(add(transcript, 0x3ee0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x3880)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x5e00), result)        }
mstore(add(transcript, 0x5e20), mulmod(mload(add(transcript, 0x5e00)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x5e40), mulmod(sub(f_q, mload(add(transcript, 0x5e20))), mload(add(transcript, 0x42e0)), f_q))
mstore(add(transcript, 0x5e60), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x42e0)), f_q))
mstore(add(transcript, 0x5e80), mulmod(mload(add(transcript, 0x5de0)), mload(add(transcript, 0x42e0)), f_q))
mstore(add(transcript, 0x5ea0), addmod(mload(add(transcript, 0x5dc0)), mload(add(transcript, 0x5e40)), f_q))
{            let result := mulmod(mload(add(transcript, 0xcc0)), mload(add(transcript, 0x3bc0)), f_q)mstore(add(transcript, 0x5ec0), result)        }
mstore(add(transcript, 0x5ee0), mulmod(mload(add(transcript, 0x5ec0)), mload(add(transcript, 0x40a0)), f_q))
mstore(add(transcript, 0x5f00), mulmod(sub(f_q, mload(add(transcript, 0x5ee0))), mload(add(transcript, 0x4300)), f_q))
mstore(add(transcript, 0x5f20), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x4300)), f_q))
mstore(add(transcript, 0x5f40), addmod(mload(add(transcript, 0x5ea0)), mload(add(transcript, 0x5f00)), f_q))
mstore(add(transcript, 0x5f60), mulmod(mload(add(transcript, 0x5f40)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x5f80), mulmod(mload(add(transcript, 0x51e0)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x5fa0), mulmod(mload(add(transcript, 0x5260)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x5fc0), mulmod(mload(add(transcript, 0x5300)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x5fe0), mulmod(mload(add(transcript, 0x5780)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x6000), mulmod(mload(add(transcript, 0x5800)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x6020), mulmod(mload(add(transcript, 0x58a0)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x6040), mulmod(mload(add(transcript, 0x5940)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x6060), mulmod(mload(add(transcript, 0x59e0)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x6080), mulmod(mload(add(transcript, 0x5a80)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x60a0), mulmod(mload(add(transcript, 0x5b20)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x60c0), mulmod(mload(add(transcript, 0x5bc0)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x60e0), mulmod(mload(add(transcript, 0x5c60)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x6100), mulmod(mload(add(transcript, 0x5d00)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x6120), mulmod(mload(add(transcript, 0x5da0)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x6140), mulmod(mload(add(transcript, 0x5e60)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x6160), mulmod(mload(add(transcript, 0x5e80)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x6180), mulmod(mload(add(transcript, 0x5f20)), mload(add(transcript, 0x4360)), f_q))
mstore(add(transcript, 0x61a0), addmod(mload(add(transcript, 0x5140)), mload(add(transcript, 0x5f60)), f_q))
mstore(add(transcript, 0x61c0), mulmod(1, mload(add(transcript, 0x3ae0)), f_q))
mstore(add(transcript, 0x61e0), mulmod(1, mload(add(transcript, 0x12e0)), f_q))
mstore(add(transcript, 0x6200), 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(add(transcript, 0x6220), 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(add(transcript, 0x6240), mload(add(transcript, 0x61a0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6200), 0x60, add(transcript, 0x6200), 0x40), 1), success)
mstore(add(transcript, 0x6260), mload(add(transcript, 0x6200)))
                    mstore(add(transcript, 0x6280), mload(add(transcript, 0x6220)))
mstore(add(transcript, 0x62a0), mload(add(transcript, 0x80)))
                    mstore(add(transcript, 0x62c0), mload(add(transcript, 0xa0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6260), 0x80, add(transcript, 0x6260), 0x40), 1), success)
mstore(add(transcript, 0x62e0), mload(add(transcript, 0xc0)))
                    mstore(add(transcript, 0x6300), mload(add(transcript, 0xe0)))
mstore(add(transcript, 0x6320), mload(add(transcript, 0x4880)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x62e0), 0x60, add(transcript, 0x62e0), 0x40), 1), success)
mstore(add(transcript, 0x6340), mload(add(transcript, 0x6260)))
                    mstore(add(transcript, 0x6360), mload(add(transcript, 0x6280)))
mstore(add(transcript, 0x6380), mload(add(transcript, 0x62e0)))
                    mstore(add(transcript, 0x63a0), mload(add(transcript, 0x6300)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6340), 0x80, add(transcript, 0x6340), 0x40), 1), success)
mstore(add(transcript, 0x63c0), mload(add(transcript, 0x100)))
                    mstore(add(transcript, 0x63e0), mload(add(transcript, 0x120)))
mstore(add(transcript, 0x6400), mload(add(transcript, 0x48a0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x63c0), 0x60, add(transcript, 0x63c0), 0x40), 1), success)
mstore(add(transcript, 0x6420), mload(add(transcript, 0x6340)))
                    mstore(add(transcript, 0x6440), mload(add(transcript, 0x6360)))
mstore(add(transcript, 0x6460), mload(add(transcript, 0x63c0)))
                    mstore(add(transcript, 0x6480), mload(add(transcript, 0x63e0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6420), 0x80, add(transcript, 0x6420), 0x40), 1), success)
mstore(add(transcript, 0x64a0), mload(add(transcript, 0x140)))
                    mstore(add(transcript, 0x64c0), mload(add(transcript, 0x160)))
mstore(add(transcript, 0x64e0), mload(add(transcript, 0x48c0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x64a0), 0x60, add(transcript, 0x64a0), 0x40), 1), success)
mstore(add(transcript, 0x6500), mload(add(transcript, 0x6420)))
                    mstore(add(transcript, 0x6520), mload(add(transcript, 0x6440)))
mstore(add(transcript, 0x6540), mload(add(transcript, 0x64a0)))
                    mstore(add(transcript, 0x6560), mload(add(transcript, 0x64c0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6500), 0x80, add(transcript, 0x6500), 0x40), 1), success)
mstore(add(transcript, 0x6580), mload(add(transcript, 0x180)))
                    mstore(add(transcript, 0x65a0), mload(add(transcript, 0x1a0)))
mstore(add(transcript, 0x65c0), mload(add(transcript, 0x48e0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6580), 0x60, add(transcript, 0x6580), 0x40), 1), success)
mstore(add(transcript, 0x65e0), mload(add(transcript, 0x6500)))
                    mstore(add(transcript, 0x6600), mload(add(transcript, 0x6520)))
mstore(add(transcript, 0x6620), mload(add(transcript, 0x6580)))
                    mstore(add(transcript, 0x6640), mload(add(transcript, 0x65a0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x65e0), 0x80, add(transcript, 0x65e0), 0x40), 1), success)
mstore(add(transcript, 0x6660), mload(add(transcript, 0x1c0)))
                    mstore(add(transcript, 0x6680), mload(add(transcript, 0x1e0)))
mstore(add(transcript, 0x66a0), mload(add(transcript, 0x4900)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6660), 0x60, add(transcript, 0x6660), 0x40), 1), success)
mstore(add(transcript, 0x66c0), mload(add(transcript, 0x65e0)))
                    mstore(add(transcript, 0x66e0), mload(add(transcript, 0x6600)))
mstore(add(transcript, 0x6700), mload(add(transcript, 0x6660)))
                    mstore(add(transcript, 0x6720), mload(add(transcript, 0x6680)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x66c0), 0x80, add(transcript, 0x66c0), 0x40), 1), success)
mstore(add(transcript, 0x6740), mload(add(transcript, 0x200)))
                    mstore(add(transcript, 0x6760), mload(add(transcript, 0x220)))
mstore(add(transcript, 0x6780), mload(add(transcript, 0x4920)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6740), 0x60, add(transcript, 0x6740), 0x40), 1), success)
mstore(add(transcript, 0x67a0), mload(add(transcript, 0x66c0)))
                    mstore(add(transcript, 0x67c0), mload(add(transcript, 0x66e0)))
mstore(add(transcript, 0x67e0), mload(add(transcript, 0x6740)))
                    mstore(add(transcript, 0x6800), mload(add(transcript, 0x6760)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x67a0), 0x80, add(transcript, 0x67a0), 0x40), 1), success)
mstore(add(transcript, 0x6820), mload(add(transcript, 0x240)))
                    mstore(add(transcript, 0x6840), mload(add(transcript, 0x260)))
mstore(add(transcript, 0x6860), mload(add(transcript, 0x4940)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6820), 0x60, add(transcript, 0x6820), 0x40), 1), success)
mstore(add(transcript, 0x6880), mload(add(transcript, 0x67a0)))
                    mstore(add(transcript, 0x68a0), mload(add(transcript, 0x67c0)))
mstore(add(transcript, 0x68c0), mload(add(transcript, 0x6820)))
                    mstore(add(transcript, 0x68e0), mload(add(transcript, 0x6840)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6880), 0x80, add(transcript, 0x6880), 0x40), 1), success)
mstore(add(transcript, 0x6900), mload(add(transcript, 0x3a0)))
                    mstore(add(transcript, 0x6920), mload(add(transcript, 0x3c0)))
mstore(add(transcript, 0x6940), mload(add(transcript, 0x4f20)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6900), 0x60, add(transcript, 0x6900), 0x40), 1), success)
mstore(add(transcript, 0x6960), mload(add(transcript, 0x6880)))
                    mstore(add(transcript, 0x6980), mload(add(transcript, 0x68a0)))
mstore(add(transcript, 0x69a0), mload(add(transcript, 0x6900)))
                    mstore(add(transcript, 0x69c0), mload(add(transcript, 0x6920)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6960), 0x80, add(transcript, 0x6960), 0x40), 1), success)
mstore(add(transcript, 0x69e0), mload(add(transcript, 0x3e0)))
                    mstore(add(transcript, 0x6a00), mload(add(transcript, 0x400)))
mstore(add(transcript, 0x6a20), mload(add(transcript, 0x4f40)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x69e0), 0x60, add(transcript, 0x69e0), 0x40), 1), success)
mstore(add(transcript, 0x6a40), mload(add(transcript, 0x6960)))
                    mstore(add(transcript, 0x6a60), mload(add(transcript, 0x6980)))
mstore(add(transcript, 0x6a80), mload(add(transcript, 0x69e0)))
                    mstore(add(transcript, 0x6aa0), mload(add(transcript, 0x6a00)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6a40), 0x80, add(transcript, 0x6a40), 0x40), 1), success)
mstore(add(transcript, 0x6ac0), mload(add(transcript, 0x420)))
                    mstore(add(transcript, 0x6ae0), mload(add(transcript, 0x440)))
mstore(add(transcript, 0x6b00), mload(add(transcript, 0x4f60)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6ac0), 0x60, add(transcript, 0x6ac0), 0x40), 1), success)
mstore(add(transcript, 0x6b20), mload(add(transcript, 0x6a40)))
                    mstore(add(transcript, 0x6b40), mload(add(transcript, 0x6a60)))
mstore(add(transcript, 0x6b60), mload(add(transcript, 0x6ac0)))
                    mstore(add(transcript, 0x6b80), mload(add(transcript, 0x6ae0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6b20), 0x80, add(transcript, 0x6b20), 0x40), 1), success)
mstore(add(transcript, 0x6ba0), mload(add(transcript, 0x460)))
                    mstore(add(transcript, 0x6bc0), mload(add(transcript, 0x480)))
mstore(add(transcript, 0x6be0), mload(add(transcript, 0x4f80)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6ba0), 0x60, add(transcript, 0x6ba0), 0x40), 1), success)
mstore(add(transcript, 0x6c00), mload(add(transcript, 0x6b20)))
                    mstore(add(transcript, 0x6c20), mload(add(transcript, 0x6b40)))
mstore(add(transcript, 0x6c40), mload(add(transcript, 0x6ba0)))
                    mstore(add(transcript, 0x6c60), mload(add(transcript, 0x6bc0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6c00), 0x80, add(transcript, 0x6c00), 0x40), 1), success)
mstore(add(transcript, 0x6c80), mload(add(transcript, 0x4a0)))
                    mstore(add(transcript, 0x6ca0), mload(add(transcript, 0x4c0)))
mstore(add(transcript, 0x6cc0), mload(add(transcript, 0x4fa0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6c80), 0x60, add(transcript, 0x6c80), 0x40), 1), success)
mstore(add(transcript, 0x6ce0), mload(add(transcript, 0x6c00)))
                    mstore(add(transcript, 0x6d00), mload(add(transcript, 0x6c20)))
mstore(add(transcript, 0x6d20), mload(add(transcript, 0x6c80)))
                    mstore(add(transcript, 0x6d40), mload(add(transcript, 0x6ca0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6ce0), 0x80, add(transcript, 0x6ce0), 0x40), 1), success)
mstore(add(transcript, 0x6d60), mload(add(transcript, 0x4e0)))
                    mstore(add(transcript, 0x6d80), mload(add(transcript, 0x500)))
mstore(add(transcript, 0x6da0), mload(add(transcript, 0x4fc0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6d60), 0x60, add(transcript, 0x6d60), 0x40), 1), success)
mstore(add(transcript, 0x6dc0), mload(add(transcript, 0x6ce0)))
                    mstore(add(transcript, 0x6de0), mload(add(transcript, 0x6d00)))
mstore(add(transcript, 0x6e00), mload(add(transcript, 0x6d60)))
                    mstore(add(transcript, 0x6e20), mload(add(transcript, 0x6d80)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6dc0), 0x80, add(transcript, 0x6dc0), 0x40), 1), success)
mstore(add(transcript, 0x6e40), mload(add(transcript, 0x520)))
                    mstore(add(transcript, 0x6e60), mload(add(transcript, 0x540)))
mstore(add(transcript, 0x6e80), mload(add(transcript, 0x4fe0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6e40), 0x60, add(transcript, 0x6e40), 0x40), 1), success)
mstore(add(transcript, 0x6ea0), mload(add(transcript, 0x6dc0)))
                    mstore(add(transcript, 0x6ec0), mload(add(transcript, 0x6de0)))
mstore(add(transcript, 0x6ee0), mload(add(transcript, 0x6e40)))
                    mstore(add(transcript, 0x6f00), mload(add(transcript, 0x6e60)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6ea0), 0x80, add(transcript, 0x6ea0), 0x40), 1), success)
mstore(add(transcript, 0x6f20), mload(add(transcript, 0x560)))
                    mstore(add(transcript, 0x6f40), mload(add(transcript, 0x580)))
mstore(add(transcript, 0x6f60), mload(add(transcript, 0x5000)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6f20), 0x60, add(transcript, 0x6f20), 0x40), 1), success)
mstore(add(transcript, 0x6f80), mload(add(transcript, 0x6ea0)))
                    mstore(add(transcript, 0x6fa0), mload(add(transcript, 0x6ec0)))
mstore(add(transcript, 0x6fc0), mload(add(transcript, 0x6f20)))
                    mstore(add(transcript, 0x6fe0), mload(add(transcript, 0x6f40)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6f80), 0x80, add(transcript, 0x6f80), 0x40), 1), success)
mstore(add(transcript, 0x7000), mload(add(transcript, 0x5a0)))
                    mstore(add(transcript, 0x7020), mload(add(transcript, 0x5c0)))
mstore(add(transcript, 0x7040), mload(add(transcript, 0x5020)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7000), 0x60, add(transcript, 0x7000), 0x40), 1), success)
mstore(add(transcript, 0x7060), mload(add(transcript, 0x6f80)))
                    mstore(add(transcript, 0x7080), mload(add(transcript, 0x6fa0)))
mstore(add(transcript, 0x70a0), mload(add(transcript, 0x7000)))
                    mstore(add(transcript, 0x70c0), mload(add(transcript, 0x7020)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7060), 0x80, add(transcript, 0x7060), 0x40), 1), success)
mstore(add(transcript, 0x70e0), mload(add(transcript, 0x5e0)))
                    mstore(add(transcript, 0x7100), mload(add(transcript, 0x600)))
mstore(add(transcript, 0x7120), mload(add(transcript, 0x5120)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x70e0), 0x60, add(transcript, 0x70e0), 0x40), 1), success)
mstore(add(transcript, 0x7140), mload(add(transcript, 0x7060)))
                    mstore(add(transcript, 0x7160), mload(add(transcript, 0x7080)))
mstore(add(transcript, 0x7180), mload(add(transcript, 0x70e0)))
                    mstore(add(transcript, 0x71a0), mload(add(transcript, 0x7100)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7140), 0x80, add(transcript, 0x7140), 0x40), 1), success)
mstore(add(transcript, 0x71c0), 0x2523f88babf0bc551b887662591d7ef241ba7898cc37dac7945f14b16a8e0d26)
                    mstore(add(transcript, 0x71e0), 0x07f36532e98003d56e6be9205944883f71692740e0e9832e902047a5239ff2a3)
mstore(add(transcript, 0x7200), mload(add(transcript, 0x5f80)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x71c0), 0x60, add(transcript, 0x71c0), 0x40), 1), success)
mstore(add(transcript, 0x7220), mload(add(transcript, 0x7140)))
                    mstore(add(transcript, 0x7240), mload(add(transcript, 0x7160)))
mstore(add(transcript, 0x7260), mload(add(transcript, 0x71c0)))
                    mstore(add(transcript, 0x7280), mload(add(transcript, 0x71e0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7220), 0x80, add(transcript, 0x7220), 0x40), 1), success)
mstore(add(transcript, 0x72a0), 0x09071f85b21713065e7faa8cdcfebc90699cf9f87e225028e9215a685d9a4739)
                    mstore(add(transcript, 0x72c0), 0x2712aeb003c770b1cdbb46cfc3adb79fc825f52d97f2913713dd945a535b940d)
mstore(add(transcript, 0x72e0), mload(add(transcript, 0x5fa0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x72a0), 0x60, add(transcript, 0x72a0), 0x40), 1), success)
mstore(add(transcript, 0x7300), mload(add(transcript, 0x7220)))
                    mstore(add(transcript, 0x7320), mload(add(transcript, 0x7240)))
mstore(add(transcript, 0x7340), mload(add(transcript, 0x72a0)))
                    mstore(add(transcript, 0x7360), mload(add(transcript, 0x72c0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7300), 0x80, add(transcript, 0x7300), 0x40), 1), success)
mstore(add(transcript, 0x7380), 0x001485c6bc55b2b4aa84611afb36ffe48f64812afcfb4ce04b69fc5a88c3d440)
                    mstore(add(transcript, 0x73a0), 0x095aee00ff731752ed73be5cc48ed1458db9e4e895722bff1e135a577e07d338)
mstore(add(transcript, 0x73c0), mload(add(transcript, 0x5fc0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7380), 0x60, add(transcript, 0x7380), 0x40), 1), success)
mstore(add(transcript, 0x73e0), mload(add(transcript, 0x7300)))
                    mstore(add(transcript, 0x7400), mload(add(transcript, 0x7320)))
mstore(add(transcript, 0x7420), mload(add(transcript, 0x7380)))
                    mstore(add(transcript, 0x7440), mload(add(transcript, 0x73a0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x73e0), 0x80, add(transcript, 0x73e0), 0x40), 1), success)
mstore(add(transcript, 0x7460), 0x0000000000000000000000000000000000000000000000000000000000000000)
                    mstore(add(transcript, 0x7480), 0x0000000000000000000000000000000000000000000000000000000000000000)
mstore(add(transcript, 0x74a0), mload(add(transcript, 0x5fe0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7460), 0x60, add(transcript, 0x7460), 0x40), 1), success)
mstore(add(transcript, 0x74c0), mload(add(transcript, 0x73e0)))
                    mstore(add(transcript, 0x74e0), mload(add(transcript, 0x7400)))
mstore(add(transcript, 0x7500), mload(add(transcript, 0x7460)))
                    mstore(add(transcript, 0x7520), mload(add(transcript, 0x7480)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x74c0), 0x80, add(transcript, 0x74c0), 0x40), 1), success)
mstore(add(transcript, 0x7540), 0x23bb951978e0139722d7a5bcfc29eafd078d400b2aeb1a86fb340bce5d799ad6)
                    mstore(add(transcript, 0x7560), 0x2174720fbcf99f4b7116d89c5c24e2202a46cebb2364245a7b447df9e5f133d2)
mstore(add(transcript, 0x7580), mload(add(transcript, 0x6000)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7540), 0x60, add(transcript, 0x7540), 0x40), 1), success)
mstore(add(transcript, 0x75a0), mload(add(transcript, 0x74c0)))
                    mstore(add(transcript, 0x75c0), mload(add(transcript, 0x74e0)))
mstore(add(transcript, 0x75e0), mload(add(transcript, 0x7540)))
                    mstore(add(transcript, 0x7600), mload(add(transcript, 0x7560)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x75a0), 0x80, add(transcript, 0x75a0), 0x40), 1), success)
mstore(add(transcript, 0x7620), 0x0731ea173931e3eb3b466607df2df656d1ea9fc6c1347ec429ff90135c6df9a3)
                    mstore(add(transcript, 0x7640), 0x165e9cd515df589a17cebd72a8a3360c7105e90a7f35510f8ce04ab29b28c157)
mstore(add(transcript, 0x7660), mload(add(transcript, 0x6020)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7620), 0x60, add(transcript, 0x7620), 0x40), 1), success)
mstore(add(transcript, 0x7680), mload(add(transcript, 0x75a0)))
                    mstore(add(transcript, 0x76a0), mload(add(transcript, 0x75c0)))
mstore(add(transcript, 0x76c0), mload(add(transcript, 0x7620)))
                    mstore(add(transcript, 0x76e0), mload(add(transcript, 0x7640)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7680), 0x80, add(transcript, 0x7680), 0x40), 1), success)
mstore(add(transcript, 0x7700), 0x0b29d70fcf004c0263edcd69ca66fc7f90732bd9bbf2075761d358c606a9c299)
                    mstore(add(transcript, 0x7720), 0x18ea14730415ae7c5fa5796b13d1e4421c0b13fc627dbea4aa9ca9f9fd6748be)
mstore(add(transcript, 0x7740), mload(add(transcript, 0x6040)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7700), 0x60, add(transcript, 0x7700), 0x40), 1), success)
mstore(add(transcript, 0x7760), mload(add(transcript, 0x7680)))
                    mstore(add(transcript, 0x7780), mload(add(transcript, 0x76a0)))
mstore(add(transcript, 0x77a0), mload(add(transcript, 0x7700)))
                    mstore(add(transcript, 0x77c0), mload(add(transcript, 0x7720)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7760), 0x80, add(transcript, 0x7760), 0x40), 1), success)
mstore(add(transcript, 0x77e0), 0x127284723027fd4cb5623bc561214be5ab62caacdb5e4ab10bac10b5f5d29e43)
                    mstore(add(transcript, 0x7800), 0x17901387b9477f48f34877f83f66d865b5a491c6fb13917120ed2501474551b9)
mstore(add(transcript, 0x7820), mload(add(transcript, 0x6060)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x77e0), 0x60, add(transcript, 0x77e0), 0x40), 1), success)
mstore(add(transcript, 0x7840), mload(add(transcript, 0x7760)))
                    mstore(add(transcript, 0x7860), mload(add(transcript, 0x7780)))
mstore(add(transcript, 0x7880), mload(add(transcript, 0x77e0)))
                    mstore(add(transcript, 0x78a0), mload(add(transcript, 0x7800)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7840), 0x80, add(transcript, 0x7840), 0x40), 1), success)
mstore(add(transcript, 0x78c0), 0x2ad78ba7dcef705e2fa8ff604e79549c513e14a4bd4a3915c92c8563e0b42c18)
                    mstore(add(transcript, 0x78e0), 0x1ec7e83d57a33dedae7941885c076985226ce3784147d2676eae8c8ef0b7c871)
mstore(add(transcript, 0x7900), mload(add(transcript, 0x6080)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x78c0), 0x60, add(transcript, 0x78c0), 0x40), 1), success)
mstore(add(transcript, 0x7920), mload(add(transcript, 0x7840)))
                    mstore(add(transcript, 0x7940), mload(add(transcript, 0x7860)))
mstore(add(transcript, 0x7960), mload(add(transcript, 0x78c0)))
                    mstore(add(transcript, 0x7980), mload(add(transcript, 0x78e0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7920), 0x80, add(transcript, 0x7920), 0x40), 1), success)
mstore(add(transcript, 0x79a0), 0x115375c4589b6922ad9de276f551894adfb7815609d21b0ee5771d74eab3c3d7)
                    mstore(add(transcript, 0x79c0), 0x27ebffe5633b945283153af352cec4d071ce33eebfb736f726046a74202aa72a)
mstore(add(transcript, 0x79e0), mload(add(transcript, 0x60a0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x79a0), 0x60, add(transcript, 0x79a0), 0x40), 1), success)
mstore(add(transcript, 0x7a00), mload(add(transcript, 0x7920)))
                    mstore(add(transcript, 0x7a20), mload(add(transcript, 0x7940)))
mstore(add(transcript, 0x7a40), mload(add(transcript, 0x79a0)))
                    mstore(add(transcript, 0x7a60), mload(add(transcript, 0x79c0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7a00), 0x80, add(transcript, 0x7a00), 0x40), 1), success)
mstore(add(transcript, 0x7a80), 0x101ce953d97b16794d7f4554d2840ab6119f63bcf5aab04db70802ec73d5d0b1)
                    mstore(add(transcript, 0x7aa0), 0x175cda852110c69273449da6099fcd97e800d130a1524ee4a88db65d213e1bd9)
mstore(add(transcript, 0x7ac0), mload(add(transcript, 0x60c0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7a80), 0x60, add(transcript, 0x7a80), 0x40), 1), success)
mstore(add(transcript, 0x7ae0), mload(add(transcript, 0x7a00)))
                    mstore(add(transcript, 0x7b00), mload(add(transcript, 0x7a20)))
mstore(add(transcript, 0x7b20), mload(add(transcript, 0x7a80)))
                    mstore(add(transcript, 0x7b40), mload(add(transcript, 0x7aa0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7ae0), 0x80, add(transcript, 0x7ae0), 0x40), 1), success)
mstore(add(transcript, 0x7b60), 0x2e4ddb019ee1a7bfbc2119424fea14649487c7b712d919af9987dd7adbfb1ef0)
                    mstore(add(transcript, 0x7b80), 0x12c866b881f22478b9b8d238a9e4ae6ac11a4e48df8089e2a350977d68f93862)
mstore(add(transcript, 0x7ba0), mload(add(transcript, 0x60e0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7b60), 0x60, add(transcript, 0x7b60), 0x40), 1), success)
mstore(add(transcript, 0x7bc0), mload(add(transcript, 0x7ae0)))
                    mstore(add(transcript, 0x7be0), mload(add(transcript, 0x7b00)))
mstore(add(transcript, 0x7c00), mload(add(transcript, 0x7b60)))
                    mstore(add(transcript, 0x7c20), mload(add(transcript, 0x7b80)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7bc0), 0x80, add(transcript, 0x7bc0), 0x40), 1), success)
mstore(add(transcript, 0x7c40), 0x1b6dea5d6694f3f846e346df344d8820c4976a99881ac57740ade77ef4a75dc6)
                    mstore(add(transcript, 0x7c60), 0x020c3cf2e4977bcce01d822c5f7c65b5e2f7ca839ac43ca4b5f180b7179bff0f)
mstore(add(transcript, 0x7c80), mload(add(transcript, 0x6100)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7c40), 0x60, add(transcript, 0x7c40), 0x40), 1), success)
mstore(add(transcript, 0x7ca0), mload(add(transcript, 0x7bc0)))
                    mstore(add(transcript, 0x7cc0), mload(add(transcript, 0x7be0)))
mstore(add(transcript, 0x7ce0), mload(add(transcript, 0x7c40)))
                    mstore(add(transcript, 0x7d00), mload(add(transcript, 0x7c60)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7ca0), 0x80, add(transcript, 0x7ca0), 0x40), 1), success)
mstore(add(transcript, 0x7d20), 0x042c4e8c8d4b9753902ad51c4ee2284e6f217e16ea3f6f84b6ebd9a55b0b7ef6)
                    mstore(add(transcript, 0x7d40), 0x0b7f691566857dc2b103db3625b77dd3a25175e4a9525db7137256ca491e2a6b)
mstore(add(transcript, 0x7d60), mload(add(transcript, 0x6120)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7d20), 0x60, add(transcript, 0x7d20), 0x40), 1), success)
mstore(add(transcript, 0x7d80), mload(add(transcript, 0x7ca0)))
                    mstore(add(transcript, 0x7da0), mload(add(transcript, 0x7cc0)))
mstore(add(transcript, 0x7dc0), mload(add(transcript, 0x7d20)))
                    mstore(add(transcript, 0x7de0), mload(add(transcript, 0x7d40)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7d80), 0x80, add(transcript, 0x7d80), 0x40), 1), success)
mstore(add(transcript, 0x7e00), mload(add(transcript, 0x6c0)))
                    mstore(add(transcript, 0x7e20), mload(add(transcript, 0x6e0)))
mstore(add(transcript, 0x7e40), mload(add(transcript, 0x6140)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7e00), 0x60, add(transcript, 0x7e00), 0x40), 1), success)
mstore(add(transcript, 0x7e60), mload(add(transcript, 0x7d80)))
                    mstore(add(transcript, 0x7e80), mload(add(transcript, 0x7da0)))
mstore(add(transcript, 0x7ea0), mload(add(transcript, 0x7e00)))
                    mstore(add(transcript, 0x7ec0), mload(add(transcript, 0x7e20)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7e60), 0x80, add(transcript, 0x7e60), 0x40), 1), success)
mstore(add(transcript, 0x7ee0), mload(add(transcript, 0x700)))
                    mstore(add(transcript, 0x7f00), mload(add(transcript, 0x720)))
mstore(add(transcript, 0x7f20), mload(add(transcript, 0x6160)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7ee0), 0x60, add(transcript, 0x7ee0), 0x40), 1), success)
mstore(add(transcript, 0x7f40), mload(add(transcript, 0x7e60)))
                    mstore(add(transcript, 0x7f60), mload(add(transcript, 0x7e80)))
mstore(add(transcript, 0x7f80), mload(add(transcript, 0x7ee0)))
                    mstore(add(transcript, 0x7fa0), mload(add(transcript, 0x7f00)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7f40), 0x80, add(transcript, 0x7f40), 0x40), 1), success)
mstore(add(transcript, 0x7fc0), mload(add(transcript, 0x620)))
                    mstore(add(transcript, 0x7fe0), mload(add(transcript, 0x640)))
mstore(add(transcript, 0x8000), mload(add(transcript, 0x6180)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7fc0), 0x60, add(transcript, 0x7fc0), 0x40), 1), success)
mstore(add(transcript, 0x8020), mload(add(transcript, 0x7f40)))
                    mstore(add(transcript, 0x8040), mload(add(transcript, 0x7f60)))
mstore(add(transcript, 0x8060), mload(add(transcript, 0x7fc0)))
                    mstore(add(transcript, 0x8080), mload(add(transcript, 0x7fe0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8020), 0x80, add(transcript, 0x8020), 0x40), 1), success)
mstore(add(transcript, 0x80a0), mload(add(transcript, 0x1280)))
                    mstore(add(transcript, 0x80c0), mload(add(transcript, 0x12a0)))
mstore(add(transcript, 0x80e0), sub(f_q, mload(add(transcript, 0x61c0))))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x80a0), 0x60, add(transcript, 0x80a0), 0x40), 1), success)
mstore(add(transcript, 0x8100), mload(add(transcript, 0x8020)))
                    mstore(add(transcript, 0x8120), mload(add(transcript, 0x8040)))
mstore(add(transcript, 0x8140), mload(add(transcript, 0x80a0)))
                    mstore(add(transcript, 0x8160), mload(add(transcript, 0x80c0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8100), 0x80, add(transcript, 0x8100), 0x40), 1), success)
mstore(add(transcript, 0x8180), mload(add(transcript, 0x1320)))
                    mstore(add(transcript, 0x81a0), mload(add(transcript, 0x1340)))
mstore(add(transcript, 0x81c0), mload(add(transcript, 0x61e0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8180), 0x60, add(transcript, 0x8180), 0x40), 1), success)
mstore(add(transcript, 0x81e0), mload(add(transcript, 0x8100)))
                    mstore(add(transcript, 0x8200), mload(add(transcript, 0x8120)))
mstore(add(transcript, 0x8220), mload(add(transcript, 0x8180)))
                    mstore(add(transcript, 0x8240), mload(add(transcript, 0x81a0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x81e0), 0x80, add(transcript, 0x81e0), 0x40), 1), success)
mstore(add(transcript, 0x8260), mload(add(transcript, 0x81e0)))
                    mstore(add(transcript, 0x8280), mload(add(transcript, 0x8200)))
mstore(add(transcript, 0x82a0), 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(add(transcript, 0x82c0), 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(add(transcript, 0x82e0), 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(add(transcript, 0x8300), 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(add(transcript, 0x8320), mload(add(transcript, 0x1320)))
                    mstore(add(transcript, 0x8340), mload(add(transcript, 0x1340)))
mstore(add(transcript, 0x8360), 0x02bb08cd02255f03f68752a49670aff168f06c4dc3e61da06dc4c01f0fdcd224)
            mstore(add(transcript, 0x8380), 0x172011b5a9f869c9c43b284680eec21bca494674b484f92bd4deba7511c686ce)
            mstore(add(transcript, 0x83a0), 0x1b3856aa8ebe922476cec5710d73672c1bff1476980854b2978d07a9f8eaca72)
            mstore(add(transcript, 0x83c0), 0x24c10b4979af6e3215b78d5d2ac15148b7030f658117741046443d6acbcdef0c)
success := and(eq(staticcall(gas(), 0x8, add(transcript, 0x8260), 0x180, add(transcript, 0x8260), 0x20), 1), success)
success := and(eq(mload(add(transcript, 0x8260)), 1), success)

        }}
        // transcriptBytes = abi.encode(transcript.length, transcript);
        bytes32[] memory newTranscript = new bytes32[](_transcript.length);
        for(uint i=0; i<_transcript.length; i++) {
            newTranscript[i] = transcript[i];
        }
        return (success, newTranscript);
    } 
}
