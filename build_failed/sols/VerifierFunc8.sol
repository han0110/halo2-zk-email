// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;
import "./VerifierFuncAbst.sol";

contract VerifierFunc8 is VerifierFuncAbst {
    function verifyPartial(
        uint256[] memory pubInputs,
        bytes memory proof,
        bool success,
        bytes32[6992] memory transcript
    ) public view override returns (bool, bytes32[6992] memory) {
        // bytes32[6992] memory transcript;
        // require(_transcript.length == 6992, "transcript length is not 6992");
        // if(_transcript.length != 0) {
        //     transcript = abi.decode(_transcript, (bytes32[6992]));
        // }
        // for(uint i=0; i<_transcript.length; i++) {
        //     transcript[i] = _transcript[i];
        // }
        
        assembly {{
            
            let f_p
            := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let
                f_q
            := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid {
                {
                    let x_lt_p := lt(
                        x,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let y_lt_p := lt(
                        y,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let x_is_zero := eq(x, 0)
                    let y_is_zero := eq(y, 0)
                    let x_or_y_is_zero := or(x_is_zero, y_is_zero)
                    let x_and_y_is_not_zero := not(x_or_y_is_zero)
                    valid := and(x_and_y_is_not_zero, valid)
                }
                {
                    let y_square := mulmod(
                        y,
                        y,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let x_square := mulmod(
                        x,
                        x,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let x_cube := mulmod(
                        x_square,
                        x,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let x_cube_plus_3 := addmod(
                        x_cube,
                        3,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let y_square_eq_x_cube_plus_3 := eq(x_cube_plus_3, y_square)
                    valid := and(y_square_eq_x_cube_plus_3, valid)
                }
            }
                        mstore(add(transcript, 0x34780), mload(add(transcript, 0x1240)))
mstore(add(transcript, 0x347a0), mload(add(transcript, 0x25140)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x34760), 0x60, add(transcript, 0x34760), 0x40), 1), success)
mstore(add(transcript, 0x347c0), mload(add(transcript, 0x346e0)))
                    mstore(add(transcript, 0x347e0), mload(add(transcript, 0x34700)))
mstore(add(transcript, 0x34800), mload(add(transcript, 0x34760)))
                    mstore(add(transcript, 0x34820), mload(add(transcript, 0x34780)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x347c0), 0x80, add(transcript, 0x347c0), 0x40), 1), success)
mstore(add(transcript, 0x34840), mload(add(transcript, 0x12a0)))
                    mstore(add(transcript, 0x34860), mload(add(transcript, 0x12c0)))
mstore(add(transcript, 0x34880), mload(add(transcript, 0x25160)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x34840), 0x60, add(transcript, 0x34840), 0x40), 1), success)
mstore(add(transcript, 0x348a0), mload(add(transcript, 0x347c0)))
                    mstore(add(transcript, 0x348c0), mload(add(transcript, 0x347e0)))
mstore(add(transcript, 0x348e0), mload(add(transcript, 0x34840)))
                    mstore(add(transcript, 0x34900), mload(add(transcript, 0x34860)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x348a0), 0x80, add(transcript, 0x348a0), 0x40), 1), success)
mstore(add(transcript, 0x34920), mload(add(transcript, 0x1320)))
                    mstore(add(transcript, 0x34940), mload(add(transcript, 0x1340)))
mstore(add(transcript, 0x34960), mload(add(transcript, 0x25180)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x34920), 0x60, add(transcript, 0x34920), 0x40), 1), success)
mstore(add(transcript, 0x34980), mload(add(transcript, 0x348a0)))
                    mstore(add(transcript, 0x349a0), mload(add(transcript, 0x348c0)))
mstore(add(transcript, 0x349c0), mload(add(transcript, 0x34920)))
                    mstore(add(transcript, 0x349e0), mload(add(transcript, 0x34940)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x34980), 0x80, add(transcript, 0x34980), 0x40), 1), success)
mstore(add(transcript, 0x34a00), mload(add(transcript, 0x13a0)))
                    mstore(add(transcript, 0x34a20), mload(add(transcript, 0x13c0)))
mstore(add(transcript, 0x34a40), mload(add(transcript, 0x251a0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x34a00), 0x60, add(transcript, 0x34a00), 0x40), 1), success)
mstore(add(transcript, 0x34a60), mload(add(transcript, 0x34980)))
                    mstore(add(transcript, 0x34a80), mload(add(transcript, 0x349a0)))
mstore(add(transcript, 0x34aa0), mload(add(transcript, 0x34a00)))
                    mstore(add(transcript, 0x34ac0), mload(add(transcript, 0x34a20)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x34a60), 0x80, add(transcript, 0x34a60), 0x40), 1), success)
mstore(add(transcript, 0x34ae0), mload(add(transcript, 0x1420)))
                    mstore(add(transcript, 0x34b00), mload(add(transcript, 0x1440)))
mstore(add(transcript, 0x34b20), mload(add(transcript, 0x251c0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x34ae0), 0x60, add(transcript, 0x34ae0), 0x40), 1), success)
mstore(add(transcript, 0x34b40), mload(add(transcript, 0x34a60)))
                    mstore(add(transcript, 0x34b60), mload(add(transcript, 0x34a80)))
mstore(add(transcript, 0x34b80), mload(add(transcript, 0x34ae0)))
                    mstore(add(transcript, 0x34ba0), mload(add(transcript, 0x34b00)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x34b40), 0x80, add(transcript, 0x34b40), 0x40), 1), success)
mstore(add(transcript, 0x34bc0), mload(add(transcript, 0x14a0)))
                    mstore(add(transcript, 0x34be0), mload(add(transcript, 0x14c0)))
mstore(add(transcript, 0x34c00), mload(add(transcript, 0x251e0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x34bc0), 0x60, add(transcript, 0x34bc0), 0x40), 1), success)
mstore(add(transcript, 0x34c20), mload(add(transcript, 0x34b40)))
                    mstore(add(transcript, 0x34c40), mload(add(transcript, 0x34b60)))
mstore(add(transcript, 0x34c60), mload(add(transcript, 0x34bc0)))
                    mstore(add(transcript, 0x34c80), mload(add(transcript, 0x34be0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x34c20), 0x80, add(transcript, 0x34c20), 0x40), 1), success)
mstore(add(transcript, 0x34ca0), mload(add(transcript, 0x1520)))
                    mstore(add(transcript, 0x34cc0), mload(add(transcript, 0x1540)))
mstore(add(transcript, 0x34ce0), mload(add(transcript, 0x25200)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x34ca0), 0x60, add(transcript, 0x34ca0), 0x40), 1), success)
mstore(add(transcript, 0x34d00), mload(add(transcript, 0x34c20)))
                    mstore(add(transcript, 0x34d20), mload(add(transcript, 0x34c40)))
mstore(add(transcript, 0x34d40), mload(add(transcript, 0x34ca0)))
                    mstore(add(transcript, 0x34d60), mload(add(transcript, 0x34cc0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x34d00), 0x80, add(transcript, 0x34d00), 0x40), 1), success)
mstore(add(transcript, 0x34d80), mload(add(transcript, 0x15a0)))
                    mstore(add(transcript, 0x34da0), mload(add(transcript, 0x15c0)))
mstore(add(transcript, 0x34dc0), mload(add(transcript, 0x25220)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x34d80), 0x60, add(transcript, 0x34d80), 0x40), 1), success)
mstore(add(transcript, 0x34de0), mload(add(transcript, 0x34d00)))
                    mstore(add(transcript, 0x34e00), mload(add(transcript, 0x34d20)))
mstore(add(transcript, 0x34e20), mload(add(transcript, 0x34d80)))
                    mstore(add(transcript, 0x34e40), mload(add(transcript, 0x34da0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x34de0), 0x80, add(transcript, 0x34de0), 0x40), 1), success)
mstore(add(transcript, 0x34e60), mload(add(transcript, 0x1620)))
                    mstore(add(transcript, 0x34e80), mload(add(transcript, 0x1640)))
mstore(add(transcript, 0x34ea0), mload(add(transcript, 0x25240)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x34e60), 0x60, add(transcript, 0x34e60), 0x40), 1), success)
mstore(add(transcript, 0x34ec0), mload(add(transcript, 0x34de0)))
                    mstore(add(transcript, 0x34ee0), mload(add(transcript, 0x34e00)))
mstore(add(transcript, 0x34f00), mload(add(transcript, 0x34e60)))
                    mstore(add(transcript, 0x34f20), mload(add(transcript, 0x34e80)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x34ec0), 0x80, add(transcript, 0x34ec0), 0x40), 1), success)
mstore(add(transcript, 0x34f40), mload(add(transcript, 0x16a0)))
                    mstore(add(transcript, 0x34f60), mload(add(transcript, 0x16c0)))
mstore(add(transcript, 0x34f80), mload(add(transcript, 0x25260)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x34f40), 0x60, add(transcript, 0x34f40), 0x40), 1), success)
mstore(add(transcript, 0x34fa0), mload(add(transcript, 0x34ec0)))
                    mstore(add(transcript, 0x34fc0), mload(add(transcript, 0x34ee0)))
mstore(add(transcript, 0x34fe0), mload(add(transcript, 0x34f40)))
                    mstore(add(transcript, 0x35000), mload(add(transcript, 0x34f60)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x34fa0), 0x80, add(transcript, 0x34fa0), 0x40), 1), success)
mstore(add(transcript, 0x35020), mload(add(transcript, 0x1720)))
                    mstore(add(transcript, 0x35040), mload(add(transcript, 0x1740)))
mstore(add(transcript, 0x35060), mload(add(transcript, 0x25280)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x35020), 0x60, add(transcript, 0x35020), 0x40), 1), success)
mstore(add(transcript, 0x35080), mload(add(transcript, 0x34fa0)))
                    mstore(add(transcript, 0x350a0), mload(add(transcript, 0x34fc0)))
mstore(add(transcript, 0x350c0), mload(add(transcript, 0x35020)))
                    mstore(add(transcript, 0x350e0), mload(add(transcript, 0x35040)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x35080), 0x80, add(transcript, 0x35080), 0x40), 1), success)
mstore(add(transcript, 0x35100), mload(add(transcript, 0x17a0)))
                    mstore(add(transcript, 0x35120), mload(add(transcript, 0x17c0)))
mstore(add(transcript, 0x35140), mload(add(transcript, 0x252a0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x35100), 0x60, add(transcript, 0x35100), 0x40), 1), success)
mstore(add(transcript, 0x35160), mload(add(transcript, 0x35080)))
                    mstore(add(transcript, 0x35180), mload(add(transcript, 0x350a0)))
mstore(add(transcript, 0x351a0), mload(add(transcript, 0x35100)))
                    mstore(add(transcript, 0x351c0), mload(add(transcript, 0x35120)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x35160), 0x80, add(transcript, 0x35160), 0x40), 1), success)
mstore(add(transcript, 0x351e0), mload(add(transcript, 0x1820)))
                    mstore(add(transcript, 0x35200), mload(add(transcript, 0x1840)))
mstore(add(transcript, 0x35220), mload(add(transcript, 0x252c0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x351e0), 0x60, add(transcript, 0x351e0), 0x40), 1), success)
mstore(add(transcript, 0x35240), mload(add(transcript, 0x35160)))
                    mstore(add(transcript, 0x35260), mload(add(transcript, 0x35180)))
mstore(add(transcript, 0x35280), mload(add(transcript, 0x351e0)))
                    mstore(add(transcript, 0x352a0), mload(add(transcript, 0x35200)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x35240), 0x80, add(transcript, 0x35240), 0x40), 1), success)
mstore(add(transcript, 0x352c0), mload(add(transcript, 0x18a0)))
                    mstore(add(transcript, 0x352e0), mload(add(transcript, 0x18c0)))
mstore(add(transcript, 0x35300), mload(add(transcript, 0x252e0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x352c0), 0x60, add(transcript, 0x352c0), 0x40), 1), success)
mstore(add(transcript, 0x35320), mload(add(transcript, 0x35240)))
                    mstore(add(transcript, 0x35340), mload(add(transcript, 0x35260)))
mstore(add(transcript, 0x35360), mload(add(transcript, 0x352c0)))
                    mstore(add(transcript, 0x35380), mload(add(transcript, 0x352e0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x35320), 0x80, add(transcript, 0x35320), 0x40), 1), success)
mstore(add(transcript, 0x353a0), mload(add(transcript, 0x1920)))
                    mstore(add(transcript, 0x353c0), mload(add(transcript, 0x1940)))
mstore(add(transcript, 0x353e0), mload(add(transcript, 0x25300)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x353a0), 0x60, add(transcript, 0x353a0), 0x40), 1), success)
mstore(add(transcript, 0x35400), mload(add(transcript, 0x35320)))
                    mstore(add(transcript, 0x35420), mload(add(transcript, 0x35340)))
mstore(add(transcript, 0x35440), mload(add(transcript, 0x353a0)))
                    mstore(add(transcript, 0x35460), mload(add(transcript, 0x353c0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x35400), 0x80, add(transcript, 0x35400), 0x40), 1), success)
mstore(add(transcript, 0x35480), mload(add(transcript, 0x19a0)))
                    mstore(add(transcript, 0x354a0), mload(add(transcript, 0x19c0)))
mstore(add(transcript, 0x354c0), mload(add(transcript, 0x25320)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x35480), 0x60, add(transcript, 0x35480), 0x40), 1), success)
mstore(add(transcript, 0x354e0), mload(add(transcript, 0x35400)))
                    mstore(add(transcript, 0x35500), mload(add(transcript, 0x35420)))
mstore(add(transcript, 0x35520), mload(add(transcript, 0x35480)))
                    mstore(add(transcript, 0x35540), mload(add(transcript, 0x354a0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x354e0), 0x80, add(transcript, 0x354e0), 0x40), 1), success)
mstore(add(transcript, 0x35560), mload(add(transcript, 0x1a20)))
                    mstore(add(transcript, 0x35580), mload(add(transcript, 0x1a40)))
mstore(add(transcript, 0x355a0), mload(add(transcript, 0x25340)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x35560), 0x60, add(transcript, 0x35560), 0x40), 1), success)
mstore(add(transcript, 0x355c0), mload(add(transcript, 0x354e0)))
                    mstore(add(transcript, 0x355e0), mload(add(transcript, 0x35500)))
mstore(add(transcript, 0x35600), mload(add(transcript, 0x35560)))
                    mstore(add(transcript, 0x35620), mload(add(transcript, 0x35580)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x355c0), 0x80, add(transcript, 0x355c0), 0x40), 1), success)
mstore(add(transcript, 0x35640), mload(add(transcript, 0x1aa0)))
                    mstore(add(transcript, 0x35660), mload(add(transcript, 0x1ac0)))
mstore(add(transcript, 0x35680), mload(add(transcript, 0x25360)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x35640), 0x60, add(transcript, 0x35640), 0x40), 1), success)
mstore(add(transcript, 0x356a0), mload(add(transcript, 0x355c0)))
                    mstore(add(transcript, 0x356c0), mload(add(transcript, 0x355e0)))
mstore(add(transcript, 0x356e0), mload(add(transcript, 0x35640)))
                    mstore(add(transcript, 0x35700), mload(add(transcript, 0x35660)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x356a0), 0x80, add(transcript, 0x356a0), 0x40), 1), success)
mstore(add(transcript, 0x35720), mload(add(transcript, 0x1b20)))
                    mstore(add(transcript, 0x35740), mload(add(transcript, 0x1b40)))
mstore(add(transcript, 0x35760), mload(add(transcript, 0x25380)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x35720), 0x60, add(transcript, 0x35720), 0x40), 1), success)
mstore(add(transcript, 0x35780), mload(add(transcript, 0x356a0)))
                    mstore(add(transcript, 0x357a0), mload(add(transcript, 0x356c0)))
mstore(add(transcript, 0x357c0), mload(add(transcript, 0x35720)))
                    mstore(add(transcript, 0x357e0), mload(add(transcript, 0x35740)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x35780), 0x80, add(transcript, 0x35780), 0x40), 1), success)
mstore(add(transcript, 0x35800), mload(add(transcript, 0xec0)))
                    mstore(add(transcript, 0x35820), mload(add(transcript, 0xee0)))
mstore(add(transcript, 0x35840), mload(add(transcript, 0x25480)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x35800), 0x60, add(transcript, 0x35800), 0x40), 1), success)
mstore(add(transcript, 0x35860), mload(add(transcript, 0x35780)))
                    mstore(add(transcript, 0x35880), mload(add(transcript, 0x357a0)))
mstore(add(transcript, 0x358a0), mload(add(transcript, 0x35800)))
                    mstore(add(transcript, 0x358c0), mload(add(transcript, 0x35820)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x35860), 0x80, add(transcript, 0x35860), 0x40), 1), success)
mstore(add(transcript, 0x358e0), mload(add(transcript, 0x1c60)))
                    mstore(add(transcript, 0x35900), mload(add(transcript, 0x1c80)))
mstore(add(transcript, 0x35920), mload(add(transcript, 0x25ee0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x358e0), 0x60, add(transcript, 0x358e0), 0x40), 1), success)
mstore(add(transcript, 0x35940), mload(add(transcript, 0x35860)))
                    mstore(add(transcript, 0x35960), mload(add(transcript, 0x35880)))
mstore(add(transcript, 0x35980), mload(add(transcript, 0x358e0)))
                    mstore(add(transcript, 0x359a0), mload(add(transcript, 0x35900)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x35940), 0x80, add(transcript, 0x35940), 0x40), 1), success)
mstore(add(transcript, 0x359c0), mload(add(transcript, 0x1ca0)))
                    mstore(add(transcript, 0x359e0), mload(add(transcript, 0x1cc0)))
mstore(add(transcript, 0x35a00), mload(add(transcript, 0x25f00)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x359c0), 0x60, add(transcript, 0x359c0), 0x40), 1), success)
mstore(add(transcript, 0x35a20), mload(add(transcript, 0x35940)))
                    mstore(add(transcript, 0x35a40), mload(add(transcript, 0x35960)))
mstore(add(transcript, 0x35a60), mload(add(transcript, 0x359c0)))
                    mstore(add(transcript, 0x35a80), mload(add(transcript, 0x359e0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x35a20), 0x80, add(transcript, 0x35a20), 0x40), 1), success)
mstore(add(transcript, 0x35aa0), mload(add(transcript, 0x1ce0)))
                    mstore(add(transcript, 0x35ac0), mload(add(transcript, 0x1d00)))
mstore(add(transcript, 0x35ae0), mload(add(transcript, 0x25f20)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x35aa0), 0x60, add(transcript, 0x35aa0), 0x40), 1), success)
mstore(add(transcript, 0x35b00), mload(add(transcript, 0x35a20)))
                    mstore(add(transcript, 0x35b20), mload(add(transcript, 0x35a40)))
mstore(add(transcript, 0x35b40), mload(add(transcript, 0x35aa0)))
                    mstore(add(transcript, 0x35b60), mload(add(transcript, 0x35ac0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x35b00), 0x80, add(transcript, 0x35b00), 0x40), 1), success)
mstore(add(transcript, 0x35b80), mload(add(transcript, 0x1d20)))
                    mstore(add(transcript, 0x35ba0), mload(add(transcript, 0x1d40)))
mstore(add(transcript, 0x35bc0), mload(add(transcript, 0x25f40)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x35b80), 0x60, add(transcript, 0x35b80), 0x40), 1), success)
mstore(add(transcript, 0x35be0), mload(add(transcript, 0x35b00)))
                    mstore(add(transcript, 0x35c00), mload(add(transcript, 0x35b20)))
mstore(add(transcript, 0x35c20), mload(add(transcript, 0x35b80)))
                    mstore(add(transcript, 0x35c40), mload(add(transcript, 0x35ba0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x35be0), 0x80, add(transcript, 0x35be0), 0x40), 1), success)
mstore(add(transcript, 0x35c60), mload(add(transcript, 0x1d60)))
                    mstore(add(transcript, 0x35c80), mload(add(transcript, 0x1d80)))
mstore(add(transcript, 0x35ca0), mload(add(transcript, 0x25f60)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x35c60), 0x60, add(transcript, 0x35c60), 0x40), 1), success)
mstore(add(transcript, 0x35cc0), mload(add(transcript, 0x35be0)))
                    mstore(add(transcript, 0x35ce0), mload(add(transcript, 0x35c00)))
mstore(add(transcript, 0x35d00), mload(add(transcript, 0x35c60)))
                    mstore(add(transcript, 0x35d20), mload(add(transcript, 0x35c80)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x35cc0), 0x80, add(transcript, 0x35cc0), 0x40), 1), success)
mstore(add(transcript, 0x35d40), mload(add(transcript, 0x1da0)))
                    mstore(add(transcript, 0x35d60), mload(add(transcript, 0x1dc0)))
mstore(add(transcript, 0x35d80), mload(add(transcript, 0x25f80)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x35d40), 0x60, add(transcript, 0x35d40), 0x40), 1), success)
mstore(add(transcript, 0x35da0), mload(add(transcript, 0x35cc0)))
                    mstore(add(transcript, 0x35dc0), mload(add(transcript, 0x35ce0)))
mstore(add(transcript, 0x35de0), mload(add(transcript, 0x35d40)))
                    mstore(add(transcript, 0x35e00), mload(add(transcript, 0x35d60)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x35da0), 0x80, add(transcript, 0x35da0), 0x40), 1), success)
mstore(add(transcript, 0x35e20), mload(add(transcript, 0x1de0)))
                    mstore(add(transcript, 0x35e40), mload(add(transcript, 0x1e00)))
mstore(add(transcript, 0x35e60), mload(add(transcript, 0x25fa0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x35e20), 0x60, add(transcript, 0x35e20), 0x40), 1), success)
mstore(add(transcript, 0x35e80), mload(add(transcript, 0x35da0)))
                    mstore(add(transcript, 0x35ea0), mload(add(transcript, 0x35dc0)))
mstore(add(transcript, 0x35ec0), mload(add(transcript, 0x35e20)))
                    mstore(add(transcript, 0x35ee0), mload(add(transcript, 0x35e40)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x35e80), 0x80, add(transcript, 0x35e80), 0x40), 1), success)
mstore(add(transcript, 0x35f00), mload(add(transcript, 0x1e20)))
                    mstore(add(transcript, 0x35f20), mload(add(transcript, 0x1e40)))
mstore(add(transcript, 0x35f40), mload(add(transcript, 0x25fc0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x35f00), 0x60, add(transcript, 0x35f00), 0x40), 1), success)
mstore(add(transcript, 0x35f60), mload(add(transcript, 0x35e80)))
                    mstore(add(transcript, 0x35f80), mload(add(transcript, 0x35ea0)))
mstore(add(transcript, 0x35fa0), mload(add(transcript, 0x35f00)))
                    mstore(add(transcript, 0x35fc0), mload(add(transcript, 0x35f20)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x35f60), 0x80, add(transcript, 0x35f60), 0x40), 1), success)
mstore(add(transcript, 0x35fe0), mload(add(transcript, 0x1e60)))
                    mstore(add(transcript, 0x36000), mload(add(transcript, 0x1e80)))
mstore(add(transcript, 0x36020), mload(add(transcript, 0x25fe0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x35fe0), 0x60, add(transcript, 0x35fe0), 0x40), 1), success)
mstore(add(transcript, 0x36040), mload(add(transcript, 0x35f60)))
                    mstore(add(transcript, 0x36060), mload(add(transcript, 0x35f80)))
mstore(add(transcript, 0x36080), mload(add(transcript, 0x35fe0)))
                    mstore(add(transcript, 0x360a0), mload(add(transcript, 0x36000)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x36040), 0x80, add(transcript, 0x36040), 0x40), 1), success)
mstore(add(transcript, 0x360c0), mload(add(transcript, 0x1ea0)))
                    mstore(add(transcript, 0x360e0), mload(add(transcript, 0x1ec0)))
mstore(add(transcript, 0x36100), mload(add(transcript, 0x26000)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x360c0), 0x60, add(transcript, 0x360c0), 0x40), 1), success)
mstore(add(transcript, 0x36120), mload(add(transcript, 0x36040)))
                    mstore(add(transcript, 0x36140), mload(add(transcript, 0x36060)))
mstore(add(transcript, 0x36160), mload(add(transcript, 0x360c0)))
                    mstore(add(transcript, 0x36180), mload(add(transcript, 0x360e0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x36120), 0x80, add(transcript, 0x36120), 0x40), 1), success)
mstore(add(transcript, 0x361a0), mload(add(transcript, 0x1ee0)))
                    mstore(add(transcript, 0x361c0), mload(add(transcript, 0x1f00)))
mstore(add(transcript, 0x361e0), mload(add(transcript, 0x26020)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x361a0), 0x60, add(transcript, 0x361a0), 0x40), 1), success)
mstore(add(transcript, 0x36200), mload(add(transcript, 0x36120)))
                    mstore(add(transcript, 0x36220), mload(add(transcript, 0x36140)))
mstore(add(transcript, 0x36240), mload(add(transcript, 0x361a0)))
                    mstore(add(transcript, 0x36260), mload(add(transcript, 0x361c0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x36200), 0x80, add(transcript, 0x36200), 0x40), 1), success)
mstore(add(transcript, 0x36280), mload(add(transcript, 0x1f20)))
                    mstore(add(transcript, 0x362a0), mload(add(transcript, 0x1f40)))
mstore(add(transcript, 0x362c0), mload(add(transcript, 0x26040)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x36280), 0x60, add(transcript, 0x36280), 0x40), 1), success)
mstore(add(transcript, 0x362e0), mload(add(transcript, 0x36200)))
                    mstore(add(transcript, 0x36300), mload(add(transcript, 0x36220)))
mstore(add(transcript, 0x36320), mload(add(transcript, 0x36280)))
                    mstore(add(transcript, 0x36340), mload(add(transcript, 0x362a0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x362e0), 0x80, add(transcript, 0x362e0), 0x40), 1), success)
mstore(add(transcript, 0x36360), mload(add(transcript, 0x1f60)))
                    mstore(add(transcript, 0x36380), mload(add(transcript, 0x1f80)))
mstore(add(transcript, 0x363a0), mload(add(transcript, 0x26060)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x36360), 0x60, add(transcript, 0x36360), 0x40), 1), success)
mstore(add(transcript, 0x363c0), mload(add(transcript, 0x362e0)))
                    mstore(add(transcript, 0x363e0), mload(add(transcript, 0x36300)))
mstore(add(transcript, 0x36400), mload(add(transcript, 0x36360)))
                    mstore(add(transcript, 0x36420), mload(add(transcript, 0x36380)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x363c0), 0x80, add(transcript, 0x363c0), 0x40), 1), success)
mstore(add(transcript, 0x36440), mload(add(transcript, 0x1fa0)))
                    mstore(add(transcript, 0x36460), mload(add(transcript, 0x1fc0)))
mstore(add(transcript, 0x36480), mload(add(transcript, 0x26080)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x36440), 0x60, add(transcript, 0x36440), 0x40), 1), success)
mstore(add(transcript, 0x364a0), mload(add(transcript, 0x363c0)))
                    mstore(add(transcript, 0x364c0), mload(add(transcript, 0x363e0)))
mstore(add(transcript, 0x364e0), mload(add(transcript, 0x36440)))
                    mstore(add(transcript, 0x36500), mload(add(transcript, 0x36460)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x364a0), 0x80, add(transcript, 0x364a0), 0x40), 1), success)
mstore(add(transcript, 0x36520), mload(add(transcript, 0x1fe0)))
                    mstore(add(transcript, 0x36540), mload(add(transcript, 0x2000)))
mstore(add(transcript, 0x36560), mload(add(transcript, 0x260a0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x36520), 0x60, add(transcript, 0x36520), 0x40), 1), success)
mstore(add(transcript, 0x36580), mload(add(transcript, 0x364a0)))
                    mstore(add(transcript, 0x365a0), mload(add(transcript, 0x364c0)))
mstore(add(transcript, 0x365c0), mload(add(transcript, 0x36520)))
                    mstore(add(transcript, 0x365e0), mload(add(transcript, 0x36540)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x36580), 0x80, add(transcript, 0x36580), 0x40), 1), success)
mstore(add(transcript, 0x36600), mload(add(transcript, 0x2020)))
                    mstore(add(transcript, 0x36620), mload(add(transcript, 0x2040)))
mstore(add(transcript, 0x36640), mload(add(transcript, 0x260c0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x36600), 0x60, add(transcript, 0x36600), 0x40), 1), success)
mstore(add(transcript, 0x36660), mload(add(transcript, 0x36580)))
                    mstore(add(transcript, 0x36680), mload(add(transcript, 0x365a0)))
mstore(add(transcript, 0x366a0), mload(add(transcript, 0x36600)))
                    mstore(add(transcript, 0x366c0), mload(add(transcript, 0x36620)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x36660), 0x80, add(transcript, 0x36660), 0x40), 1), success)
mstore(add(transcript, 0x366e0), mload(add(transcript, 0x6160)))
                    mstore(add(transcript, 0x36700), mload(add(transcript, 0x6180)))
mstore(add(transcript, 0x36720), sub(f_q, mload(add(transcript, 0x26100))))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x366e0), 0x60, add(transcript, 0x366e0), 0x40), 1), success)
mstore(add(transcript, 0x36740), mload(add(transcript, 0x36660)))
                    mstore(add(transcript, 0x36760), mload(add(transcript, 0x36680)))
mstore(add(transcript, 0x36780), mload(add(transcript, 0x366e0)))
                    mstore(add(transcript, 0x367a0), mload(add(transcript, 0x36700)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x36740), 0x80, add(transcript, 0x36740), 0x40), 1), success)
mstore(add(transcript, 0x367c0), mload(add(transcript, 0x6200)))
                    mstore(add(transcript, 0x367e0), mload(add(transcript, 0x6220)))
mstore(add(transcript, 0x36800), mload(add(transcript, 0x26120)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x367c0), 0x60, add(transcript, 0x367c0), 0x40), 1), success)
mstore(add(transcript, 0x36820), mload(add(transcript, 0x36740)))
                    mstore(add(transcript, 0x36840), mload(add(transcript, 0x36760)))
mstore(add(transcript, 0x36860), mload(add(transcript, 0x367c0)))
                    mstore(add(transcript, 0x36880), mload(add(transcript, 0x367e0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x36820), 0x80, add(transcript, 0x36820), 0x40), 1), success)
mstore(add(transcript, 0x368a0), mload(add(transcript, 0x36820)))
                    mstore(add(transcript, 0x368c0), mload(add(transcript, 0x36840)))
mstore(add(transcript, 0x368e0), 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(add(transcript, 0x36900), 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(add(transcript, 0x36920), 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(add(transcript, 0x36940), 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(add(transcript, 0x36960), mload(add(transcript, 0x6200)))
                    mstore(add(transcript, 0x36980), mload(add(transcript, 0x6220)))
mstore(add(transcript, 0x369a0), 0x21fcce50779795ab757b024f79d1f7d8dadd5180a3484f4ca4479400ab67c766)
            mstore(add(transcript, 0x369c0), 0x2e20712e7afcf8ac50c02f890ebbfc18fb7a148fc686d74ab473e7c26e78dff5)
            mstore(add(transcript, 0x369e0), 0x29f8cc1f62ed478c82a1a2f6531ed08d266e6bcc2fb18df3543b169f485df724)
            mstore(add(transcript, 0x36a00), 0x0e0ca33a7d510b609bde33a9f00f25a5bc13b41ebae623f920959c1dc8d5c193)
success := and(eq(staticcall(gas(), 0x8, add(transcript, 0x368a0), 0x180, add(transcript, 0x368a0), 0x20), 1), success)
success := and(eq(mload(add(transcript, 0x368a0)), 1), success)

        }}
        // bytes memory transcriptBytes = abi.encode(transcript);
        // bytes32[] memory newTranscript = new bytes32[](6992);
        // for(uint i=0; i<_transcript.length; i++) {
        //     newTranscript[i] = transcript[i];
        // }
        // require(newTranscript.length == 6992, "newTranscript length is not 6992");
        return (success, transcript);
    } 
}
