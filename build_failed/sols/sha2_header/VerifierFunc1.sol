// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;
import "../VerifierFuncAbst.sol";

contract VerifierFunc1 is VerifierFuncAbst {
    function verifyPartial(
        uint256[] memory pubInputs,
        bytes memory proof,
        bool success,
        bytes memory _transcript
    ) public view override returns (bool, bytes memory) {
        bytes32[1351] memory transcript;
        // require(_transcript.length == 1351, "transcript length is not 1351");
        if(_transcript.length != 0) {
            transcript = abi.decode(_transcript, (bytes32[1351]));
        }
        // for(uint i=0; i<_transcript.length; i++) {
        //     transcript[i] = _transcript[i];
        // }
        assembly {{
            
            let f_p
            := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let
                f_q
            := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid {
                {
                    let x_lt_p := lt(
                        x,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let y_lt_p := lt(
                        y,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let x_is_zero := eq(x, 0)
                    let y_is_zero := eq(y, 0)
                    let x_or_y_is_zero := or(x_is_zero, y_is_zero)
                    let x_and_y_is_not_zero := not(x_or_y_is_zero)
                    valid := and(x_and_y_is_not_zero, valid)
                }
                {
                    let y_square := mulmod(
                        y,
                        y,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let x_square := mulmod(
                        x,
                        x,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let x_cube := mulmod(
                        x_square,
                        x,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let x_cube_plus_3 := addmod(
                        x_cube,
                        3,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let y_square_eq_x_cube_plus_3 := eq(x_cube_plus_3, y_square)
                    valid := and(y_square_eq_x_cube_plus_3, valid)
                }
            }
    {                        let inv := mload(add(transcript, 0x49c0))            let v                            v := mload(add(transcript, 0x47c0))                    mstore(add(transcript, 0x47c0), mulmod(mload(add(transcript, 0x4980)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x47a0))                    mstore(add(transcript, 0x47a0), mulmod(mload(add(transcript, 0x4960)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x4780))                    mstore(add(transcript, 0x4780), mulmod(mload(add(transcript, 0x4940)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x4640))                    mstore(add(transcript, 0x4640), mulmod(mload(add(transcript, 0x4920)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x4760))                    mstore(add(transcript, 0x4760), mulmod(mload(add(transcript, 0x4900)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x4740))                    mstore(add(transcript, 0x4740), mulmod(mload(add(transcript, 0x48e0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x4720))                    mstore(add(transcript, 0x4720), mulmod(mload(add(transcript, 0x48c0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x4700))                    mstore(add(transcript, 0x4700), mulmod(mload(add(transcript, 0x48a0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x46e0))                    mstore(add(transcript, 0x46e0), mulmod(mload(add(transcript, 0x4880)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x46c0))                    mstore(add(transcript, 0x46c0), mulmod(mload(add(transcript, 0x4860)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x4620))                    mstore(add(transcript, 0x4620), mulmod(mload(add(transcript, 0x4840)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x46a0))                    mstore(add(transcript, 0x46a0), mulmod(mload(add(transcript, 0x4820)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x4600))                    mstore(add(transcript, 0x4600), mulmod(mload(add(transcript, 0x4800)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x45e0))                    mstore(add(transcript, 0x45e0), mulmod(mload(add(transcript, 0x47e0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x45c0))                    mstore(add(transcript, 0x45c0), mulmod(mload(add(transcript, 0x45a0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(add(transcript, 0x45a0), inv)        }
{            let result := mload(add(transcript, 0x45a0))result := addmod(mload(add(transcript, 0x45c0)), result, f_q)result := addmod(mload(add(transcript, 0x45e0)), result, f_q)result := addmod(mload(add(transcript, 0x4600)), result, f_q)mstore(add(transcript, 0x4aa0), result)        }
mstore(add(transcript, 0x4ac0), mulmod(mload(add(transcript, 0x4680)), mload(add(transcript, 0x4620)), f_q))
{            let result := mload(add(transcript, 0x46a0))mstore(add(transcript, 0x4ae0), result)        }
mstore(add(transcript, 0x4b00), mulmod(mload(add(transcript, 0x4680)), mload(add(transcript, 0x4720)), f_q))
{            let result := mload(add(transcript, 0x46c0))result := addmod(mload(add(transcript, 0x46e0)), result, f_q)result := addmod(mload(add(transcript, 0x4700)), result, f_q)mstore(add(transcript, 0x4b20), result)        }
mstore(add(transcript, 0x4b40), mulmod(mload(add(transcript, 0x4680)), mload(add(transcript, 0x4640)), f_q))
{            let result := mload(add(transcript, 0x4740))result := addmod(mload(add(transcript, 0x4760)), result, f_q)mstore(add(transcript, 0x4b60), result)        }
mstore(add(transcript, 0x4b80), mulmod(mload(add(transcript, 0x4680)), mload(add(transcript, 0x47c0)), f_q))
{            let result := mload(add(transcript, 0x4780))result := addmod(mload(add(transcript, 0x47a0)), result, f_q)mstore(add(transcript, 0x4ba0), result)        }
{            let prod := mload(add(transcript, 0x4aa0))                prod := mulmod(mload(add(transcript, 0x4ae0)), prod, f_q)                mstore(add(transcript, 0x4bc0), prod)                            prod := mulmod(mload(add(transcript, 0x4b20)), prod, f_q)                mstore(add(transcript, 0x4be0), prod)                            prod := mulmod(mload(add(transcript, 0x4b60)), prod, f_q)                mstore(add(transcript, 0x4c00), prod)                            prod := mulmod(mload(add(transcript, 0x4ba0)), prod, f_q)                mstore(add(transcript, 0x4c20), prod)                    }
mstore(add(transcript, 0x4c60), 32)
mstore(add(transcript, 0x4c80), 32)
mstore(add(transcript, 0x4ca0), 32)
mstore(add(transcript, 0x4cc0), mload(add(transcript, 0x4c20)))
mstore(add(transcript, 0x4ce0), 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(add(transcript, 0x4d00), 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, add(transcript, 0x4c60), 0xc0, add(transcript, 0x4c40), 0x20), 1), success)
{                        let inv := mload(add(transcript, 0x4c40))            let v                            v := mload(add(transcript, 0x4ba0))                    mstore(add(transcript, 0x4ba0), mulmod(mload(add(transcript, 0x4c00)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x4b60))                    mstore(add(transcript, 0x4b60), mulmod(mload(add(transcript, 0x4be0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x4b20))                    mstore(add(transcript, 0x4b20), mulmod(mload(add(transcript, 0x4bc0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x4ae0))                    mstore(add(transcript, 0x4ae0), mulmod(mload(add(transcript, 0x4aa0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(add(transcript, 0x4aa0), inv)        }
mstore(add(transcript, 0x4d20), mulmod(mload(add(transcript, 0x4ac0)), mload(add(transcript, 0x4ae0)), f_q))
mstore(add(transcript, 0x4d40), mulmod(mload(add(transcript, 0x4b00)), mload(add(transcript, 0x4b20)), f_q))
mstore(add(transcript, 0x4d60), mulmod(mload(add(transcript, 0x4b40)), mload(add(transcript, 0x4b60)), f_q))
mstore(add(transcript, 0x4d80), mulmod(mload(add(transcript, 0x4b80)), mload(add(transcript, 0x4ba0)), f_q))
mstore(add(transcript, 0x4da0), mulmod(mload(add(transcript, 0x14a0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4dc0), mulmod(mload(add(transcript, 0x4da0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4de0), mulmod(mload(add(transcript, 0x4dc0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4e00), mulmod(mload(add(transcript, 0x4de0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4e20), mulmod(mload(add(transcript, 0x4e00)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4e40), mulmod(mload(add(transcript, 0x4e20)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4e60), mulmod(mload(add(transcript, 0x4e40)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4e80), mulmod(mload(add(transcript, 0x4e60)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4ea0), mulmod(mload(add(transcript, 0x4e80)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4ec0), mulmod(mload(add(transcript, 0x4ea0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4ee0), mulmod(mload(add(transcript, 0x4ec0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4f00), mulmod(mload(add(transcript, 0x4ee0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4f20), mulmod(mload(add(transcript, 0x4f00)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4f40), mulmod(mload(add(transcript, 0x4f20)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4f60), mulmod(mload(add(transcript, 0x4f40)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4f80), mulmod(mload(add(transcript, 0x4f60)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4fa0), mulmod(mload(add(transcript, 0x4f80)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4fc0), mulmod(mload(add(transcript, 0x4fa0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x4fe0), mulmod(mload(add(transcript, 0x4fc0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x5000), mulmod(mload(add(transcript, 0x4fe0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x5020), mulmod(mload(add(transcript, 0x5000)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x5040), mulmod(mload(add(transcript, 0x5020)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x5060), mulmod(mload(add(transcript, 0x5040)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x5080), mulmod(mload(add(transcript, 0x5060)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x50a0), mulmod(mload(add(transcript, 0x5080)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x50c0), mulmod(mload(add(transcript, 0x50a0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x50e0), mulmod(mload(add(transcript, 0x50c0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x5100), mulmod(mload(add(transcript, 0x50e0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x5120), mulmod(mload(add(transcript, 0x5100)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x5140), mulmod(mload(add(transcript, 0x5120)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x5160), mulmod(mload(add(transcript, 0x1500)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x5180), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x51a0), mulmod(mload(add(transcript, 0x5180)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x51c0), mulmod(mload(add(transcript, 0x51a0)), mload(add(transcript, 0x1500)), f_q))
{            let result := mulmod(mload(add(transcript, 0x940)), mload(add(transcript, 0x45a0)), f_q)result := addmod(mulmod(mload(add(transcript, 0x960)), mload(add(transcript, 0x45c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x980)), mload(add(transcript, 0x45e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x9a0)), mload(add(transcript, 0x4600)), f_q), result, f_q)mstore(add(transcript, 0x51e0), result)        }
mstore(add(transcript, 0x5200), mulmod(mload(add(transcript, 0x51e0)), mload(add(transcript, 0x4aa0)), f_q))
mstore(add(transcript, 0x5220), mulmod(sub(f_q, mload(add(transcript, 0x5200))), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0x9c0)), mload(add(transcript, 0x45a0)), f_q)result := addmod(mulmod(mload(add(transcript, 0x9e0)), mload(add(transcript, 0x45c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xa00)), mload(add(transcript, 0x45e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xa20)), mload(add(transcript, 0x4600)), f_q), result, f_q)mstore(add(transcript, 0x5240), result)        }
mstore(add(transcript, 0x5260), mulmod(mload(add(transcript, 0x5240)), mload(add(transcript, 0x4aa0)), f_q))
mstore(add(transcript, 0x5280), mulmod(sub(f_q, mload(add(transcript, 0x5260))), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x52a0), mulmod(1, mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x52c0), addmod(mload(add(transcript, 0x5220)), mload(add(transcript, 0x5280)), f_q))
{            let result := mulmod(mload(add(transcript, 0xa40)), mload(add(transcript, 0x45a0)), f_q)result := addmod(mulmod(mload(add(transcript, 0xa60)), mload(add(transcript, 0x45c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xa80)), mload(add(transcript, 0x45e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xaa0)), mload(add(transcript, 0x4600)), f_q), result, f_q)mstore(add(transcript, 0x52e0), result)        }
mstore(add(transcript, 0x5300), mulmod(mload(add(transcript, 0x52e0)), mload(add(transcript, 0x4aa0)), f_q))
mstore(add(transcript, 0x5320), mulmod(sub(f_q, mload(add(transcript, 0x5300))), mload(add(transcript, 0x4da0)), f_q))
mstore(add(transcript, 0x5340), mulmod(1, mload(add(transcript, 0x4da0)), f_q))
mstore(add(transcript, 0x5360), addmod(mload(add(transcript, 0x52c0)), mload(add(transcript, 0x5320)), f_q))
{            let result := mulmod(mload(add(transcript, 0xac0)), mload(add(transcript, 0x45a0)), f_q)result := addmod(mulmod(mload(add(transcript, 0xae0)), mload(add(transcript, 0x45c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xb00)), mload(add(transcript, 0x45e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xb20)), mload(add(transcript, 0x4600)), f_q), result, f_q)mstore(add(transcript, 0x5380), result)        }
mstore(add(transcript, 0x53a0), mulmod(mload(add(transcript, 0x5380)), mload(add(transcript, 0x4aa0)), f_q))
mstore(add(transcript, 0x53c0), mulmod(sub(f_q, mload(add(transcript, 0x53a0))), mload(add(transcript, 0x4dc0)), f_q))
mstore(add(transcript, 0x53e0), mulmod(1, mload(add(transcript, 0x4dc0)), f_q))
mstore(add(transcript, 0x5400), addmod(mload(add(transcript, 0x5360)), mload(add(transcript, 0x53c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xb40)), mload(add(transcript, 0x45a0)), f_q)result := addmod(mulmod(mload(add(transcript, 0xb60)), mload(add(transcript, 0x45c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xb80)), mload(add(transcript, 0x45e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xba0)), mload(add(transcript, 0x4600)), f_q), result, f_q)mstore(add(transcript, 0x5420), result)        }
mstore(add(transcript, 0x5440), mulmod(mload(add(transcript, 0x5420)), mload(add(transcript, 0x4aa0)), f_q))
mstore(add(transcript, 0x5460), mulmod(sub(f_q, mload(add(transcript, 0x5440))), mload(add(transcript, 0x4de0)), f_q))
mstore(add(transcript, 0x5480), mulmod(1, mload(add(transcript, 0x4de0)), f_q))
mstore(add(transcript, 0x54a0), addmod(mload(add(transcript, 0x5400)), mload(add(transcript, 0x5460)), f_q))
{            let result := mulmod(mload(add(transcript, 0xbc0)), mload(add(transcript, 0x45a0)), f_q)result := addmod(mulmod(mload(add(transcript, 0xbe0)), mload(add(transcript, 0x45c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xc00)), mload(add(transcript, 0x45e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xc20)), mload(add(transcript, 0x4600)), f_q), result, f_q)mstore(add(transcript, 0x54c0), result)        }
mstore(add(transcript, 0x54e0), mulmod(mload(add(transcript, 0x54c0)), mload(add(transcript, 0x4aa0)), f_q))
mstore(add(transcript, 0x5500), mulmod(sub(f_q, mload(add(transcript, 0x54e0))), mload(add(transcript, 0x4e00)), f_q))
mstore(add(transcript, 0x5520), mulmod(1, mload(add(transcript, 0x4e00)), f_q))
mstore(add(transcript, 0x5540), addmod(mload(add(transcript, 0x54a0)), mload(add(transcript, 0x5500)), f_q))
{            let result := mulmod(mload(add(transcript, 0xc40)), mload(add(transcript, 0x45a0)), f_q)result := addmod(mulmod(mload(add(transcript, 0xc60)), mload(add(transcript, 0x45c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xc80)), mload(add(transcript, 0x45e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xca0)), mload(add(transcript, 0x4600)), f_q), result, f_q)mstore(add(transcript, 0x5560), result)        }
mstore(add(transcript, 0x5580), mulmod(mload(add(transcript, 0x5560)), mload(add(transcript, 0x4aa0)), f_q))
mstore(add(transcript, 0x55a0), mulmod(sub(f_q, mload(add(transcript, 0x5580))), mload(add(transcript, 0x4e20)), f_q))
mstore(add(transcript, 0x55c0), mulmod(1, mload(add(transcript, 0x4e20)), f_q))
mstore(add(transcript, 0x55e0), addmod(mload(add(transcript, 0x5540)), mload(add(transcript, 0x55a0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xcc0)), mload(add(transcript, 0x45a0)), f_q)result := addmod(mulmod(mload(add(transcript, 0xce0)), mload(add(transcript, 0x45c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xd00)), mload(add(transcript, 0x45e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xd20)), mload(add(transcript, 0x4600)), f_q), result, f_q)mstore(add(transcript, 0x5600), result)        }
mstore(add(transcript, 0x5620), mulmod(mload(add(transcript, 0x5600)), mload(add(transcript, 0x4aa0)), f_q))
mstore(add(transcript, 0x5640), mulmod(sub(f_q, mload(add(transcript, 0x5620))), mload(add(transcript, 0x4e40)), f_q))
mstore(add(transcript, 0x5660), mulmod(1, mload(add(transcript, 0x4e40)), f_q))
mstore(add(transcript, 0x5680), addmod(mload(add(transcript, 0x55e0)), mload(add(transcript, 0x5640)), f_q))
mstore(add(transcript, 0x56a0), mulmod(mload(add(transcript, 0x5680)), 1, f_q))
mstore(add(transcript, 0x56c0), mulmod(mload(add(transcript, 0x52a0)), 1, f_q))
mstore(add(transcript, 0x56e0), mulmod(mload(add(transcript, 0x5340)), 1, f_q))
mstore(add(transcript, 0x5700), mulmod(mload(add(transcript, 0x53e0)), 1, f_q))
mstore(add(transcript, 0x5720), mulmod(mload(add(transcript, 0x5480)), 1, f_q))
mstore(add(transcript, 0x5740), mulmod(mload(add(transcript, 0x5520)), 1, f_q))
mstore(add(transcript, 0x5760), mulmod(mload(add(transcript, 0x55c0)), 1, f_q))
mstore(add(transcript, 0x5780), mulmod(mload(add(transcript, 0x5660)), 1, f_q))
mstore(add(transcript, 0x57a0), mulmod(1, mload(add(transcript, 0x4ac0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xd40)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x57c0), result)        }
mstore(add(transcript, 0x57e0), mulmod(mload(add(transcript, 0x57c0)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x5800), mulmod(sub(f_q, mload(add(transcript, 0x57e0))), 1, f_q))
mstore(add(transcript, 0x5820), mulmod(mload(add(transcript, 0x57a0)), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0xd60)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x5840), result)        }
mstore(add(transcript, 0x5860), mulmod(mload(add(transcript, 0x5840)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x5880), mulmod(sub(f_q, mload(add(transcript, 0x5860))), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x58a0), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x58c0), addmod(mload(add(transcript, 0x5800)), mload(add(transcript, 0x5880)), f_q))
{            let result := mulmod(mload(add(transcript, 0xd80)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x58e0), result)        }
mstore(add(transcript, 0x5900), mulmod(mload(add(transcript, 0x58e0)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x5920), mulmod(sub(f_q, mload(add(transcript, 0x5900))), mload(add(transcript, 0x4da0)), f_q))
mstore(add(transcript, 0x5940), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4da0)), f_q))
mstore(add(transcript, 0x5960), addmod(mload(add(transcript, 0x58c0)), mload(add(transcript, 0x5920)), f_q))
{            let result := mulmod(mload(add(transcript, 0x13c0)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x5980), result)        }
mstore(add(transcript, 0x59a0), mulmod(mload(add(transcript, 0x5980)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x59c0), mulmod(sub(f_q, mload(add(transcript, 0x59a0))), mload(add(transcript, 0x4dc0)), f_q))
mstore(add(transcript, 0x59e0), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4dc0)), f_q))
mstore(add(transcript, 0x5a00), addmod(mload(add(transcript, 0x5960)), mload(add(transcript, 0x59c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1460)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x5a20), result)        }
mstore(add(transcript, 0x5a40), mulmod(mload(add(transcript, 0x5a20)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x5a60), mulmod(sub(f_q, mload(add(transcript, 0x5a40))), mload(add(transcript, 0x4de0)), f_q))
mstore(add(transcript, 0x5a80), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4de0)), f_q))
mstore(add(transcript, 0x5aa0), addmod(mload(add(transcript, 0x5a00)), mload(add(transcript, 0x5a60)), f_q))
{            let result := mulmod(mload(add(transcript, 0xda0)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x5ac0), result)        }
mstore(add(transcript, 0x5ae0), mulmod(mload(add(transcript, 0x5ac0)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x5b00), mulmod(sub(f_q, mload(add(transcript, 0x5ae0))), mload(add(transcript, 0x4e00)), f_q))
mstore(add(transcript, 0x5b20), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4e00)), f_q))
mstore(add(transcript, 0x5b40), addmod(mload(add(transcript, 0x5aa0)), mload(add(transcript, 0x5b00)), f_q))
{            let result := mulmod(mload(add(transcript, 0xdc0)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x5b60), result)        }
mstore(add(transcript, 0x5b80), mulmod(mload(add(transcript, 0x5b60)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x5ba0), mulmod(sub(f_q, mload(add(transcript, 0x5b80))), mload(add(transcript, 0x4e20)), f_q))
mstore(add(transcript, 0x5bc0), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4e20)), f_q))
mstore(add(transcript, 0x5be0), addmod(mload(add(transcript, 0x5b40)), mload(add(transcript, 0x5ba0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xde0)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x5c00), result)        }
mstore(add(transcript, 0x5c20), mulmod(mload(add(transcript, 0x5c00)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x5c40), mulmod(sub(f_q, mload(add(transcript, 0x5c20))), mload(add(transcript, 0x4e40)), f_q))
mstore(add(transcript, 0x5c60), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4e40)), f_q))
mstore(add(transcript, 0x5c80), addmod(mload(add(transcript, 0x5be0)), mload(add(transcript, 0x5c40)), f_q))
mstore(add(transcript, 0x5ca0), addmod(mload(add(transcript, 0x5bc0)), mload(add(transcript, 0x5c60)), f_q))
{            let result := mulmod(mload(add(transcript, 0xe00)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x5cc0), result)        }
mstore(add(transcript, 0x5ce0), mulmod(mload(add(transcript, 0x5cc0)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x5d00), mulmod(sub(f_q, mload(add(transcript, 0x5ce0))), mload(add(transcript, 0x4e60)), f_q))
mstore(add(transcript, 0x5d20), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4e60)), f_q))
mstore(add(transcript, 0x5d40), addmod(mload(add(transcript, 0x5c80)), mload(add(transcript, 0x5d00)), f_q))
{            let result := mulmod(mload(add(transcript, 0xe20)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x5d60), result)        }
mstore(add(transcript, 0x5d80), mulmod(mload(add(transcript, 0x5d60)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x5da0), mulmod(sub(f_q, mload(add(transcript, 0x5d80))), mload(add(transcript, 0x4e80)), f_q))
mstore(add(transcript, 0x5dc0), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4e80)), f_q))
mstore(add(transcript, 0x5de0), addmod(mload(add(transcript, 0x5d40)), mload(add(transcript, 0x5da0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xe40)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x5e00), result)        }
mstore(add(transcript, 0x5e20), mulmod(mload(add(transcript, 0x5e00)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x5e40), mulmod(sub(f_q, mload(add(transcript, 0x5e20))), mload(add(transcript, 0x4ea0)), f_q))
mstore(add(transcript, 0x5e60), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4ea0)), f_q))
mstore(add(transcript, 0x5e80), addmod(mload(add(transcript, 0x5de0)), mload(add(transcript, 0x5e40)), f_q))
{            let result := mulmod(mload(add(transcript, 0xe60)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x5ea0), result)        }
mstore(add(transcript, 0x5ec0), mulmod(mload(add(transcript, 0x5ea0)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x5ee0), mulmod(sub(f_q, mload(add(transcript, 0x5ec0))), mload(add(transcript, 0x4ec0)), f_q))
mstore(add(transcript, 0x5f00), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4ec0)), f_q))
mstore(add(transcript, 0x5f20), addmod(mload(add(transcript, 0x5e80)), mload(add(transcript, 0x5ee0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xe80)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x5f40), result)        }
mstore(add(transcript, 0x5f60), mulmod(mload(add(transcript, 0x5f40)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x5f80), mulmod(sub(f_q, mload(add(transcript, 0x5f60))), mload(add(transcript, 0x4ee0)), f_q))
mstore(add(transcript, 0x5fa0), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4ee0)), f_q))
mstore(add(transcript, 0x5fc0), addmod(mload(add(transcript, 0x5f20)), mload(add(transcript, 0x5f80)), f_q))
{            let result := mulmod(mload(add(transcript, 0xea0)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x5fe0), result)        }
mstore(add(transcript, 0x6000), mulmod(mload(add(transcript, 0x5fe0)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x6020), mulmod(sub(f_q, mload(add(transcript, 0x6000))), mload(add(transcript, 0x4f00)), f_q))
mstore(add(transcript, 0x6040), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4f00)), f_q))
mstore(add(transcript, 0x6060), addmod(mload(add(transcript, 0x5fc0)), mload(add(transcript, 0x6020)), f_q))
{            let result := mulmod(mload(add(transcript, 0xec0)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x6080), result)        }
mstore(add(transcript, 0x60a0), mulmod(mload(add(transcript, 0x6080)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x60c0), mulmod(sub(f_q, mload(add(transcript, 0x60a0))), mload(add(transcript, 0x4f20)), f_q))
mstore(add(transcript, 0x60e0), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4f20)), f_q))
mstore(add(transcript, 0x6100), addmod(mload(add(transcript, 0x6060)), mload(add(transcript, 0x60c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xee0)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x6120), result)        }
mstore(add(transcript, 0x6140), mulmod(mload(add(transcript, 0x6120)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x6160), mulmod(sub(f_q, mload(add(transcript, 0x6140))), mload(add(transcript, 0x4f40)), f_q))
mstore(add(transcript, 0x6180), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4f40)), f_q))
mstore(add(transcript, 0x61a0), addmod(mload(add(transcript, 0x6100)), mload(add(transcript, 0x6160)), f_q))
{            let result := mulmod(mload(add(transcript, 0xf20)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x61c0), result)        }
mstore(add(transcript, 0x61e0), mulmod(mload(add(transcript, 0x61c0)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x6200), mulmod(sub(f_q, mload(add(transcript, 0x61e0))), mload(add(transcript, 0x4f60)), f_q))
mstore(add(transcript, 0x6220), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4f60)), f_q))
mstore(add(transcript, 0x6240), addmod(mload(add(transcript, 0x61a0)), mload(add(transcript, 0x6200)), f_q))
{            let result := mulmod(mload(add(transcript, 0xf40)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x6260), result)        }
mstore(add(transcript, 0x6280), mulmod(mload(add(transcript, 0x6260)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x62a0), mulmod(sub(f_q, mload(add(transcript, 0x6280))), mload(add(transcript, 0x4f80)), f_q))
mstore(add(transcript, 0x62c0), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4f80)), f_q))
mstore(add(transcript, 0x62e0), addmod(mload(add(transcript, 0x6240)), mload(add(transcript, 0x62a0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xf60)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x6300), result)        }
mstore(add(transcript, 0x6320), mulmod(mload(add(transcript, 0x6300)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x6340), mulmod(sub(f_q, mload(add(transcript, 0x6320))), mload(add(transcript, 0x4fa0)), f_q))
mstore(add(transcript, 0x6360), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4fa0)), f_q))
mstore(add(transcript, 0x6380), addmod(mload(add(transcript, 0x62e0)), mload(add(transcript, 0x6340)), f_q))
{            let result := mulmod(mload(add(transcript, 0xf80)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x63a0), result)        }
mstore(add(transcript, 0x63c0), mulmod(mload(add(transcript, 0x63a0)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x63e0), mulmod(sub(f_q, mload(add(transcript, 0x63c0))), mload(add(transcript, 0x4fc0)), f_q))
mstore(add(transcript, 0x6400), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4fc0)), f_q))
mstore(add(transcript, 0x6420), addmod(mload(add(transcript, 0x6380)), mload(add(transcript, 0x63e0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xfa0)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x6440), result)        }
mstore(add(transcript, 0x6460), mulmod(mload(add(transcript, 0x6440)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x6480), mulmod(sub(f_q, mload(add(transcript, 0x6460))), mload(add(transcript, 0x4fe0)), f_q))
mstore(add(transcript, 0x64a0), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x4fe0)), f_q))
mstore(add(transcript, 0x64c0), addmod(mload(add(transcript, 0x6420)), mload(add(transcript, 0x6480)), f_q))
{            let result := mulmod(mload(add(transcript, 0xfc0)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x64e0), result)        }
mstore(add(transcript, 0x6500), mulmod(mload(add(transcript, 0x64e0)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x6520), mulmod(sub(f_q, mload(add(transcript, 0x6500))), mload(add(transcript, 0x5000)), f_q))
mstore(add(transcript, 0x6540), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x5000)), f_q))
mstore(add(transcript, 0x6560), addmod(mload(add(transcript, 0x64c0)), mload(add(transcript, 0x6520)), f_q))
{            let result := mulmod(mload(add(transcript, 0xfe0)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x6580), result)        }
mstore(add(transcript, 0x65a0), mulmod(mload(add(transcript, 0x6580)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x65c0), mulmod(sub(f_q, mload(add(transcript, 0x65a0))), mload(add(transcript, 0x5020)), f_q))
mstore(add(transcript, 0x65e0), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x5020)), f_q))
mstore(add(transcript, 0x6600), addmod(mload(add(transcript, 0x6560)), mload(add(transcript, 0x65c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1000)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x6620), result)        }
mstore(add(transcript, 0x6640), mulmod(mload(add(transcript, 0x6620)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x6660), mulmod(sub(f_q, mload(add(transcript, 0x6640))), mload(add(transcript, 0x5040)), f_q))
mstore(add(transcript, 0x6680), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x5040)), f_q))
mstore(add(transcript, 0x66a0), addmod(mload(add(transcript, 0x6600)), mload(add(transcript, 0x6660)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1020)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x66c0), result)        }
mstore(add(transcript, 0x66e0), mulmod(mload(add(transcript, 0x66c0)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x6700), mulmod(sub(f_q, mload(add(transcript, 0x66e0))), mload(add(transcript, 0x5060)), f_q))
mstore(add(transcript, 0x6720), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x5060)), f_q))
mstore(add(transcript, 0x6740), addmod(mload(add(transcript, 0x66a0)), mload(add(transcript, 0x6700)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1040)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x6760), result)        }
mstore(add(transcript, 0x6780), mulmod(mload(add(transcript, 0x6760)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x67a0), mulmod(sub(f_q, mload(add(transcript, 0x6780))), mload(add(transcript, 0x5080)), f_q))
mstore(add(transcript, 0x67c0), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x5080)), f_q))
mstore(add(transcript, 0x67e0), addmod(mload(add(transcript, 0x6740)), mload(add(transcript, 0x67a0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1060)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x6800), result)        }
mstore(add(transcript, 0x6820), mulmod(mload(add(transcript, 0x6800)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x6840), mulmod(sub(f_q, mload(add(transcript, 0x6820))), mload(add(transcript, 0x50a0)), f_q))
mstore(add(transcript, 0x6860), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x50a0)), f_q))
mstore(add(transcript, 0x6880), addmod(mload(add(transcript, 0x67e0)), mload(add(transcript, 0x6840)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1080)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x68a0), result)        }
mstore(add(transcript, 0x68c0), mulmod(mload(add(transcript, 0x68a0)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x68e0), mulmod(sub(f_q, mload(add(transcript, 0x68c0))), mload(add(transcript, 0x50c0)), f_q))
mstore(add(transcript, 0x6900), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x50c0)), f_q))
mstore(add(transcript, 0x6920), addmod(mload(add(transcript, 0x6880)), mload(add(transcript, 0x68e0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x10a0)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x6940), result)        }
mstore(add(transcript, 0x6960), mulmod(mload(add(transcript, 0x6940)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x6980), mulmod(sub(f_q, mload(add(transcript, 0x6960))), mload(add(transcript, 0x50e0)), f_q))
mstore(add(transcript, 0x69a0), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x50e0)), f_q))
mstore(add(transcript, 0x69c0), addmod(mload(add(transcript, 0x6920)), mload(add(transcript, 0x6980)), f_q))
mstore(add(transcript, 0x69e0), mulmod(mload(add(transcript, 0x43a0)), mload(add(transcript, 0x4ac0)), f_q))
mstore(add(transcript, 0x6a00), mulmod(mload(add(transcript, 0x43c0)), mload(add(transcript, 0x4ac0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x43e0)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x6a20), result)        }
mstore(add(transcript, 0x6a40), mulmod(mload(add(transcript, 0x6a20)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x6a60), mulmod(sub(f_q, mload(add(transcript, 0x6a40))), mload(add(transcript, 0x5100)), f_q))
mstore(add(transcript, 0x6a80), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x5100)), f_q))
mstore(add(transcript, 0x6aa0), mulmod(mload(add(transcript, 0x69e0)), mload(add(transcript, 0x5100)), f_q))
mstore(add(transcript, 0x6ac0), mulmod(mload(add(transcript, 0x6a00)), mload(add(transcript, 0x5100)), f_q))
mstore(add(transcript, 0x6ae0), addmod(mload(add(transcript, 0x69c0)), mload(add(transcript, 0x6a60)), f_q))
{            let result := mulmod(mload(add(transcript, 0xf00)), mload(add(transcript, 0x46a0)), f_q)mstore(add(transcript, 0x6b00), result)        }
mstore(add(transcript, 0x6b20), mulmod(mload(add(transcript, 0x6b00)), mload(add(transcript, 0x4d20)), f_q))
mstore(add(transcript, 0x6b40), mulmod(sub(f_q, mload(add(transcript, 0x6b20))), mload(add(transcript, 0x5120)), f_q))
mstore(add(transcript, 0x6b60), mulmod(mload(add(transcript, 0x57a0)), mload(add(transcript, 0x5120)), f_q))
mstore(add(transcript, 0x6b80), addmod(mload(add(transcript, 0x6ae0)), mload(add(transcript, 0x6b40)), f_q))
mstore(add(transcript, 0x6ba0), mulmod(mload(add(transcript, 0x6b80)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6bc0), mulmod(mload(add(transcript, 0x5820)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6be0), mulmod(mload(add(transcript, 0x58a0)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6c00), mulmod(mload(add(transcript, 0x5940)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6c20), mulmod(mload(add(transcript, 0x59e0)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6c40), mulmod(mload(add(transcript, 0x5a80)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6c60), mulmod(mload(add(transcript, 0x5b20)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6c80), mulmod(mload(add(transcript, 0x5ca0)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6ca0), mulmod(mload(add(transcript, 0x5d20)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6cc0), mulmod(mload(add(transcript, 0x5dc0)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6ce0), mulmod(mload(add(transcript, 0x5e60)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6d00), mulmod(mload(add(transcript, 0x5f00)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6d20), mulmod(mload(add(transcript, 0x5fa0)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6d40), mulmod(mload(add(transcript, 0x6040)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6d60), mulmod(mload(add(transcript, 0x60e0)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6d80), mulmod(mload(add(transcript, 0x6180)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6da0), mulmod(mload(add(transcript, 0x6220)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6dc0), mulmod(mload(add(transcript, 0x62c0)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6de0), mulmod(mload(add(transcript, 0x6360)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6e00), mulmod(mload(add(transcript, 0x6400)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6e20), mulmod(mload(add(transcript, 0x64a0)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6e40), mulmod(mload(add(transcript, 0x6540)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6e60), mulmod(mload(add(transcript, 0x65e0)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6e80), mulmod(mload(add(transcript, 0x6680)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6ea0), mulmod(mload(add(transcript, 0x6720)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6ec0), mulmod(mload(add(transcript, 0x67c0)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6ee0), mulmod(mload(add(transcript, 0x6860)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6f00), mulmod(mload(add(transcript, 0x6900)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6f20), mulmod(mload(add(transcript, 0x69a0)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6f40), mulmod(mload(add(transcript, 0x6a80)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6f60), mulmod(mload(add(transcript, 0x6aa0)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6f80), mulmod(mload(add(transcript, 0x6ac0)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6fa0), mulmod(mload(add(transcript, 0x6b60)), mload(add(transcript, 0x1500)), f_q))
mstore(add(transcript, 0x6fc0), addmod(mload(add(transcript, 0x56a0)), mload(add(transcript, 0x6ba0)), f_q))
mstore(add(transcript, 0x6fe0), mulmod(1, mload(add(transcript, 0x4b00)), f_q))
{            let result := mulmod(mload(add(transcript, 0x10c0)), mload(add(transcript, 0x46c0)), f_q)result := addmod(mulmod(mload(add(transcript, 0x10e0)), mload(add(transcript, 0x46e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x1100)), mload(add(transcript, 0x4700)), f_q), result, f_q)mstore(add(transcript, 0x7000), result)        }
mstore(add(transcript, 0x7020), mulmod(mload(add(transcript, 0x7000)), mload(add(transcript, 0x4d40)), f_q))
mstore(add(transcript, 0x7040), mulmod(sub(f_q, mload(add(transcript, 0x7020))), 1, f_q))
mstore(add(transcript, 0x7060), mulmod(mload(add(transcript, 0x6fe0)), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0x1120)), mload(add(transcript, 0x46c0)), f_q)result := addmod(mulmod(mload(add(transcript, 0x1140)), mload(add(transcript, 0x46e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x1160)), mload(add(transcript, 0x4700)), f_q), result, f_q)mstore(add(transcript, 0x7080), result)        }
mstore(add(transcript, 0x70a0), mulmod(mload(add(transcript, 0x7080)), mload(add(transcript, 0x4d40)), f_q))
mstore(add(transcript, 0x70c0), mulmod(sub(f_q, mload(add(transcript, 0x70a0))), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x70e0), mulmod(mload(add(transcript, 0x6fe0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x7100), addmod(mload(add(transcript, 0x7040)), mload(add(transcript, 0x70c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1180)), mload(add(transcript, 0x46c0)), f_q)result := addmod(mulmod(mload(add(transcript, 0x11a0)), mload(add(transcript, 0x46e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x11c0)), mload(add(transcript, 0x4700)), f_q), result, f_q)mstore(add(transcript, 0x7120), result)        }
mstore(add(transcript, 0x7140), mulmod(mload(add(transcript, 0x7120)), mload(add(transcript, 0x4d40)), f_q))
mstore(add(transcript, 0x7160), mulmod(sub(f_q, mload(add(transcript, 0x7140))), mload(add(transcript, 0x4da0)), f_q))
mstore(add(transcript, 0x7180), mulmod(mload(add(transcript, 0x6fe0)), mload(add(transcript, 0x4da0)), f_q))
mstore(add(transcript, 0x71a0), addmod(mload(add(transcript, 0x7100)), mload(add(transcript, 0x7160)), f_q))
{            let result := mulmod(mload(add(transcript, 0x11e0)), mload(add(transcript, 0x46c0)), f_q)result := addmod(mulmod(mload(add(transcript, 0x1200)), mload(add(transcript, 0x46e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x1220)), mload(add(transcript, 0x4700)), f_q), result, f_q)mstore(add(transcript, 0x71c0), result)        }
mstore(add(transcript, 0x71e0), mulmod(mload(add(transcript, 0x71c0)), mload(add(transcript, 0x4d40)), f_q))
mstore(add(transcript, 0x7200), mulmod(sub(f_q, mload(add(transcript, 0x71e0))), mload(add(transcript, 0x4dc0)), f_q))
mstore(add(transcript, 0x7220), mulmod(mload(add(transcript, 0x6fe0)), mload(add(transcript, 0x4dc0)), f_q))
mstore(add(transcript, 0x7240), addmod(mload(add(transcript, 0x71a0)), mload(add(transcript, 0x7200)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1240)), mload(add(transcript, 0x46c0)), f_q)result := addmod(mulmod(mload(add(transcript, 0x1260)), mload(add(transcript, 0x46e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x1280)), mload(add(transcript, 0x4700)), f_q), result, f_q)mstore(add(transcript, 0x7260), result)        }
mstore(add(transcript, 0x7280), mulmod(mload(add(transcript, 0x7260)), mload(add(transcript, 0x4d40)), f_q))
mstore(add(transcript, 0x72a0), mulmod(sub(f_q, mload(add(transcript, 0x7280))), mload(add(transcript, 0x4de0)), f_q))
mstore(add(transcript, 0x72c0), mulmod(mload(add(transcript, 0x6fe0)), mload(add(transcript, 0x4de0)), f_q))
mstore(add(transcript, 0x72e0), addmod(mload(add(transcript, 0x7240)), mload(add(transcript, 0x72a0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x12a0)), mload(add(transcript, 0x46c0)), f_q)result := addmod(mulmod(mload(add(transcript, 0x12c0)), mload(add(transcript, 0x46e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x12e0)), mload(add(transcript, 0x4700)), f_q), result, f_q)mstore(add(transcript, 0x7300), result)        }
mstore(add(transcript, 0x7320), mulmod(mload(add(transcript, 0x7300)), mload(add(transcript, 0x4d40)), f_q))
mstore(add(transcript, 0x7340), mulmod(sub(f_q, mload(add(transcript, 0x7320))), mload(add(transcript, 0x4e00)), f_q))
mstore(add(transcript, 0x7360), mulmod(mload(add(transcript, 0x6fe0)), mload(add(transcript, 0x4e00)), f_q))
mstore(add(transcript, 0x7380), addmod(mload(add(transcript, 0x72e0)), mload(add(transcript, 0x7340)), f_q))
mstore(add(transcript, 0x73a0), mulmod(mload(add(transcript, 0x7380)), mload(add(transcript, 0x5160)), f_q))
mstore(add(transcript, 0x73c0), mulmod(mload(add(transcript, 0x7060)), mload(add(transcript, 0x5160)), f_q))
mstore(add(transcript, 0x73e0), mulmod(mload(add(transcript, 0x70e0)), mload(add(transcript, 0x5160)), f_q))
mstore(add(transcript, 0x7400), mulmod(mload(add(transcript, 0x7180)), mload(add(transcript, 0x5160)), f_q))
mstore(add(transcript, 0x7420), mulmod(mload(add(transcript, 0x7220)), mload(add(transcript, 0x5160)), f_q))
mstore(add(transcript, 0x7440), mulmod(mload(add(transcript, 0x72c0)), mload(add(transcript, 0x5160)), f_q))
mstore(add(transcript, 0x7460), mulmod(mload(add(transcript, 0x7360)), mload(add(transcript, 0x5160)), f_q))
mstore(add(transcript, 0x7480), addmod(mload(add(transcript, 0x6fc0)), mload(add(transcript, 0x73a0)), f_q))
mstore(add(transcript, 0x74a0), mulmod(1, mload(add(transcript, 0x4b40)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1300)), mload(add(transcript, 0x4740)), f_q)result := addmod(mulmod(mload(add(transcript, 0x1320)), mload(add(transcript, 0x4760)), f_q), result, f_q)mstore(add(transcript, 0x74c0), result)        }
mstore(add(transcript, 0x74e0), mulmod(mload(add(transcript, 0x74c0)), mload(add(transcript, 0x4d60)), f_q))
mstore(add(transcript, 0x7500), mulmod(sub(f_q, mload(add(transcript, 0x74e0))), 1, f_q))
mstore(add(transcript, 0x7520), mulmod(mload(add(transcript, 0x74a0)), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0x1340)), mload(add(transcript, 0x4740)), f_q)result := addmod(mulmod(mload(add(transcript, 0x1360)), mload(add(transcript, 0x4760)), f_q), result, f_q)mstore(add(transcript, 0x7540), result)        }
mstore(add(transcript, 0x7560), mulmod(mload(add(transcript, 0x7540)), mload(add(transcript, 0x4d60)), f_q))
mstore(add(transcript, 0x7580), mulmod(sub(f_q, mload(add(transcript, 0x7560))), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x75a0), mulmod(mload(add(transcript, 0x74a0)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x75c0), addmod(mload(add(transcript, 0x7500)), mload(add(transcript, 0x7580)), f_q))
{            let result := mulmod(mload(add(transcript, 0x13e0)), mload(add(transcript, 0x4740)), f_q)result := addmod(mulmod(mload(add(transcript, 0x1400)), mload(add(transcript, 0x4760)), f_q), result, f_q)mstore(add(transcript, 0x75e0), result)        }
mstore(add(transcript, 0x7600), mulmod(mload(add(transcript, 0x75e0)), mload(add(transcript, 0x4d60)), f_q))
mstore(add(transcript, 0x7620), mulmod(sub(f_q, mload(add(transcript, 0x7600))), mload(add(transcript, 0x4da0)), f_q))
mstore(add(transcript, 0x7640), mulmod(mload(add(transcript, 0x74a0)), mload(add(transcript, 0x4da0)), f_q))
mstore(add(transcript, 0x7660), addmod(mload(add(transcript, 0x75c0)), mload(add(transcript, 0x7620)), f_q))
mstore(add(transcript, 0x7680), mulmod(mload(add(transcript, 0x7660)), mload(add(transcript, 0x5180)), f_q))
mstore(add(transcript, 0x76a0), mulmod(mload(add(transcript, 0x7520)), mload(add(transcript, 0x5180)), f_q))
mstore(add(transcript, 0x76c0), mulmod(mload(add(transcript, 0x75a0)), mload(add(transcript, 0x5180)), f_q))
mstore(add(transcript, 0x76e0), mulmod(mload(add(transcript, 0x7640)), mload(add(transcript, 0x5180)), f_q))
mstore(add(transcript, 0x7700), addmod(mload(add(transcript, 0x7480)), mload(add(transcript, 0x7680)), f_q))
mstore(add(transcript, 0x7720), mulmod(1, mload(add(transcript, 0x4b80)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1380)), mload(add(transcript, 0x4780)), f_q)result := addmod(mulmod(mload(add(transcript, 0x13a0)), mload(add(transcript, 0x47a0)), f_q), result, f_q)mstore(add(transcript, 0x7740), result)        }
mstore(add(transcript, 0x7760), mulmod(mload(add(transcript, 0x7740)), mload(add(transcript, 0x4d80)), f_q))
mstore(add(transcript, 0x7780), mulmod(sub(f_q, mload(add(transcript, 0x7760))), 1, f_q))
mstore(add(transcript, 0x77a0), mulmod(mload(add(transcript, 0x7720)), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0x1420)), mload(add(transcript, 0x4780)), f_q)result := addmod(mulmod(mload(add(transcript, 0x1440)), mload(add(transcript, 0x47a0)), f_q), result, f_q)mstore(add(transcript, 0x77c0), result)        }
mstore(add(transcript, 0x77e0), mulmod(mload(add(transcript, 0x77c0)), mload(add(transcript, 0x4d80)), f_q))
mstore(add(transcript, 0x7800), mulmod(sub(f_q, mload(add(transcript, 0x77e0))), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x7820), mulmod(mload(add(transcript, 0x7720)), mload(add(transcript, 0x14a0)), f_q))
mstore(add(transcript, 0x7840), addmod(mload(add(transcript, 0x7780)), mload(add(transcript, 0x7800)), f_q))
mstore(add(transcript, 0x7860), mulmod(mload(add(transcript, 0x7840)), mload(add(transcript, 0x51a0)), f_q))
mstore(add(transcript, 0x7880), mulmod(mload(add(transcript, 0x77a0)), mload(add(transcript, 0x51a0)), f_q))
mstore(add(transcript, 0x78a0), mulmod(mload(add(transcript, 0x7820)), mload(add(transcript, 0x51a0)), f_q))
mstore(add(transcript, 0x78c0), addmod(mload(add(transcript, 0x7700)), mload(add(transcript, 0x7860)), f_q))
mstore(add(transcript, 0x78e0), mulmod(1, mload(add(transcript, 0x4680)), f_q))
mstore(add(transcript, 0x7900), mulmod(1, mload(add(transcript, 0x15a0)), f_q))
mstore(add(transcript, 0x7920), 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(add(transcript, 0x7940), 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(add(transcript, 0x7960), mload(add(transcript, 0x78c0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7920), 0x60, add(transcript, 0x7920), 0x40), 1), success)
mstore(add(transcript, 0x7980), mload(add(transcript, 0x7920)))
                    mstore(add(transcript, 0x79a0), mload(add(transcript, 0x7940)))
mstore(add(transcript, 0x79c0), mload(add(transcript, 0x60)))
                    mstore(add(transcript, 0x79e0), mload(add(transcript, 0x80)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7980), 0x80, add(transcript, 0x7980), 0x40), 1), success)
mstore(add(transcript, 0x7a00), mload(add(transcript, 0xa0)))
                    mstore(add(transcript, 0x7a20), mload(add(transcript, 0xc0)))
mstore(add(transcript, 0x7a40), mload(add(transcript, 0x56c0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7a00), 0x60, add(transcript, 0x7a00), 0x40), 1), success)
mstore(add(transcript, 0x7a60), mload(add(transcript, 0x7980)))
                    mstore(add(transcript, 0x7a80), mload(add(transcript, 0x79a0)))
mstore(add(transcript, 0x7aa0), mload(add(transcript, 0x7a00)))
                    mstore(add(transcript, 0x7ac0), mload(add(transcript, 0x7a20)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7a60), 0x80, add(transcript, 0x7a60), 0x40), 1), success)
mstore(add(transcript, 0x7ae0), mload(add(transcript, 0xe0)))
                    mstore(add(transcript, 0x7b00), mload(add(transcript, 0x100)))
mstore(add(transcript, 0x7b20), mload(add(transcript, 0x56e0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7ae0), 0x60, add(transcript, 0x7ae0), 0x40), 1), success)
mstore(add(transcript, 0x7b40), mload(add(transcript, 0x7a60)))
                    mstore(add(transcript, 0x7b60), mload(add(transcript, 0x7a80)))
mstore(add(transcript, 0x7b80), mload(add(transcript, 0x7ae0)))
                    mstore(add(transcript, 0x7ba0), mload(add(transcript, 0x7b00)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7b40), 0x80, add(transcript, 0x7b40), 0x40), 1), success)
mstore(add(transcript, 0x7bc0), mload(add(transcript, 0x120)))
                    mstore(add(transcript, 0x7be0), mload(add(transcript, 0x140)))
mstore(add(transcript, 0x7c00), mload(add(transcript, 0x5700)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7bc0), 0x60, add(transcript, 0x7bc0), 0x40), 1), success)
mstore(add(transcript, 0x7c20), mload(add(transcript, 0x7b40)))
                    mstore(add(transcript, 0x7c40), mload(add(transcript, 0x7b60)))
mstore(add(transcript, 0x7c60), mload(add(transcript, 0x7bc0)))
                    mstore(add(transcript, 0x7c80), mload(add(transcript, 0x7be0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7c20), 0x80, add(transcript, 0x7c20), 0x40), 1), success)
mstore(add(transcript, 0x7ca0), mload(add(transcript, 0x160)))
                    mstore(add(transcript, 0x7cc0), mload(add(transcript, 0x180)))
mstore(add(transcript, 0x7ce0), mload(add(transcript, 0x5720)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7ca0), 0x60, add(transcript, 0x7ca0), 0x40), 1), success)
mstore(add(transcript, 0x7d00), mload(add(transcript, 0x7c20)))
                    mstore(add(transcript, 0x7d20), mload(add(transcript, 0x7c40)))
mstore(add(transcript, 0x7d40), mload(add(transcript, 0x7ca0)))
                    mstore(add(transcript, 0x7d60), mload(add(transcript, 0x7cc0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7d00), 0x80, add(transcript, 0x7d00), 0x40), 1), success)
mstore(add(transcript, 0x7d80), mload(add(transcript, 0x1a0)))
                    mstore(add(transcript, 0x7da0), mload(add(transcript, 0x1c0)))
mstore(add(transcript, 0x7dc0), mload(add(transcript, 0x5740)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7d80), 0x60, add(transcript, 0x7d80), 0x40), 1), success)
mstore(add(transcript, 0x7de0), mload(add(transcript, 0x7d00)))
                    mstore(add(transcript, 0x7e00), mload(add(transcript, 0x7d20)))
mstore(add(transcript, 0x7e20), mload(add(transcript, 0x7d80)))
                    mstore(add(transcript, 0x7e40), mload(add(transcript, 0x7da0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7de0), 0x80, add(transcript, 0x7de0), 0x40), 1), success)
mstore(add(transcript, 0x7e60), mload(add(transcript, 0x1e0)))
                    mstore(add(transcript, 0x7e80), mload(add(transcript, 0x200)))
mstore(add(transcript, 0x7ea0), mload(add(transcript, 0x5760)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7e60), 0x60, add(transcript, 0x7e60), 0x40), 1), success)
mstore(add(transcript, 0x7ec0), mload(add(transcript, 0x7de0)))
                    mstore(add(transcript, 0x7ee0), mload(add(transcript, 0x7e00)))
mstore(add(transcript, 0x7f00), mload(add(transcript, 0x7e60)))
                    mstore(add(transcript, 0x7f20), mload(add(transcript, 0x7e80)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7ec0), 0x80, add(transcript, 0x7ec0), 0x40), 1), success)
mstore(add(transcript, 0x7f40), mload(add(transcript, 0x220)))
                    mstore(add(transcript, 0x7f60), mload(add(transcript, 0x240)))
mstore(add(transcript, 0x7f80), mload(add(transcript, 0x5780)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7f40), 0x60, add(transcript, 0x7f40), 0x40), 1), success)
mstore(add(transcript, 0x7fa0), mload(add(transcript, 0x7ec0)))
                    mstore(add(transcript, 0x7fc0), mload(add(transcript, 0x7ee0)))
mstore(add(transcript, 0x7fe0), mload(add(transcript, 0x7f40)))
                    mstore(add(transcript, 0x8000), mload(add(transcript, 0x7f60)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7fa0), 0x80, add(transcript, 0x7fa0), 0x40), 1), success)
mstore(add(transcript, 0x8020), mload(add(transcript, 0x260)))
                    mstore(add(transcript, 0x8040), mload(add(transcript, 0x280)))
mstore(add(transcript, 0x8060), mload(add(transcript, 0x6bc0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8020), 0x60, add(transcript, 0x8020), 0x40), 1), success)
mstore(add(transcript, 0x8080), mload(add(transcript, 0x7fa0)))
                    mstore(add(transcript, 0x80a0), mload(add(transcript, 0x7fc0)))
mstore(add(transcript, 0x80c0), mload(add(transcript, 0x8020)))
                    mstore(add(transcript, 0x80e0), mload(add(transcript, 0x8040)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8080), 0x80, add(transcript, 0x8080), 0x40), 1), success)
mstore(add(transcript, 0x8100), mload(add(transcript, 0x2a0)))
                    mstore(add(transcript, 0x8120), mload(add(transcript, 0x2c0)))
mstore(add(transcript, 0x8140), mload(add(transcript, 0x6be0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8100), 0x60, add(transcript, 0x8100), 0x40), 1), success)
mstore(add(transcript, 0x8160), mload(add(transcript, 0x8080)))
                    mstore(add(transcript, 0x8180), mload(add(transcript, 0x80a0)))
mstore(add(transcript, 0x81a0), mload(add(transcript, 0x8100)))
                    mstore(add(transcript, 0x81c0), mload(add(transcript, 0x8120)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8160), 0x80, add(transcript, 0x8160), 0x40), 1), success)
mstore(add(transcript, 0x81e0), mload(add(transcript, 0x2e0)))
                    mstore(add(transcript, 0x8200), mload(add(transcript, 0x300)))
mstore(add(transcript, 0x8220), mload(add(transcript, 0x6c00)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x81e0), 0x60, add(transcript, 0x81e0), 0x40), 1), success)
mstore(add(transcript, 0x8240), mload(add(transcript, 0x8160)))
                    mstore(add(transcript, 0x8260), mload(add(transcript, 0x8180)))
mstore(add(transcript, 0x8280), mload(add(transcript, 0x81e0)))
                    mstore(add(transcript, 0x82a0), mload(add(transcript, 0x8200)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8240), 0x80, add(transcript, 0x8240), 0x40), 1), success)
mstore(add(transcript, 0x82c0), mload(add(transcript, 0x3c0)))
                    mstore(add(transcript, 0x82e0), mload(add(transcript, 0x3e0)))
mstore(add(transcript, 0x8300), mload(add(transcript, 0x6c20)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x82c0), 0x60, add(transcript, 0x82c0), 0x40), 1), success)
mstore(add(transcript, 0x8320), mload(add(transcript, 0x8240)))
                    mstore(add(transcript, 0x8340), mload(add(transcript, 0x8260)))
mstore(add(transcript, 0x8360), mload(add(transcript, 0x82c0)))
                    mstore(add(transcript, 0x8380), mload(add(transcript, 0x82e0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8320), 0x80, add(transcript, 0x8320), 0x40), 1), success)
mstore(add(transcript, 0x83a0), mload(add(transcript, 0x440)))
                    mstore(add(transcript, 0x83c0), mload(add(transcript, 0x460)))
mstore(add(transcript, 0x83e0), mload(add(transcript, 0x6c40)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x83a0), 0x60, add(transcript, 0x83a0), 0x40), 1), success)
mstore(add(transcript, 0x8400), mload(add(transcript, 0x8320)))
                    mstore(add(transcript, 0x8420), mload(add(transcript, 0x8340)))
mstore(add(transcript, 0x8440), mload(add(transcript, 0x83a0)))
                    mstore(add(transcript, 0x8460), mload(add(transcript, 0x83c0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8400), 0x80, add(transcript, 0x8400), 0x40), 1), success)
mstore(add(transcript, 0x8480), 0x2db8e517247f6f211cbd5fe61e41329e5c57c30fe435d68285e353a89695979b)
                    mstore(add(transcript, 0x84a0), 0x0f443f98103d5419c8bf2631b01ace107f68412461c55d7dc0a6f3ca5eb4805b)
mstore(add(transcript, 0x84c0), mload(add(transcript, 0x6c60)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8480), 0x60, add(transcript, 0x8480), 0x40), 1), success)
mstore(add(transcript, 0x84e0), mload(add(transcript, 0x8400)))
                    mstore(add(transcript, 0x8500), mload(add(transcript, 0x8420)))
mstore(add(transcript, 0x8520), mload(add(transcript, 0x8480)))
                    mstore(add(transcript, 0x8540), mload(add(transcript, 0x84a0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x84e0), 0x80, add(transcript, 0x84e0), 0x40), 1), success)
mstore(add(transcript, 0x8560), 0x0a450e58173ff2752ee9abe341727e6093b146a8a35074d2fa963267835d70f9)
                    mstore(add(transcript, 0x8580), 0x04936dcc176315c74e265dae9285d66a9f001296db7cb0b2b57103aa46af2a4c)
mstore(add(transcript, 0x85a0), mload(add(transcript, 0x6c80)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8560), 0x60, add(transcript, 0x8560), 0x40), 1), success)
mstore(add(transcript, 0x85c0), mload(add(transcript, 0x84e0)))
                    mstore(add(transcript, 0x85e0), mload(add(transcript, 0x8500)))
mstore(add(transcript, 0x8600), mload(add(transcript, 0x8560)))
                    mstore(add(transcript, 0x8620), mload(add(transcript, 0x8580)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x85c0), 0x80, add(transcript, 0x85c0), 0x40), 1), success)
mstore(add(transcript, 0x8640), 0x2d344f5d4336a908ee5dd0f1fb43c63ce9749d783a20389bb050a980e854c751)
                    mstore(add(transcript, 0x8660), 0x15a784285268e22236d29460a53740727906c70d30ce4b1fb20c59e8ed3428c4)
mstore(add(transcript, 0x8680), mload(add(transcript, 0x6ca0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8640), 0x60, add(transcript, 0x8640), 0x40), 1), success)
mstore(add(transcript, 0x86a0), mload(add(transcript, 0x85c0)))
                    mstore(add(transcript, 0x86c0), mload(add(transcript, 0x85e0)))
mstore(add(transcript, 0x86e0), mload(add(transcript, 0x8640)))
                    mstore(add(transcript, 0x8700), mload(add(transcript, 0x8660)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x86a0), 0x80, add(transcript, 0x86a0), 0x40), 1), success)
mstore(add(transcript, 0x8720), 0x26a55453d4c0aad5e2887f1681e0888ba725fa8f852d2ff0af68f7878b0bfd86)
                    mstore(add(transcript, 0x8740), 0x1a1e3bf47f3a27774890268c88fb53846e67ddef289315201a282a2cbd932932)
mstore(add(transcript, 0x8760), mload(add(transcript, 0x6cc0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8720), 0x60, add(transcript, 0x8720), 0x40), 1), success)
mstore(add(transcript, 0x8780), mload(add(transcript, 0x86a0)))
                    mstore(add(transcript, 0x87a0), mload(add(transcript, 0x86c0)))
mstore(add(transcript, 0x87c0), mload(add(transcript, 0x8720)))
                    mstore(add(transcript, 0x87e0), mload(add(transcript, 0x8740)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8780), 0x80, add(transcript, 0x8780), 0x40), 1), success)
mstore(add(transcript, 0x8800), 0x0edd0f7b834170cc02fae788da77809d66d1c32379956003dcdbf48a4747dbdd)
                    mstore(add(transcript, 0x8820), 0x2d63fb8e9eae7e60bb96db4674c4e3582e44af385ee8784e263b7aeaaa6e138d)
mstore(add(transcript, 0x8840), mload(add(transcript, 0x6ce0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8800), 0x60, add(transcript, 0x8800), 0x40), 1), success)
mstore(add(transcript, 0x8860), mload(add(transcript, 0x8780)))
                    mstore(add(transcript, 0x8880), mload(add(transcript, 0x87a0)))
mstore(add(transcript, 0x88a0), mload(add(transcript, 0x8800)))
                    mstore(add(transcript, 0x88c0), mload(add(transcript, 0x8820)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8860), 0x80, add(transcript, 0x8860), 0x40), 1), success)
mstore(add(transcript, 0x88e0), 0x0a5e3afbca7369eb4ebaaa038419e41cdf8bc90a827f98245769d127193df5aa)
                    mstore(add(transcript, 0x8900), 0x028e9ca6bbf052c9121dc4535c58b5f5eb162e6244681484b639cb529b12b410)
mstore(add(transcript, 0x8920), mload(add(transcript, 0x6d00)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x88e0), 0x60, add(transcript, 0x88e0), 0x40), 1), success)
mstore(add(transcript, 0x8940), mload(add(transcript, 0x8860)))
                    mstore(add(transcript, 0x8960), mload(add(transcript, 0x8880)))
mstore(add(transcript, 0x8980), mload(add(transcript, 0x88e0)))
                    mstore(add(transcript, 0x89a0), mload(add(transcript, 0x8900)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8940), 0x80, add(transcript, 0x8940), 0x40), 1), success)
mstore(add(transcript, 0x89c0), 0x14d5e95c96b92e6cb6361ab3f374820f1f057f73d76637e41a7527b16d6ebe5e)
                    mstore(add(transcript, 0x89e0), 0x04233bb3a216d6c8f2a026093e14f1c99b9882a8d4733353d1c336aff388781d)
mstore(add(transcript, 0x8a00), mload(add(transcript, 0x6d20)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x89c0), 0x60, add(transcript, 0x89c0), 0x40), 1), success)
mstore(add(transcript, 0x8a20), mload(add(transcript, 0x8940)))
                    mstore(add(transcript, 0x8a40), mload(add(transcript, 0x8960)))
mstore(add(transcript, 0x8a60), mload(add(transcript, 0x89c0)))
                    mstore(add(transcript, 0x8a80), mload(add(transcript, 0x89e0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8a20), 0x80, add(transcript, 0x8a20), 0x40), 1), success)
mstore(add(transcript, 0x8aa0), 0x2a45e42be31b2f23acdd2b3fb5a2caf868a26fb05f85a789d023815e492c266e)
                    mstore(add(transcript, 0x8ac0), 0x1ca4022415e1f6ee7ee0d9fc855d9ae83cfc4ab239f8cca39ab886977f28ef95)
mstore(add(transcript, 0x8ae0), mload(add(transcript, 0x6d40)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8aa0), 0x60, add(transcript, 0x8aa0), 0x40), 1), success)
mstore(add(transcript, 0x8b00), mload(add(transcript, 0x8a20)))
                    mstore(add(transcript, 0x8b20), mload(add(transcript, 0x8a40)))
mstore(add(transcript, 0x8b40), mload(add(transcript, 0x8aa0)))
                    mstore(add(transcript, 0x8b60), mload(add(transcript, 0x8ac0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8b00), 0x80, add(transcript, 0x8b00), 0x40), 1), success)
mstore(add(transcript, 0x8b80), 0x0cbf3fbb47dac814640a23365c4841ad3e734302f6d5b126e444ef8ffdb5f103)
                    mstore(add(transcript, 0x8ba0), 0x0aa31d0ff9ceb51710f982ed95afc2ab9498c517cdfe5e2febaa6afb72b25743)
mstore(add(transcript, 0x8bc0), mload(add(transcript, 0x6d60)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8b80), 0x60, add(transcript, 0x8b80), 0x40), 1), success)
mstore(add(transcript, 0x8be0), mload(add(transcript, 0x8b00)))
                    mstore(add(transcript, 0x8c00), mload(add(transcript, 0x8b20)))
mstore(add(transcript, 0x8c20), mload(add(transcript, 0x8b80)))
                    mstore(add(transcript, 0x8c40), mload(add(transcript, 0x8ba0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8be0), 0x80, add(transcript, 0x8be0), 0x40), 1), success)
mstore(add(transcript, 0x8c60), 0x1f449f3ccac35d63f84bfc0a730b16c43002f2790408a7a99f853941bebbd7df)
                    mstore(add(transcript, 0x8c80), 0x1d69c831a8aa3d4887b94b48f61a6d6d8d5f7ce5fb244ba3e3618cf7e1a3929e)
mstore(add(transcript, 0x8ca0), mload(add(transcript, 0x6d80)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8c60), 0x60, add(transcript, 0x8c60), 0x40), 1), success)
mstore(add(transcript, 0x8cc0), mload(add(transcript, 0x8be0)))
                    mstore(add(transcript, 0x8ce0), mload(add(transcript, 0x8c00)))
mstore(add(transcript, 0x8d00), mload(add(transcript, 0x8c60)))
                    mstore(add(transcript, 0x8d20), mload(add(transcript, 0x8c80)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8cc0), 0x80, add(transcript, 0x8cc0), 0x40), 1), success)
mstore(add(transcript, 0x8d40), 0x2fee2eb3d98a27f01b3dadf82b8250d5563349134fb15c22e444d565eba79a11)
                    mstore(add(transcript, 0x8d60), 0x12a963f429c646b3ca4752e6f97a5cd17b9d185c7f548d34c166352c8d296674)
mstore(add(transcript, 0x8d80), mload(add(transcript, 0x6da0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8d40), 0x60, add(transcript, 0x8d40), 0x40), 1), success)
mstore(add(transcript, 0x8da0), mload(add(transcript, 0x8cc0)))
                    mstore(add(transcript, 0x8dc0), mload(add(transcript, 0x8ce0)))
mstore(add(transcript, 0x8de0), mload(add(transcript, 0x8d40)))
                    mstore(add(transcript, 0x8e00), mload(add(transcript, 0x8d60)))

        }}
        bytes memory transcriptBytes = abi.encode(transcript);
        // bytes32[] memory newTranscript = new bytes32[](1351);
        // for(uint i=0; i<_transcript.length; i++) {
        //     newTranscript[i] = transcript[i];
        // }
        // require(newTranscript.length == 1351, "newTranscript length is not 1351");
        return (success, transcriptBytes);
    } 
}
