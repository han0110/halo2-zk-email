// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;
import "../VerifierFuncAbst.sol";

contract VerifierFunc1 is VerifierFuncAbst {
    function verifyPartial(
        uint256[] memory pubInputs,
        bytes memory proof,
        bool success,
        bytes32[] memory _transcript
    ) public view override returns (bool, bytes32[] memory) {
        bytes32[1107] memory transcript;
        for(uint i=0; i<_transcript.length; i++) {
            transcript[i] = _transcript[i];
        }
        assembly {{
            
            let f_p
            := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let
                f_q
            := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid {
                {
                    let x_lt_p := lt(
                        x,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let y_lt_p := lt(
                        y,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let x_is_zero := eq(x, 0)
                    let y_is_zero := eq(y, 0)
                    let x_or_y_is_zero := or(x_is_zero, y_is_zero)
                    let x_and_y_is_not_zero := not(x_or_y_is_zero)
                    valid := and(x_and_y_is_not_zero, valid)
                }
                {
                    let y_square := mulmod(
                        y,
                        y,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let x_square := mulmod(
                        x,
                        x,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let x_cube := mulmod(
                        x_square,
                        x,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let x_cube_plus_3 := addmod(
                        x_cube,
                        3,
                        0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    )
                    let y_square_eq_x_cube_plus_3 := eq(x_cube_plus_3, y_square)
                    valid := and(y_square_eq_x_cube_plus_3, valid)
                }
            }
    mstore(add(transcript, 0x4620), mulmod(mload(add(transcript, 0x4600)), mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x4640), mulmod(mload(add(transcript, 0x4620)), mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x4660), mulmod(mload(add(transcript, 0x4640)), mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x4680), mulmod(mload(add(transcript, 0x4660)), mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x46a0), mulmod(mload(add(transcript, 0x4680)), mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x46c0), mulmod(mload(add(transcript, 0x46a0)), mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x46e0), mulmod(mload(add(transcript, 0x46c0)), mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x4700), mulmod(mload(add(transcript, 0x46e0)), mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x4720), mulmod(mload(add(transcript, 0x1180)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x4740), mulmod(mload(add(transcript, 0x4720)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x4760), mulmod(mload(add(transcript, 0x4740)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x4780), mulmod(mload(add(transcript, 0x4760)), mload(add(transcript, 0x1180)), f_q))
{            let result := mulmod(mload(add(transcript, 0x7e0)), mload(add(transcript, 0x3ca0)), f_q)result := addmod(mulmod(mload(add(transcript, 0x800)), mload(add(transcript, 0x3cc0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x820)), mload(add(transcript, 0x3ce0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x840)), mload(add(transcript, 0x3d00)), f_q), result, f_q)mstore(add(transcript, 0x47a0), result)        }
mstore(add(transcript, 0x47c0), mulmod(mload(add(transcript, 0x47a0)), mload(add(transcript, 0x41a0)), f_q))
mstore(add(transcript, 0x47e0), mulmod(sub(f_q, mload(add(transcript, 0x47c0))), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0x860)), mload(add(transcript, 0x3ca0)), f_q)result := addmod(mulmod(mload(add(transcript, 0x880)), mload(add(transcript, 0x3cc0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x8a0)), mload(add(transcript, 0x3ce0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x8c0)), mload(add(transcript, 0x3d00)), f_q), result, f_q)mstore(add(transcript, 0x4800), result)        }
mstore(add(transcript, 0x4820), mulmod(mload(add(transcript, 0x4800)), mload(add(transcript, 0x41a0)), f_q))
mstore(add(transcript, 0x4840), mulmod(sub(f_q, mload(add(transcript, 0x4820))), mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x4860), mulmod(1, mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x4880), addmod(mload(add(transcript, 0x47e0)), mload(add(transcript, 0x4840)), f_q))
{            let result := mulmod(mload(add(transcript, 0x8e0)), mload(add(transcript, 0x3ca0)), f_q)result := addmod(mulmod(mload(add(transcript, 0x900)), mload(add(transcript, 0x3cc0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x920)), mload(add(transcript, 0x3ce0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x940)), mload(add(transcript, 0x3d00)), f_q), result, f_q)mstore(add(transcript, 0x48a0), result)        }
mstore(add(transcript, 0x48c0), mulmod(mload(add(transcript, 0x48a0)), mload(add(transcript, 0x41a0)), f_q))
mstore(add(transcript, 0x48e0), mulmod(sub(f_q, mload(add(transcript, 0x48c0))), mload(add(transcript, 0x44a0)), f_q))
mstore(add(transcript, 0x4900), mulmod(1, mload(add(transcript, 0x44a0)), f_q))
mstore(add(transcript, 0x4920), addmod(mload(add(transcript, 0x4880)), mload(add(transcript, 0x48e0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x960)), mload(add(transcript, 0x3ca0)), f_q)result := addmod(mulmod(mload(add(transcript, 0x980)), mload(add(transcript, 0x3cc0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x9a0)), mload(add(transcript, 0x3ce0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x9c0)), mload(add(transcript, 0x3d00)), f_q), result, f_q)mstore(add(transcript, 0x4940), result)        }
mstore(add(transcript, 0x4960), mulmod(mload(add(transcript, 0x4940)), mload(add(transcript, 0x41a0)), f_q))
mstore(add(transcript, 0x4980), mulmod(sub(f_q, mload(add(transcript, 0x4960))), mload(add(transcript, 0x44c0)), f_q))
mstore(add(transcript, 0x49a0), mulmod(1, mload(add(transcript, 0x44c0)), f_q))
mstore(add(transcript, 0x49c0), addmod(mload(add(transcript, 0x4920)), mload(add(transcript, 0x4980)), f_q))
{            let result := mulmod(mload(add(transcript, 0x9e0)), mload(add(transcript, 0x3ca0)), f_q)result := addmod(mulmod(mload(add(transcript, 0xa00)), mload(add(transcript, 0x3cc0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xa20)), mload(add(transcript, 0x3ce0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xa40)), mload(add(transcript, 0x3d00)), f_q), result, f_q)mstore(add(transcript, 0x49e0), result)        }
mstore(add(transcript, 0x4a00), mulmod(mload(add(transcript, 0x49e0)), mload(add(transcript, 0x41a0)), f_q))
mstore(add(transcript, 0x4a20), mulmod(sub(f_q, mload(add(transcript, 0x4a00))), mload(add(transcript, 0x44e0)), f_q))
mstore(add(transcript, 0x4a40), mulmod(1, mload(add(transcript, 0x44e0)), f_q))
mstore(add(transcript, 0x4a60), addmod(mload(add(transcript, 0x49c0)), mload(add(transcript, 0x4a20)), f_q))
{            let result := mulmod(mload(add(transcript, 0xa60)), mload(add(transcript, 0x3ca0)), f_q)result := addmod(mulmod(mload(add(transcript, 0xa80)), mload(add(transcript, 0x3cc0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xaa0)), mload(add(transcript, 0x3ce0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xac0)), mload(add(transcript, 0x3d00)), f_q), result, f_q)mstore(add(transcript, 0x4a80), result)        }
mstore(add(transcript, 0x4aa0), mulmod(mload(add(transcript, 0x4a80)), mload(add(transcript, 0x41a0)), f_q))
mstore(add(transcript, 0x4ac0), mulmod(sub(f_q, mload(add(transcript, 0x4aa0))), mload(add(transcript, 0x4500)), f_q))
mstore(add(transcript, 0x4ae0), mulmod(1, mload(add(transcript, 0x4500)), f_q))
mstore(add(transcript, 0x4b00), addmod(mload(add(transcript, 0x4a60)), mload(add(transcript, 0x4ac0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xae0)), mload(add(transcript, 0x3ca0)), f_q)result := addmod(mulmod(mload(add(transcript, 0xb00)), mload(add(transcript, 0x3cc0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xb20)), mload(add(transcript, 0x3ce0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xb40)), mload(add(transcript, 0x3d00)), f_q), result, f_q)mstore(add(transcript, 0x4b20), result)        }
mstore(add(transcript, 0x4b40), mulmod(mload(add(transcript, 0x4b20)), mload(add(transcript, 0x41a0)), f_q))
mstore(add(transcript, 0x4b60), mulmod(sub(f_q, mload(add(transcript, 0x4b40))), mload(add(transcript, 0x4520)), f_q))
mstore(add(transcript, 0x4b80), mulmod(1, mload(add(transcript, 0x4520)), f_q))
mstore(add(transcript, 0x4ba0), addmod(mload(add(transcript, 0x4b00)), mload(add(transcript, 0x4b60)), f_q))
{            let result := mulmod(mload(add(transcript, 0xb60)), mload(add(transcript, 0x3ca0)), f_q)result := addmod(mulmod(mload(add(transcript, 0xb80)), mload(add(transcript, 0x3cc0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xba0)), mload(add(transcript, 0x3ce0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xbc0)), mload(add(transcript, 0x3d00)), f_q), result, f_q)mstore(add(transcript, 0x4bc0), result)        }
mstore(add(transcript, 0x4be0), mulmod(mload(add(transcript, 0x4bc0)), mload(add(transcript, 0x41a0)), f_q))
mstore(add(transcript, 0x4c00), mulmod(sub(f_q, mload(add(transcript, 0x4be0))), mload(add(transcript, 0x4540)), f_q))
mstore(add(transcript, 0x4c20), mulmod(1, mload(add(transcript, 0x4540)), f_q))
mstore(add(transcript, 0x4c40), addmod(mload(add(transcript, 0x4ba0)), mload(add(transcript, 0x4c00)), f_q))
mstore(add(transcript, 0x4c60), mulmod(mload(add(transcript, 0x4c40)), 1, f_q))
mstore(add(transcript, 0x4c80), mulmod(mload(add(transcript, 0x4860)), 1, f_q))
mstore(add(transcript, 0x4ca0), mulmod(mload(add(transcript, 0x4900)), 1, f_q))
mstore(add(transcript, 0x4cc0), mulmod(mload(add(transcript, 0x49a0)), 1, f_q))
mstore(add(transcript, 0x4ce0), mulmod(mload(add(transcript, 0x4a40)), 1, f_q))
mstore(add(transcript, 0x4d00), mulmod(mload(add(transcript, 0x4ae0)), 1, f_q))
mstore(add(transcript, 0x4d20), mulmod(mload(add(transcript, 0x4b80)), 1, f_q))
mstore(add(transcript, 0x4d40), mulmod(mload(add(transcript, 0x4c20)), 1, f_q))
mstore(add(transcript, 0x4d60), mulmod(1, mload(add(transcript, 0x41c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xbe0)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x4d80), result)        }
mstore(add(transcript, 0x4da0), mulmod(mload(add(transcript, 0x4d80)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x4dc0), mulmod(sub(f_q, mload(add(transcript, 0x4da0))), 1, f_q))
mstore(add(transcript, 0x4de0), mulmod(mload(add(transcript, 0x4d60)), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0x10e0)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x4e00), result)        }
mstore(add(transcript, 0x4e20), mulmod(mload(add(transcript, 0x4e00)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x4e40), mulmod(sub(f_q, mload(add(transcript, 0x4e20))), mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x4e60), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x4e80), addmod(mload(add(transcript, 0x4dc0)), mload(add(transcript, 0x4e40)), f_q))
{            let result := mulmod(mload(add(transcript, 0xc00)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x4ea0), result)        }
mstore(add(transcript, 0x4ec0), mulmod(mload(add(transcript, 0x4ea0)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x4ee0), mulmod(sub(f_q, mload(add(transcript, 0x4ec0))), mload(add(transcript, 0x44a0)), f_q))
mstore(add(transcript, 0x4f00), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x44a0)), f_q))
mstore(add(transcript, 0x4f20), addmod(mload(add(transcript, 0x4e80)), mload(add(transcript, 0x4ee0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xc20)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x4f40), result)        }
mstore(add(transcript, 0x4f60), mulmod(mload(add(transcript, 0x4f40)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x4f80), mulmod(sub(f_q, mload(add(transcript, 0x4f60))), mload(add(transcript, 0x44c0)), f_q))
mstore(add(transcript, 0x4fa0), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x44c0)), f_q))
mstore(add(transcript, 0x4fc0), addmod(mload(add(transcript, 0x4f20)), mload(add(transcript, 0x4f80)), f_q))
{            let result := mulmod(mload(add(transcript, 0xc40)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x4fe0), result)        }
mstore(add(transcript, 0x5000), mulmod(mload(add(transcript, 0x4fe0)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x5020), mulmod(sub(f_q, mload(add(transcript, 0x5000))), mload(add(transcript, 0x44e0)), f_q))
mstore(add(transcript, 0x5040), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x44e0)), f_q))
mstore(add(transcript, 0x5060), addmod(mload(add(transcript, 0x4fc0)), mload(add(transcript, 0x5020)), f_q))
{            let result := mulmod(mload(add(transcript, 0xc60)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x5080), result)        }
mstore(add(transcript, 0x50a0), mulmod(mload(add(transcript, 0x5080)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x50c0), mulmod(sub(f_q, mload(add(transcript, 0x50a0))), mload(add(transcript, 0x4500)), f_q))
mstore(add(transcript, 0x50e0), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x4500)), f_q))
mstore(add(transcript, 0x5100), addmod(mload(add(transcript, 0x5060)), mload(add(transcript, 0x50c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xc80)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x5120), result)        }
mstore(add(transcript, 0x5140), mulmod(mload(add(transcript, 0x5120)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x5160), mulmod(sub(f_q, mload(add(transcript, 0x5140))), mload(add(transcript, 0x4520)), f_q))
mstore(add(transcript, 0x5180), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x4520)), f_q))
mstore(add(transcript, 0x51a0), addmod(mload(add(transcript, 0x5100)), mload(add(transcript, 0x5160)), f_q))
{            let result := mulmod(mload(add(transcript, 0xca0)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x51c0), result)        }
mstore(add(transcript, 0x51e0), mulmod(mload(add(transcript, 0x51c0)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x5200), mulmod(sub(f_q, mload(add(transcript, 0x51e0))), mload(add(transcript, 0x4540)), f_q))
mstore(add(transcript, 0x5220), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x4540)), f_q))
mstore(add(transcript, 0x5240), addmod(mload(add(transcript, 0x51a0)), mload(add(transcript, 0x5200)), f_q))
{            let result := mulmod(mload(add(transcript, 0xce0)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x5260), result)        }
mstore(add(transcript, 0x5280), mulmod(mload(add(transcript, 0x5260)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x52a0), mulmod(sub(f_q, mload(add(transcript, 0x5280))), mload(add(transcript, 0x4560)), f_q))
mstore(add(transcript, 0x52c0), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x4560)), f_q))
mstore(add(transcript, 0x52e0), addmod(mload(add(transcript, 0x5240)), mload(add(transcript, 0x52a0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xd00)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x5300), result)        }
mstore(add(transcript, 0x5320), mulmod(mload(add(transcript, 0x5300)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x5340), mulmod(sub(f_q, mload(add(transcript, 0x5320))), mload(add(transcript, 0x4580)), f_q))
mstore(add(transcript, 0x5360), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x4580)), f_q))
mstore(add(transcript, 0x5380), addmod(mload(add(transcript, 0x52e0)), mload(add(transcript, 0x5340)), f_q))
{            let result := mulmod(mload(add(transcript, 0xd20)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x53a0), result)        }
mstore(add(transcript, 0x53c0), mulmod(mload(add(transcript, 0x53a0)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x53e0), mulmod(sub(f_q, mload(add(transcript, 0x53c0))), mload(add(transcript, 0x45a0)), f_q))
mstore(add(transcript, 0x5400), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x45a0)), f_q))
mstore(add(transcript, 0x5420), addmod(mload(add(transcript, 0x5380)), mload(add(transcript, 0x53e0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xd40)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x5440), result)        }
mstore(add(transcript, 0x5460), mulmod(mload(add(transcript, 0x5440)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x5480), mulmod(sub(f_q, mload(add(transcript, 0x5460))), mload(add(transcript, 0x45c0)), f_q))
mstore(add(transcript, 0x54a0), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x45c0)), f_q))
mstore(add(transcript, 0x54c0), addmod(mload(add(transcript, 0x5420)), mload(add(transcript, 0x5480)), f_q))
{            let result := mulmod(mload(add(transcript, 0xd60)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x54e0), result)        }
mstore(add(transcript, 0x5500), mulmod(mload(add(transcript, 0x54e0)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x5520), mulmod(sub(f_q, mload(add(transcript, 0x5500))), mload(add(transcript, 0x45e0)), f_q))
mstore(add(transcript, 0x5540), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x45e0)), f_q))
mstore(add(transcript, 0x5560), addmod(mload(add(transcript, 0x54c0)), mload(add(transcript, 0x5520)), f_q))
{            let result := mulmod(mload(add(transcript, 0xd80)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x5580), result)        }
mstore(add(transcript, 0x55a0), mulmod(mload(add(transcript, 0x5580)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x55c0), mulmod(sub(f_q, mload(add(transcript, 0x55a0))), mload(add(transcript, 0x4600)), f_q))
mstore(add(transcript, 0x55e0), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x4600)), f_q))
mstore(add(transcript, 0x5600), addmod(mload(add(transcript, 0x5560)), mload(add(transcript, 0x55c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xda0)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x5620), result)        }
mstore(add(transcript, 0x5640), mulmod(mload(add(transcript, 0x5620)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x5660), mulmod(sub(f_q, mload(add(transcript, 0x5640))), mload(add(transcript, 0x4620)), f_q))
mstore(add(transcript, 0x5680), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x4620)), f_q))
mstore(add(transcript, 0x56a0), addmod(mload(add(transcript, 0x5600)), mload(add(transcript, 0x5660)), f_q))
{            let result := mulmod(mload(add(transcript, 0xdc0)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x56c0), result)        }
mstore(add(transcript, 0x56e0), mulmod(mload(add(transcript, 0x56c0)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x5700), mulmod(sub(f_q, mload(add(transcript, 0x56e0))), mload(add(transcript, 0x4640)), f_q))
mstore(add(transcript, 0x5720), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x4640)), f_q))
mstore(add(transcript, 0x5740), addmod(mload(add(transcript, 0x56a0)), mload(add(transcript, 0x5700)), f_q))
{            let result := mulmod(mload(add(transcript, 0xde0)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x5760), result)        }
mstore(add(transcript, 0x5780), mulmod(mload(add(transcript, 0x5760)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x57a0), mulmod(sub(f_q, mload(add(transcript, 0x5780))), mload(add(transcript, 0x4660)), f_q))
mstore(add(transcript, 0x57c0), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x4660)), f_q))
mstore(add(transcript, 0x57e0), addmod(mload(add(transcript, 0x5740)), mload(add(transcript, 0x57a0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xe00)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x5800), result)        }
mstore(add(transcript, 0x5820), mulmod(mload(add(transcript, 0x5800)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x5840), mulmod(sub(f_q, mload(add(transcript, 0x5820))), mload(add(transcript, 0x4680)), f_q))
mstore(add(transcript, 0x5860), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x4680)), f_q))
mstore(add(transcript, 0x5880), addmod(mload(add(transcript, 0x57e0)), mload(add(transcript, 0x5840)), f_q))
{            let result := mulmod(mload(add(transcript, 0xe20)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x58a0), result)        }
mstore(add(transcript, 0x58c0), mulmod(mload(add(transcript, 0x58a0)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x58e0), mulmod(sub(f_q, mload(add(transcript, 0x58c0))), mload(add(transcript, 0x46a0)), f_q))
mstore(add(transcript, 0x5900), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x46a0)), f_q))
mstore(add(transcript, 0x5920), addmod(mload(add(transcript, 0x5880)), mload(add(transcript, 0x58e0)), f_q))
mstore(add(transcript, 0x5940), mulmod(mload(add(transcript, 0x3aa0)), mload(add(transcript, 0x41c0)), f_q))
mstore(add(transcript, 0x5960), mulmod(mload(add(transcript, 0x3ac0)), mload(add(transcript, 0x41c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x3ae0)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x5980), result)        }
mstore(add(transcript, 0x59a0), mulmod(mload(add(transcript, 0x5980)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x59c0), mulmod(sub(f_q, mload(add(transcript, 0x59a0))), mload(add(transcript, 0x46c0)), f_q))
mstore(add(transcript, 0x59e0), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x46c0)), f_q))
mstore(add(transcript, 0x5a00), mulmod(mload(add(transcript, 0x5940)), mload(add(transcript, 0x46c0)), f_q))
mstore(add(transcript, 0x5a20), mulmod(mload(add(transcript, 0x5960)), mload(add(transcript, 0x46c0)), f_q))
mstore(add(transcript, 0x5a40), addmod(mload(add(transcript, 0x5920)), mload(add(transcript, 0x59c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xcc0)), mload(add(transcript, 0x3da0)), f_q)mstore(add(transcript, 0x5a60), result)        }
mstore(add(transcript, 0x5a80), mulmod(mload(add(transcript, 0x5a60)), mload(add(transcript, 0x4420)), f_q))
mstore(add(transcript, 0x5aa0), mulmod(sub(f_q, mload(add(transcript, 0x5a80))), mload(add(transcript, 0x46e0)), f_q))
mstore(add(transcript, 0x5ac0), mulmod(mload(add(transcript, 0x4d60)), mload(add(transcript, 0x46e0)), f_q))
mstore(add(transcript, 0x5ae0), addmod(mload(add(transcript, 0x5a40)), mload(add(transcript, 0x5aa0)), f_q))
mstore(add(transcript, 0x5b00), mulmod(mload(add(transcript, 0x5ae0)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5b20), mulmod(mload(add(transcript, 0x4de0)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5b40), mulmod(mload(add(transcript, 0x4e60)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5b60), mulmod(mload(add(transcript, 0x4f00)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5b80), mulmod(mload(add(transcript, 0x4fa0)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5ba0), mulmod(mload(add(transcript, 0x5040)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5bc0), mulmod(mload(add(transcript, 0x50e0)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5be0), mulmod(mload(add(transcript, 0x5180)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5c00), mulmod(mload(add(transcript, 0x5220)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5c20), mulmod(mload(add(transcript, 0x52c0)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5c40), mulmod(mload(add(transcript, 0x5360)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5c60), mulmod(mload(add(transcript, 0x5400)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5c80), mulmod(mload(add(transcript, 0x54a0)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5ca0), mulmod(mload(add(transcript, 0x5540)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5cc0), mulmod(mload(add(transcript, 0x55e0)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5ce0), mulmod(mload(add(transcript, 0x5680)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5d00), mulmod(mload(add(transcript, 0x5720)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5d20), mulmod(mload(add(transcript, 0x57c0)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5d40), mulmod(mload(add(transcript, 0x5860)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5d60), mulmod(mload(add(transcript, 0x5900)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5d80), mulmod(mload(add(transcript, 0x59e0)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5da0), mulmod(mload(add(transcript, 0x5a00)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5dc0), mulmod(mload(add(transcript, 0x5a20)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5de0), mulmod(mload(add(transcript, 0x5ac0)), mload(add(transcript, 0x1180)), f_q))
mstore(add(transcript, 0x5e00), addmod(mload(add(transcript, 0x4c60)), mload(add(transcript, 0x5b00)), f_q))
mstore(add(transcript, 0x5e20), mulmod(1, mload(add(transcript, 0x4200)), f_q))
{            let result := mulmod(mload(add(transcript, 0xe40)), mload(add(transcript, 0x3dc0)), f_q)result := addmod(mulmod(mload(add(transcript, 0xe60)), mload(add(transcript, 0x3de0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xe80)), mload(add(transcript, 0x3e00)), f_q), result, f_q)mstore(add(transcript, 0x5e40), result)        }
mstore(add(transcript, 0x5e60), mulmod(mload(add(transcript, 0x5e40)), mload(add(transcript, 0x4440)), f_q))
mstore(add(transcript, 0x5e80), mulmod(sub(f_q, mload(add(transcript, 0x5e60))), 1, f_q))
mstore(add(transcript, 0x5ea0), mulmod(mload(add(transcript, 0x5e20)), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0xea0)), mload(add(transcript, 0x3dc0)), f_q)result := addmod(mulmod(mload(add(transcript, 0xec0)), mload(add(transcript, 0x3de0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xee0)), mload(add(transcript, 0x3e00)), f_q), result, f_q)mstore(add(transcript, 0x5ec0), result)        }
mstore(add(transcript, 0x5ee0), mulmod(mload(add(transcript, 0x5ec0)), mload(add(transcript, 0x4440)), f_q))
mstore(add(transcript, 0x5f00), mulmod(sub(f_q, mload(add(transcript, 0x5ee0))), mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x5f20), mulmod(mload(add(transcript, 0x5e20)), mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x5f40), addmod(mload(add(transcript, 0x5e80)), mload(add(transcript, 0x5f00)), f_q))
{            let result := mulmod(mload(add(transcript, 0xf00)), mload(add(transcript, 0x3dc0)), f_q)result := addmod(mulmod(mload(add(transcript, 0xf20)), mload(add(transcript, 0x3de0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xf40)), mload(add(transcript, 0x3e00)), f_q), result, f_q)mstore(add(transcript, 0x5f60), result)        }
mstore(add(transcript, 0x5f80), mulmod(mload(add(transcript, 0x5f60)), mload(add(transcript, 0x4440)), f_q))
mstore(add(transcript, 0x5fa0), mulmod(sub(f_q, mload(add(transcript, 0x5f80))), mload(add(transcript, 0x44a0)), f_q))
mstore(add(transcript, 0x5fc0), mulmod(mload(add(transcript, 0x5e20)), mload(add(transcript, 0x44a0)), f_q))
mstore(add(transcript, 0x5fe0), addmod(mload(add(transcript, 0x5f40)), mload(add(transcript, 0x5fa0)), f_q))
{            let result := mulmod(mload(add(transcript, 0xf60)), mload(add(transcript, 0x3dc0)), f_q)result := addmod(mulmod(mload(add(transcript, 0xf80)), mload(add(transcript, 0x3de0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0xfa0)), mload(add(transcript, 0x3e00)), f_q), result, f_q)mstore(add(transcript, 0x6000), result)        }
mstore(add(transcript, 0x6020), mulmod(mload(add(transcript, 0x6000)), mload(add(transcript, 0x4440)), f_q))
mstore(add(transcript, 0x6040), mulmod(sub(f_q, mload(add(transcript, 0x6020))), mload(add(transcript, 0x44c0)), f_q))
mstore(add(transcript, 0x6060), mulmod(mload(add(transcript, 0x5e20)), mload(add(transcript, 0x44c0)), f_q))
mstore(add(transcript, 0x6080), addmod(mload(add(transcript, 0x5fe0)), mload(add(transcript, 0x6040)), f_q))
{            let result := mulmod(mload(add(transcript, 0xfc0)), mload(add(transcript, 0x3dc0)), f_q)result := addmod(mulmod(mload(add(transcript, 0xfe0)), mload(add(transcript, 0x3de0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x1000)), mload(add(transcript, 0x3e00)), f_q), result, f_q)mstore(add(transcript, 0x60a0), result)        }
mstore(add(transcript, 0x60c0), mulmod(mload(add(transcript, 0x60a0)), mload(add(transcript, 0x4440)), f_q))
mstore(add(transcript, 0x60e0), mulmod(sub(f_q, mload(add(transcript, 0x60c0))), mload(add(transcript, 0x44e0)), f_q))
mstore(add(transcript, 0x6100), mulmod(mload(add(transcript, 0x5e20)), mload(add(transcript, 0x44e0)), f_q))
mstore(add(transcript, 0x6120), addmod(mload(add(transcript, 0x6080)), mload(add(transcript, 0x60e0)), f_q))
mstore(add(transcript, 0x6140), mulmod(mload(add(transcript, 0x6120)), mload(add(transcript, 0x4720)), f_q))
mstore(add(transcript, 0x6160), mulmod(mload(add(transcript, 0x5ea0)), mload(add(transcript, 0x4720)), f_q))
mstore(add(transcript, 0x6180), mulmod(mload(add(transcript, 0x5f20)), mload(add(transcript, 0x4720)), f_q))
mstore(add(transcript, 0x61a0), mulmod(mload(add(transcript, 0x5fc0)), mload(add(transcript, 0x4720)), f_q))
mstore(add(transcript, 0x61c0), mulmod(mload(add(transcript, 0x6060)), mload(add(transcript, 0x4720)), f_q))
mstore(add(transcript, 0x61e0), mulmod(mload(add(transcript, 0x6100)), mload(add(transcript, 0x4720)), f_q))
mstore(add(transcript, 0x6200), addmod(mload(add(transcript, 0x5e00)), mload(add(transcript, 0x6140)), f_q))
mstore(add(transcript, 0x6220), mulmod(1, mload(add(transcript, 0x4240)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1020)), mload(add(transcript, 0x3e40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x1040)), mload(add(transcript, 0x3e60)), f_q), result, f_q)mstore(add(transcript, 0x6240), result)        }
mstore(add(transcript, 0x6260), mulmod(mload(add(transcript, 0x6240)), mload(add(transcript, 0x4460)), f_q))
mstore(add(transcript, 0x6280), mulmod(sub(f_q, mload(add(transcript, 0x6260))), 1, f_q))
mstore(add(transcript, 0x62a0), mulmod(mload(add(transcript, 0x6220)), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0x1060)), mload(add(transcript, 0x3e40)), f_q)result := addmod(mulmod(mload(add(transcript, 0x1080)), mload(add(transcript, 0x3e60)), f_q), result, f_q)mstore(add(transcript, 0x62c0), result)        }
mstore(add(transcript, 0x62e0), mulmod(mload(add(transcript, 0x62c0)), mload(add(transcript, 0x4460)), f_q))
mstore(add(transcript, 0x6300), mulmod(sub(f_q, mload(add(transcript, 0x62e0))), mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x6320), mulmod(mload(add(transcript, 0x6220)), mload(add(transcript, 0x1120)), f_q))
mstore(add(transcript, 0x6340), addmod(mload(add(transcript, 0x6280)), mload(add(transcript, 0x6300)), f_q))
mstore(add(transcript, 0x6360), mulmod(mload(add(transcript, 0x6340)), mload(add(transcript, 0x4740)), f_q))
mstore(add(transcript, 0x6380), mulmod(mload(add(transcript, 0x62a0)), mload(add(transcript, 0x4740)), f_q))
mstore(add(transcript, 0x63a0), mulmod(mload(add(transcript, 0x6320)), mload(add(transcript, 0x4740)), f_q))
mstore(add(transcript, 0x63c0), addmod(mload(add(transcript, 0x6200)), mload(add(transcript, 0x6360)), f_q))
mstore(add(transcript, 0x63e0), mulmod(1, mload(add(transcript, 0x4280)), f_q))
{            let result := mulmod(mload(add(transcript, 0x10a0)), mload(add(transcript, 0x3e80)), f_q)result := addmod(mulmod(mload(add(transcript, 0x10c0)), mload(add(transcript, 0x3ea0)), f_q), result, f_q)mstore(add(transcript, 0x6400), result)        }
mstore(add(transcript, 0x6420), mulmod(mload(add(transcript, 0x6400)), mload(add(transcript, 0x4480)), f_q))
mstore(add(transcript, 0x6440), mulmod(sub(f_q, mload(add(transcript, 0x6420))), 1, f_q))
mstore(add(transcript, 0x6460), mulmod(mload(add(transcript, 0x63e0)), 1, f_q))
mstore(add(transcript, 0x6480), mulmod(mload(add(transcript, 0x6440)), mload(add(transcript, 0x4760)), f_q))
mstore(add(transcript, 0x64a0), mulmod(mload(add(transcript, 0x6460)), mload(add(transcript, 0x4760)), f_q))
mstore(add(transcript, 0x64c0), addmod(mload(add(transcript, 0x63c0)), mload(add(transcript, 0x6480)), f_q))
mstore(add(transcript, 0x64e0), mulmod(1, mload(add(transcript, 0x3d80)), f_q))
mstore(add(transcript, 0x6500), mulmod(1, mload(add(transcript, 0x1220)), f_q))
mstore(add(transcript, 0x6520), 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(add(transcript, 0x6540), 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(add(transcript, 0x6560), mload(add(transcript, 0x64c0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6520), 0x60, add(transcript, 0x6520), 0x40), 1), success)
mstore(add(transcript, 0x6580), mload(add(transcript, 0x6520)))
                    mstore(add(transcript, 0x65a0), mload(add(transcript, 0x6540)))
mstore(add(transcript, 0x65c0), mload(add(transcript, 0x80)))
                    mstore(add(transcript, 0x65e0), mload(add(transcript, 0xa0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6580), 0x80, add(transcript, 0x6580), 0x40), 1), success)
mstore(add(transcript, 0x6600), mload(add(transcript, 0xc0)))
                    mstore(add(transcript, 0x6620), mload(add(transcript, 0xe0)))
mstore(add(transcript, 0x6640), mload(add(transcript, 0x4c80)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6600), 0x60, add(transcript, 0x6600), 0x40), 1), success)
mstore(add(transcript, 0x6660), mload(add(transcript, 0x6580)))
                    mstore(add(transcript, 0x6680), mload(add(transcript, 0x65a0)))
mstore(add(transcript, 0x66a0), mload(add(transcript, 0x6600)))
                    mstore(add(transcript, 0x66c0), mload(add(transcript, 0x6620)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6660), 0x80, add(transcript, 0x6660), 0x40), 1), success)
mstore(add(transcript, 0x66e0), mload(add(transcript, 0x100)))
                    mstore(add(transcript, 0x6700), mload(add(transcript, 0x120)))
mstore(add(transcript, 0x6720), mload(add(transcript, 0x4ca0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x66e0), 0x60, add(transcript, 0x66e0), 0x40), 1), success)
mstore(add(transcript, 0x6740), mload(add(transcript, 0x6660)))
                    mstore(add(transcript, 0x6760), mload(add(transcript, 0x6680)))
mstore(add(transcript, 0x6780), mload(add(transcript, 0x66e0)))
                    mstore(add(transcript, 0x67a0), mload(add(transcript, 0x6700)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6740), 0x80, add(transcript, 0x6740), 0x40), 1), success)
mstore(add(transcript, 0x67c0), mload(add(transcript, 0x140)))
                    mstore(add(transcript, 0x67e0), mload(add(transcript, 0x160)))
mstore(add(transcript, 0x6800), mload(add(transcript, 0x4cc0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x67c0), 0x60, add(transcript, 0x67c0), 0x40), 1), success)
mstore(add(transcript, 0x6820), mload(add(transcript, 0x6740)))
                    mstore(add(transcript, 0x6840), mload(add(transcript, 0x6760)))
mstore(add(transcript, 0x6860), mload(add(transcript, 0x67c0)))
                    mstore(add(transcript, 0x6880), mload(add(transcript, 0x67e0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6820), 0x80, add(transcript, 0x6820), 0x40), 1), success)
mstore(add(transcript, 0x68a0), mload(add(transcript, 0x180)))
                    mstore(add(transcript, 0x68c0), mload(add(transcript, 0x1a0)))
mstore(add(transcript, 0x68e0), mload(add(transcript, 0x4ce0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x68a0), 0x60, add(transcript, 0x68a0), 0x40), 1), success)
mstore(add(transcript, 0x6900), mload(add(transcript, 0x6820)))
                    mstore(add(transcript, 0x6920), mload(add(transcript, 0x6840)))
mstore(add(transcript, 0x6940), mload(add(transcript, 0x68a0)))
                    mstore(add(transcript, 0x6960), mload(add(transcript, 0x68c0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6900), 0x80, add(transcript, 0x6900), 0x40), 1), success)
mstore(add(transcript, 0x6980), mload(add(transcript, 0x1c0)))
                    mstore(add(transcript, 0x69a0), mload(add(transcript, 0x1e0)))
mstore(add(transcript, 0x69c0), mload(add(transcript, 0x4d00)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6980), 0x60, add(transcript, 0x6980), 0x40), 1), success)
mstore(add(transcript, 0x69e0), mload(add(transcript, 0x6900)))
                    mstore(add(transcript, 0x6a00), mload(add(transcript, 0x6920)))
mstore(add(transcript, 0x6a20), mload(add(transcript, 0x6980)))
                    mstore(add(transcript, 0x6a40), mload(add(transcript, 0x69a0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x69e0), 0x80, add(transcript, 0x69e0), 0x40), 1), success)
mstore(add(transcript, 0x6a60), mload(add(transcript, 0x200)))
                    mstore(add(transcript, 0x6a80), mload(add(transcript, 0x220)))
mstore(add(transcript, 0x6aa0), mload(add(transcript, 0x4d20)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6a60), 0x60, add(transcript, 0x6a60), 0x40), 1), success)
mstore(add(transcript, 0x6ac0), mload(add(transcript, 0x69e0)))
                    mstore(add(transcript, 0x6ae0), mload(add(transcript, 0x6a00)))
mstore(add(transcript, 0x6b00), mload(add(transcript, 0x6a60)))
                    mstore(add(transcript, 0x6b20), mload(add(transcript, 0x6a80)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6ac0), 0x80, add(transcript, 0x6ac0), 0x40), 1), success)
mstore(add(transcript, 0x6b40), mload(add(transcript, 0x240)))
                    mstore(add(transcript, 0x6b60), mload(add(transcript, 0x260)))
mstore(add(transcript, 0x6b80), mload(add(transcript, 0x4d40)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6b40), 0x60, add(transcript, 0x6b40), 0x40), 1), success)
mstore(add(transcript, 0x6ba0), mload(add(transcript, 0x6ac0)))
                    mstore(add(transcript, 0x6bc0), mload(add(transcript, 0x6ae0)))
mstore(add(transcript, 0x6be0), mload(add(transcript, 0x6b40)))
                    mstore(add(transcript, 0x6c00), mload(add(transcript, 0x6b60)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6ba0), 0x80, add(transcript, 0x6ba0), 0x40), 1), success)
mstore(add(transcript, 0x6c20), mload(add(transcript, 0x280)))
                    mstore(add(transcript, 0x6c40), mload(add(transcript, 0x2a0)))
mstore(add(transcript, 0x6c60), mload(add(transcript, 0x5b20)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6c20), 0x60, add(transcript, 0x6c20), 0x40), 1), success)
mstore(add(transcript, 0x6c80), mload(add(transcript, 0x6ba0)))
                    mstore(add(transcript, 0x6ca0), mload(add(transcript, 0x6bc0)))
mstore(add(transcript, 0x6cc0), mload(add(transcript, 0x6c20)))
                    mstore(add(transcript, 0x6ce0), mload(add(transcript, 0x6c40)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6c80), 0x80, add(transcript, 0x6c80), 0x40), 1), success)
mstore(add(transcript, 0x6d00), mload(add(transcript, 0x360)))
                    mstore(add(transcript, 0x6d20), mload(add(transcript, 0x380)))
mstore(add(transcript, 0x6d40), mload(add(transcript, 0x5b40)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6d00), 0x60, add(transcript, 0x6d00), 0x40), 1), success)
mstore(add(transcript, 0x6d60), mload(add(transcript, 0x6c80)))
                    mstore(add(transcript, 0x6d80), mload(add(transcript, 0x6ca0)))
mstore(add(transcript, 0x6da0), mload(add(transcript, 0x6d00)))
                    mstore(add(transcript, 0x6dc0), mload(add(transcript, 0x6d20)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6d60), 0x80, add(transcript, 0x6d60), 0x40), 1), success)
mstore(add(transcript, 0x6de0), 0x26a9fff3fc4c4acd45319ad48da756bd0e5ec10f4720cc2119d924ba41aaa5b0)
                    mstore(add(transcript, 0x6e00), 0x1c1347a665dadbbd71e00efb1c7180b1cf2ce9fac2965ffaed56316dde81f297)
mstore(add(transcript, 0x6e20), mload(add(transcript, 0x5b60)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6de0), 0x60, add(transcript, 0x6de0), 0x40), 1), success)
mstore(add(transcript, 0x6e40), mload(add(transcript, 0x6d60)))
                    mstore(add(transcript, 0x6e60), mload(add(transcript, 0x6d80)))
mstore(add(transcript, 0x6e80), mload(add(transcript, 0x6de0)))
                    mstore(add(transcript, 0x6ea0), mload(add(transcript, 0x6e00)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6e40), 0x80, add(transcript, 0x6e40), 0x40), 1), success)
mstore(add(transcript, 0x6ec0), 0x0a450e58173ff2752ee9abe341727e6093b146a8a35074d2fa963267835d70f9)
                    mstore(add(transcript, 0x6ee0), 0x04936dcc176315c74e265dae9285d66a9f001296db7cb0b2b57103aa46af2a4c)
mstore(add(transcript, 0x6f00), mload(add(transcript, 0x5b80)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6ec0), 0x60, add(transcript, 0x6ec0), 0x40), 1), success)
mstore(add(transcript, 0x6f20), mload(add(transcript, 0x6e40)))
                    mstore(add(transcript, 0x6f40), mload(add(transcript, 0x6e60)))
mstore(add(transcript, 0x6f60), mload(add(transcript, 0x6ec0)))
                    mstore(add(transcript, 0x6f80), mload(add(transcript, 0x6ee0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6f20), 0x80, add(transcript, 0x6f20), 0x40), 1), success)
mstore(add(transcript, 0x6fa0), 0x2ac449c42733e0ca49c01be46a1cd35dbddefac899ad24f2768e938c8e28c07d)
                    mstore(add(transcript, 0x6fc0), 0x0813499d79be3786f05844270a729f20a2ac0f556887019a6579b5a14228621c)
mstore(add(transcript, 0x6fe0), mload(add(transcript, 0x5ba0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6fa0), 0x60, add(transcript, 0x6fa0), 0x40), 1), success)
mstore(add(transcript, 0x7000), mload(add(transcript, 0x6f20)))
                    mstore(add(transcript, 0x7020), mload(add(transcript, 0x6f40)))
mstore(add(transcript, 0x7040), mload(add(transcript, 0x6fa0)))
                    mstore(add(transcript, 0x7060), mload(add(transcript, 0x6fc0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7000), 0x80, add(transcript, 0x7000), 0x40), 1), success)
mstore(add(transcript, 0x7080), 0x286e8b924fc69b534f04c916181bf5e7410884b1644f9d63b7e06315d1d8260f)
                    mstore(add(transcript, 0x70a0), 0x01554513df529fd29f78eab3226b7d068a55d14f44dccdc9c8662b595c3df245)
mstore(add(transcript, 0x70c0), mload(add(transcript, 0x5bc0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7080), 0x60, add(transcript, 0x7080), 0x40), 1), success)
mstore(add(transcript, 0x70e0), mload(add(transcript, 0x7000)))
                    mstore(add(transcript, 0x7100), mload(add(transcript, 0x7020)))
mstore(add(transcript, 0x7120), mload(add(transcript, 0x7080)))
                    mstore(add(transcript, 0x7140), mload(add(transcript, 0x70a0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x70e0), 0x80, add(transcript, 0x70e0), 0x40), 1), success)
mstore(add(transcript, 0x7160), 0x0937dd131d21107883031bba884d270b3cf32194c8c12c2ee5668796e9836d93)
                    mstore(add(transcript, 0x7180), 0x1030e58cfb8371ccf5f87d929c29d5b5ebc97f7d8667d06dcb525b7d2464b4c0)
mstore(add(transcript, 0x71a0), mload(add(transcript, 0x5be0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7160), 0x60, add(transcript, 0x7160), 0x40), 1), success)
mstore(add(transcript, 0x71c0), mload(add(transcript, 0x70e0)))
                    mstore(add(transcript, 0x71e0), mload(add(transcript, 0x7100)))
mstore(add(transcript, 0x7200), mload(add(transcript, 0x7160)))
                    mstore(add(transcript, 0x7220), mload(add(transcript, 0x7180)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x71c0), 0x80, add(transcript, 0x71c0), 0x40), 1), success)
mstore(add(transcript, 0x7240), 0x2720d5f272602ec4fcb9f236a6602f8baa12debc2885f5394c433718d69c3fe9)
                    mstore(add(transcript, 0x7260), 0x2ebed0770ec2209c55ea6cc46dbdf3b794eb0bb7fccdfa40c012700197083d24)
mstore(add(transcript, 0x7280), mload(add(transcript, 0x5c00)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7240), 0x60, add(transcript, 0x7240), 0x40), 1), success)
mstore(add(transcript, 0x72a0), mload(add(transcript, 0x71c0)))
                    mstore(add(transcript, 0x72c0), mload(add(transcript, 0x71e0)))
mstore(add(transcript, 0x72e0), mload(add(transcript, 0x7240)))
                    mstore(add(transcript, 0x7300), mload(add(transcript, 0x7260)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x72a0), 0x80, add(transcript, 0x72a0), 0x40), 1), success)
mstore(add(transcript, 0x7320), 0x07b7669fdd9b374e847dd88214bb1831f1572b675e7b6c546f275a36843befdd)
                    mstore(add(transcript, 0x7340), 0x0faa422d2d7171cb80ead0f830a148bb99bf1cc6a0bc1ca91b6fd7bb4007e6a8)
mstore(add(transcript, 0x7360), mload(add(transcript, 0x5c20)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7320), 0x60, add(transcript, 0x7320), 0x40), 1), success)
mstore(add(transcript, 0x7380), mload(add(transcript, 0x72a0)))
                    mstore(add(transcript, 0x73a0), mload(add(transcript, 0x72c0)))
mstore(add(transcript, 0x73c0), mload(add(transcript, 0x7320)))
                    mstore(add(transcript, 0x73e0), mload(add(transcript, 0x7340)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7380), 0x80, add(transcript, 0x7380), 0x40), 1), success)
mstore(add(transcript, 0x7400), 0x03f7c9dd1448ef38873abc3716aa5710772bfef32a1bc80775f1aa94675462e5)
                    mstore(add(transcript, 0x7420), 0x22c4ebec113be06259ea8ad2ca667b50efc61acc0c34c33afb416ad0d376210a)
mstore(add(transcript, 0x7440), mload(add(transcript, 0x5c40)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7400), 0x60, add(transcript, 0x7400), 0x40), 1), success)
mstore(add(transcript, 0x7460), mload(add(transcript, 0x7380)))
                    mstore(add(transcript, 0x7480), mload(add(transcript, 0x73a0)))
mstore(add(transcript, 0x74a0), mload(add(transcript, 0x7400)))
                    mstore(add(transcript, 0x74c0), mload(add(transcript, 0x7420)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7460), 0x80, add(transcript, 0x7460), 0x40), 1), success)
mstore(add(transcript, 0x74e0), 0x2bb1306f71c057effa5ae0e33dff7ecb2f09c07b7a297a5ebc24e49a0d11b6d6)
                    mstore(add(transcript, 0x7500), 0x258c5943aacd0ec17bb5acc8287fa33c44e0585b479b4f3fba8790963276dbb7)
mstore(add(transcript, 0x7520), mload(add(transcript, 0x5c60)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x74e0), 0x60, add(transcript, 0x74e0), 0x40), 1), success)
mstore(add(transcript, 0x7540), mload(add(transcript, 0x7460)))
                    mstore(add(transcript, 0x7560), mload(add(transcript, 0x7480)))
mstore(add(transcript, 0x7580), mload(add(transcript, 0x74e0)))
                    mstore(add(transcript, 0x75a0), mload(add(transcript, 0x7500)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7540), 0x80, add(transcript, 0x7540), 0x40), 1), success)
mstore(add(transcript, 0x75c0), 0x1ea171d74ea634b605fc0f9c50125b76c83ac8a568f081e733d4ce9ffba7ec10)
                    mstore(add(transcript, 0x75e0), 0x172b9f025c61b61f7bd9d84b7291410ad83a061cabf043c1803bcd1199b01db1)
mstore(add(transcript, 0x7600), mload(add(transcript, 0x5c80)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x75c0), 0x60, add(transcript, 0x75c0), 0x40), 1), success)
mstore(add(transcript, 0x7620), mload(add(transcript, 0x7540)))
                    mstore(add(transcript, 0x7640), mload(add(transcript, 0x7560)))
mstore(add(transcript, 0x7660), mload(add(transcript, 0x75c0)))
                    mstore(add(transcript, 0x7680), mload(add(transcript, 0x75e0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7620), 0x80, add(transcript, 0x7620), 0x40), 1), success)
mstore(add(transcript, 0x76a0), 0x1994029d54eecb52ab6f2eb2be8961b22709917c9fb46df69cc3caf2755c329e)
                    mstore(add(transcript, 0x76c0), 0x1051af2519a16a8faba23c798f589a775acb4e3e492433cc0fe6509c27b0b8b1)
mstore(add(transcript, 0x76e0), mload(add(transcript, 0x5ca0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x76a0), 0x60, add(transcript, 0x76a0), 0x40), 1), success)
mstore(add(transcript, 0x7700), mload(add(transcript, 0x7620)))
                    mstore(add(transcript, 0x7720), mload(add(transcript, 0x7640)))
mstore(add(transcript, 0x7740), mload(add(transcript, 0x76a0)))
                    mstore(add(transcript, 0x7760), mload(add(transcript, 0x76c0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7700), 0x80, add(transcript, 0x7700), 0x40), 1), success)
mstore(add(transcript, 0x7780), 0x115375c4589b6922ad9de276f551894adfb7815609d21b0ee5771d74eab3c3d7)
                    mstore(add(transcript, 0x77a0), 0x27ebffe5633b945283153af352cec4d071ce33eebfb736f726046a74202aa72a)
mstore(add(transcript, 0x77c0), mload(add(transcript, 0x5cc0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7780), 0x60, add(transcript, 0x7780), 0x40), 1), success)
mstore(add(transcript, 0x77e0), mload(add(transcript, 0x7700)))
                    mstore(add(transcript, 0x7800), mload(add(transcript, 0x7720)))
mstore(add(transcript, 0x7820), mload(add(transcript, 0x7780)))
                    mstore(add(transcript, 0x7840), mload(add(transcript, 0x77a0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x77e0), 0x80, add(transcript, 0x77e0), 0x40), 1), success)
mstore(add(transcript, 0x7860), 0x101ce953d97b16794d7f4554d2840ab6119f63bcf5aab04db70802ec73d5d0b1)
                    mstore(add(transcript, 0x7880), 0x175cda852110c69273449da6099fcd97e800d130a1524ee4a88db65d213e1bd9)
mstore(add(transcript, 0x78a0), mload(add(transcript, 0x5ce0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7860), 0x60, add(transcript, 0x7860), 0x40), 1), success)
mstore(add(transcript, 0x78c0), mload(add(transcript, 0x77e0)))
                    mstore(add(transcript, 0x78e0), mload(add(transcript, 0x7800)))
mstore(add(transcript, 0x7900), mload(add(transcript, 0x7860)))
                    mstore(add(transcript, 0x7920), mload(add(transcript, 0x7880)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x78c0), 0x80, add(transcript, 0x78c0), 0x40), 1), success)
mstore(add(transcript, 0x7940), 0x2e4ddb019ee1a7bfbc2119424fea14649487c7b712d919af9987dd7adbfb1ef0)
                    mstore(add(transcript, 0x7960), 0x12c866b881f22478b9b8d238a9e4ae6ac11a4e48df8089e2a350977d68f93862)
mstore(add(transcript, 0x7980), mload(add(transcript, 0x5d00)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7940), 0x60, add(transcript, 0x7940), 0x40), 1), success)
mstore(add(transcript, 0x79a0), mload(add(transcript, 0x78c0)))
                    mstore(add(transcript, 0x79c0), mload(add(transcript, 0x78e0)))
mstore(add(transcript, 0x79e0), mload(add(transcript, 0x7940)))
                    mstore(add(transcript, 0x7a00), mload(add(transcript, 0x7960)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x79a0), 0x80, add(transcript, 0x79a0), 0x40), 1), success)
mstore(add(transcript, 0x7a20), 0x1b6dea5d6694f3f846e346df344d8820c4976a99881ac57740ade77ef4a75dc6)
                    mstore(add(transcript, 0x7a40), 0x020c3cf2e4977bcce01d822c5f7c65b5e2f7ca839ac43ca4b5f180b7179bff0f)
mstore(add(transcript, 0x7a60), mload(add(transcript, 0x5d20)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7a20), 0x60, add(transcript, 0x7a20), 0x40), 1), success)
mstore(add(transcript, 0x7a80), mload(add(transcript, 0x79a0)))
                    mstore(add(transcript, 0x7aa0), mload(add(transcript, 0x79c0)))
mstore(add(transcript, 0x7ac0), mload(add(transcript, 0x7a20)))
                    mstore(add(transcript, 0x7ae0), mload(add(transcript, 0x7a40)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7a80), 0x80, add(transcript, 0x7a80), 0x40), 1), success)
mstore(add(transcript, 0x7b00), 0x17a4c6c9beaa0922ce5f9b8c2ab6a98b66502338c63fa1f9ec5c53500e685913)
                    mstore(add(transcript, 0x7b20), 0x04cd8104c86da5aa9744d5d71354e11bf7bac4b4f16c45c84bf736c19a10e05a)
mstore(add(transcript, 0x7b40), mload(add(transcript, 0x5d40)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7b00), 0x60, add(transcript, 0x7b00), 0x40), 1), success)
mstore(add(transcript, 0x7b60), mload(add(transcript, 0x7a80)))
                    mstore(add(transcript, 0x7b80), mload(add(transcript, 0x7aa0)))
mstore(add(transcript, 0x7ba0), mload(add(transcript, 0x7b00)))
                    mstore(add(transcript, 0x7bc0), mload(add(transcript, 0x7b20)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7b60), 0x80, add(transcript, 0x7b60), 0x40), 1), success)
mstore(add(transcript, 0x7be0), 0x03f9dd7761d8f1feb469a2b55f66c4028e5df5de1b4a66b55e8ea0d9dbd1ade2)
                    mstore(add(transcript, 0x7c00), 0x1309413c54542561d4daaf3806db8775fec3ba84911fe723207dbdff65b18a80)
mstore(add(transcript, 0x7c20), mload(add(transcript, 0x5d60)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7be0), 0x60, add(transcript, 0x7be0), 0x40), 1), success)
mstore(add(transcript, 0x7c40), mload(add(transcript, 0x7b60)))
                    mstore(add(transcript, 0x7c60), mload(add(transcript, 0x7b80)))
mstore(add(transcript, 0x7c80), mload(add(transcript, 0x7be0)))
                    mstore(add(transcript, 0x7ca0), mload(add(transcript, 0x7c00)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7c40), 0x80, add(transcript, 0x7c40), 0x40), 1), success)
mstore(add(transcript, 0x7cc0), mload(add(transcript, 0x6c0)))
                    mstore(add(transcript, 0x7ce0), mload(add(transcript, 0x6e0)))
mstore(add(transcript, 0x7d00), mload(add(transcript, 0x5d80)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7cc0), 0x60, add(transcript, 0x7cc0), 0x40), 1), success)
mstore(add(transcript, 0x7d20), mload(add(transcript, 0x7c40)))
                    mstore(add(transcript, 0x7d40), mload(add(transcript, 0x7c60)))
mstore(add(transcript, 0x7d60), mload(add(transcript, 0x7cc0)))
                    mstore(add(transcript, 0x7d80), mload(add(transcript, 0x7ce0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7d20), 0x80, add(transcript, 0x7d20), 0x40), 1), success)
mstore(add(transcript, 0x7da0), mload(add(transcript, 0x700)))
                    mstore(add(transcript, 0x7dc0), mload(add(transcript, 0x720)))
mstore(add(transcript, 0x7de0), mload(add(transcript, 0x5da0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7da0), 0x60, add(transcript, 0x7da0), 0x40), 1), success)
mstore(add(transcript, 0x7e00), mload(add(transcript, 0x7d20)))
                    mstore(add(transcript, 0x7e20), mload(add(transcript, 0x7d40)))
mstore(add(transcript, 0x7e40), mload(add(transcript, 0x7da0)))
                    mstore(add(transcript, 0x7e60), mload(add(transcript, 0x7dc0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7e00), 0x80, add(transcript, 0x7e00), 0x40), 1), success)
mstore(add(transcript, 0x7e80), mload(add(transcript, 0x740)))
                    mstore(add(transcript, 0x7ea0), mload(add(transcript, 0x760)))
mstore(add(transcript, 0x7ec0), mload(add(transcript, 0x5dc0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7e80), 0x60, add(transcript, 0x7e80), 0x40), 1), success)
mstore(add(transcript, 0x7ee0), mload(add(transcript, 0x7e00)))
                    mstore(add(transcript, 0x7f00), mload(add(transcript, 0x7e20)))
mstore(add(transcript, 0x7f20), mload(add(transcript, 0x7e80)))
                    mstore(add(transcript, 0x7f40), mload(add(transcript, 0x7ea0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7ee0), 0x80, add(transcript, 0x7ee0), 0x40), 1), success)
mstore(add(transcript, 0x7f60), mload(add(transcript, 0x620)))
                    mstore(add(transcript, 0x7f80), mload(add(transcript, 0x640)))
mstore(add(transcript, 0x7fa0), mload(add(transcript, 0x5de0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7f60), 0x60, add(transcript, 0x7f60), 0x40), 1), success)
mstore(add(transcript, 0x7fc0), mload(add(transcript, 0x7ee0)))
                    mstore(add(transcript, 0x7fe0), mload(add(transcript, 0x7f00)))
mstore(add(transcript, 0x8000), mload(add(transcript, 0x7f60)))
                    mstore(add(transcript, 0x8020), mload(add(transcript, 0x7f80)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7fc0), 0x80, add(transcript, 0x7fc0), 0x40), 1), success)
mstore(add(transcript, 0x8040), mload(add(transcript, 0x460)))
                    mstore(add(transcript, 0x8060), mload(add(transcript, 0x480)))
mstore(add(transcript, 0x8080), mload(add(transcript, 0x6160)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8040), 0x60, add(transcript, 0x8040), 0x40), 1), success)
mstore(add(transcript, 0x80a0), mload(add(transcript, 0x7fc0)))
                    mstore(add(transcript, 0x80c0), mload(add(transcript, 0x7fe0)))
mstore(add(transcript, 0x80e0), mload(add(transcript, 0x8040)))
                    mstore(add(transcript, 0x8100), mload(add(transcript, 0x8060)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x80a0), 0x80, add(transcript, 0x80a0), 0x40), 1), success)
mstore(add(transcript, 0x8120), mload(add(transcript, 0x4a0)))
                    mstore(add(transcript, 0x8140), mload(add(transcript, 0x4c0)))
mstore(add(transcript, 0x8160), mload(add(transcript, 0x6180)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8120), 0x60, add(transcript, 0x8120), 0x40), 1), success)
mstore(add(transcript, 0x8180), mload(add(transcript, 0x80a0)))
                    mstore(add(transcript, 0x81a0), mload(add(transcript, 0x80c0)))
mstore(add(transcript, 0x81c0), mload(add(transcript, 0x8120)))
                    mstore(add(transcript, 0x81e0), mload(add(transcript, 0x8140)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8180), 0x80, add(transcript, 0x8180), 0x40), 1), success)
mstore(add(transcript, 0x8200), mload(add(transcript, 0x4e0)))
                    mstore(add(transcript, 0x8220), mload(add(transcript, 0x500)))
mstore(add(transcript, 0x8240), mload(add(transcript, 0x61a0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8200), 0x60, add(transcript, 0x8200), 0x40), 1), success)
mstore(add(transcript, 0x8260), mload(add(transcript, 0x8180)))
                    mstore(add(transcript, 0x8280), mload(add(transcript, 0x81a0)))
mstore(add(transcript, 0x82a0), mload(add(transcript, 0x8200)))
                    mstore(add(transcript, 0x82c0), mload(add(transcript, 0x8220)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8260), 0x80, add(transcript, 0x8260), 0x40), 1), success)
mstore(add(transcript, 0x82e0), mload(add(transcript, 0x520)))
                    mstore(add(transcript, 0x8300), mload(add(transcript, 0x540)))
mstore(add(transcript, 0x8320), mload(add(transcript, 0x61c0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x82e0), 0x60, add(transcript, 0x82e0), 0x40), 1), success)
mstore(add(transcript, 0x8340), mload(add(transcript, 0x8260)))
                    mstore(add(transcript, 0x8360), mload(add(transcript, 0x8280)))
mstore(add(transcript, 0x8380), mload(add(transcript, 0x82e0)))
                    mstore(add(transcript, 0x83a0), mload(add(transcript, 0x8300)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8340), 0x80, add(transcript, 0x8340), 0x40), 1), success)
mstore(add(transcript, 0x83c0), mload(add(transcript, 0x560)))
                    mstore(add(transcript, 0x83e0), mload(add(transcript, 0x580)))
mstore(add(transcript, 0x8400), mload(add(transcript, 0x61e0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x83c0), 0x60, add(transcript, 0x83c0), 0x40), 1), success)
mstore(add(transcript, 0x8420), mload(add(transcript, 0x8340)))
                    mstore(add(transcript, 0x8440), mload(add(transcript, 0x8360)))
mstore(add(transcript, 0x8460), mload(add(transcript, 0x83c0)))
                    mstore(add(transcript, 0x8480), mload(add(transcript, 0x83e0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8420), 0x80, add(transcript, 0x8420), 0x40), 1), success)
mstore(add(transcript, 0x84a0), mload(add(transcript, 0x5a0)))
                    mstore(add(transcript, 0x84c0), mload(add(transcript, 0x5c0)))
mstore(add(transcript, 0x84e0), mload(add(transcript, 0x6380)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x84a0), 0x60, add(transcript, 0x84a0), 0x40), 1), success)
mstore(add(transcript, 0x8500), mload(add(transcript, 0x8420)))
                    mstore(add(transcript, 0x8520), mload(add(transcript, 0x8440)))
mstore(add(transcript, 0x8540), mload(add(transcript, 0x84a0)))
                    mstore(add(transcript, 0x8560), mload(add(transcript, 0x84c0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8500), 0x80, add(transcript, 0x8500), 0x40), 1), success)
mstore(add(transcript, 0x8580), mload(add(transcript, 0x5e0)))
                    mstore(add(transcript, 0x85a0), mload(add(transcript, 0x600)))
mstore(add(transcript, 0x85c0), mload(add(transcript, 0x63a0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8580), 0x60, add(transcript, 0x8580), 0x40), 1), success)
mstore(add(transcript, 0x85e0), mload(add(transcript, 0x8500)))
                    mstore(add(transcript, 0x8600), mload(add(transcript, 0x8520)))
mstore(add(transcript, 0x8620), mload(add(transcript, 0x8580)))
                    mstore(add(transcript, 0x8640), mload(add(transcript, 0x85a0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x85e0), 0x80, add(transcript, 0x85e0), 0x40), 1), success)
mstore(add(transcript, 0x8660), mload(add(transcript, 0x320)))
                    mstore(add(transcript, 0x8680), mload(add(transcript, 0x340)))
mstore(add(transcript, 0x86a0), mload(add(transcript, 0x64a0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8660), 0x60, add(transcript, 0x8660), 0x40), 1), success)
mstore(add(transcript, 0x86c0), mload(add(transcript, 0x85e0)))
                    mstore(add(transcript, 0x86e0), mload(add(transcript, 0x8600)))
mstore(add(transcript, 0x8700), mload(add(transcript, 0x8660)))
                    mstore(add(transcript, 0x8720), mload(add(transcript, 0x8680)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x86c0), 0x80, add(transcript, 0x86c0), 0x40), 1), success)
mstore(add(transcript, 0x8740), mload(add(transcript, 0x11c0)))
                    mstore(add(transcript, 0x8760), mload(add(transcript, 0x11e0)))
mstore(add(transcript, 0x8780), sub(f_q, mload(add(transcript, 0x64e0))))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8740), 0x60, add(transcript, 0x8740), 0x40), 1), success)
mstore(add(transcript, 0x87a0), mload(add(transcript, 0x86c0)))
                    mstore(add(transcript, 0x87c0), mload(add(transcript, 0x86e0)))
mstore(add(transcript, 0x87e0), mload(add(transcript, 0x8740)))
                    mstore(add(transcript, 0x8800), mload(add(transcript, 0x8760)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x87a0), 0x80, add(transcript, 0x87a0), 0x40), 1), success)
mstore(add(transcript, 0x8820), mload(add(transcript, 0x1260)))
                    mstore(add(transcript, 0x8840), mload(add(transcript, 0x1280)))
mstore(add(transcript, 0x8860), mload(add(transcript, 0x6500)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x8820), 0x60, add(transcript, 0x8820), 0x40), 1), success)
mstore(add(transcript, 0x8880), mload(add(transcript, 0x87a0)))
                    mstore(add(transcript, 0x88a0), mload(add(transcript, 0x87c0)))
mstore(add(transcript, 0x88c0), mload(add(transcript, 0x8820)))
                    mstore(add(transcript, 0x88e0), mload(add(transcript, 0x8840)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x8880), 0x80, add(transcript, 0x8880), 0x40), 1), success)
mstore(add(transcript, 0x8900), mload(add(transcript, 0x8880)))
                    mstore(add(transcript, 0x8920), mload(add(transcript, 0x88a0)))
mstore(add(transcript, 0x8940), 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(add(transcript, 0x8960), 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(add(transcript, 0x8980), 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(add(transcript, 0x89a0), 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(add(transcript, 0x89c0), mload(add(transcript, 0x1260)))
                    mstore(add(transcript, 0x89e0), mload(add(transcript, 0x1280)))
mstore(add(transcript, 0x8a00), 0x02bb08cd02255f03f68752a49670aff168f06c4dc3e61da06dc4c01f0fdcd224)
            mstore(add(transcript, 0x8a20), 0x172011b5a9f869c9c43b284680eec21bca494674b484f92bd4deba7511c686ce)
            mstore(add(transcript, 0x8a40), 0x1b3856aa8ebe922476cec5710d73672c1bff1476980854b2978d07a9f8eaca72)
            mstore(add(transcript, 0x8a60), 0x24c10b4979af6e3215b78d5d2ac15148b7030f658117741046443d6acbcdef0c)
success := and(eq(staticcall(gas(), 0x8, add(transcript, 0x8900), 0x180, add(transcript, 0x8900), 0x20), 1), success)
success := and(eq(mload(add(transcript, 0x8900)), 1), success)

        }}
        // transcriptBytes = abi.encode(transcript.length, transcript);
        bytes32[] memory newTranscript = new bytes32[](_transcript.length);
        for(uint i=0; i<_transcript.length; i++) {
            newTranscript[i] = transcript[i];
        }
        return (success, newTranscript);
    } 
}
